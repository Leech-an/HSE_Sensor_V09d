
HSE_Sensor_V09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c628  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800c7b8  0800c7b8  0000d7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c800  0800c800  0000e00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c800  0800c800  0000d800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c808  0800c808  0000e00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c808  0800c808  0000d808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c80c  0800c80c  0000d80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800c810  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  2000000c  0800c81c  0000e00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  0800c81c  0000e904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec1a  00000000  00000000  0000e03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045aa  00000000  00000000  0002cc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  00031200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f7  00000000  00000000  00032d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000200b6  00000000  00000000  00034207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023b80  00000000  00000000  000542bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2589  00000000  00000000  00077e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a3c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007258  00000000  00000000  0013a40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00141664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7a0 	.word	0x0800c7a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	0800c7a0 	.word	0x0800c7a0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b988 	b.w	8000d34 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	468e      	mov	lr, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	4688      	mov	r8, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d962      	bls.n	8000b18 <__udivmoddi4+0xdc>
 8000a52:	fab2 f682 	clz	r6, r2
 8000a56:	b14e      	cbz	r6, 8000a6c <__udivmoddi4+0x30>
 8000a58:	f1c6 0320 	rsb	r3, r6, #32
 8000a5c:	fa01 f806 	lsl.w	r8, r1, r6
 8000a60:	fa20 f303 	lsr.w	r3, r0, r3
 8000a64:	40b7      	lsls	r7, r6
 8000a66:	ea43 0808 	orr.w	r8, r3, r8
 8000a6a:	40b4      	lsls	r4, r6
 8000a6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a70:	fa1f fc87 	uxth.w	ip, r7
 8000a74:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a78:	0c23      	lsrs	r3, r4, #16
 8000a7a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fb01 f20c 	mul.w	r2, r1, ip
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d909      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a90:	f080 80ea 	bcs.w	8000c68 <__udivmoddi4+0x22c>
 8000a94:	429a      	cmp	r2, r3
 8000a96:	f240 80e7 	bls.w	8000c68 <__udivmoddi4+0x22c>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	443b      	add	r3, r7
 8000a9e:	1a9a      	subs	r2, r3, r2
 8000aa0:	b2a3      	uxth	r3, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab2:	459c      	cmp	ip, r3
 8000ab4:	d909      	bls.n	8000aca <__udivmoddi4+0x8e>
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abc:	f080 80d6 	bcs.w	8000c6c <__udivmoddi4+0x230>
 8000ac0:	459c      	cmp	ip, r3
 8000ac2:	f240 80d3 	bls.w	8000c6c <__udivmoddi4+0x230>
 8000ac6:	443b      	add	r3, r7
 8000ac8:	3802      	subs	r0, #2
 8000aca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ace:	eba3 030c 	sub.w	r3, r3, ip
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11d      	cbz	r5, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40f3      	lsrs	r3, r6
 8000ad8:	2200      	movs	r2, #0
 8000ada:	e9c5 3200 	strd	r3, r2, [r5]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d905      	bls.n	8000af2 <__udivmoddi4+0xb6>
 8000ae6:	b10d      	cbz	r5, 8000aec <__udivmoddi4+0xb0>
 8000ae8:	e9c5 0100 	strd	r0, r1, [r5]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4608      	mov	r0, r1
 8000af0:	e7f5      	b.n	8000ade <__udivmoddi4+0xa2>
 8000af2:	fab3 f183 	clz	r1, r3
 8000af6:	2900      	cmp	r1, #0
 8000af8:	d146      	bne.n	8000b88 <__udivmoddi4+0x14c>
 8000afa:	4573      	cmp	r3, lr
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xc8>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 8105 	bhi.w	8000d0e <__udivmoddi4+0x2d2>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4690      	mov	r8, r2
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d0e5      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b12:	e9c5 4800 	strd	r4, r8, [r5]
 8000b16:	e7e2      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	f000 8090 	beq.w	8000c3e <__udivmoddi4+0x202>
 8000b1e:	fab2 f682 	clz	r6, r2
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	f040 80a4 	bne.w	8000c70 <__udivmoddi4+0x234>
 8000b28:	1a8a      	subs	r2, r1, r2
 8000b2a:	0c03      	lsrs	r3, r0, #16
 8000b2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b30:	b280      	uxth	r0, r0
 8000b32:	b2bc      	uxth	r4, r7
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b3a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b42:	fb04 f20c 	mul.w	r2, r4, ip
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d907      	bls.n	8000b5a <__udivmoddi4+0x11e>
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b50:	d202      	bcs.n	8000b58 <__udivmoddi4+0x11c>
 8000b52:	429a      	cmp	r2, r3
 8000b54:	f200 80e0 	bhi.w	8000d18 <__udivmoddi4+0x2dc>
 8000b58:	46c4      	mov	ip, r8
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b60:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b68:	fb02 f404 	mul.w	r4, r2, r4
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x144>
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x142>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f200 80ca 	bhi.w	8000d12 <__udivmoddi4+0x2d6>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	1b1b      	subs	r3, r3, r4
 8000b82:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b88:	f1c1 0620 	rsb	r6, r1, #32
 8000b8c:	408b      	lsls	r3, r1
 8000b8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b92:	431f      	orrs	r7, r3
 8000b94:	fa0e f401 	lsl.w	r4, lr, r1
 8000b98:	fa20 f306 	lsr.w	r3, r0, r6
 8000b9c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ba0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ba4:	4323      	orrs	r3, r4
 8000ba6:	fa00 f801 	lsl.w	r8, r0, r1
 8000baa:	fa1f fc87 	uxth.w	ip, r7
 8000bae:	fbbe f0f9 	udiv	r0, lr, r9
 8000bb2:	0c1c      	lsrs	r4, r3, #16
 8000bb4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bb8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bbc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x1a0>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bce:	f080 809c 	bcs.w	8000d0a <__udivmoddi4+0x2ce>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f240 8099 	bls.w	8000d0a <__udivmoddi4+0x2ce>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	fa1f fe83 	uxth.w	lr, r3
 8000be4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be8:	fb09 4413 	mls	r4, r9, r3, r4
 8000bec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bf0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf4:	45a4      	cmp	ip, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x1ce>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bfe:	f080 8082 	bcs.w	8000d06 <__udivmoddi4+0x2ca>
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d97f      	bls.n	8000d06 <__udivmoddi4+0x2ca>
 8000c06:	3b02      	subs	r3, #2
 8000c08:	443c      	add	r4, r7
 8000c0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c16:	4564      	cmp	r4, ip
 8000c18:	4673      	mov	r3, lr
 8000c1a:	46e1      	mov	r9, ip
 8000c1c:	d362      	bcc.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c1e:	d05f      	beq.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c20:	b15d      	cbz	r5, 8000c3a <__udivmoddi4+0x1fe>
 8000c22:	ebb8 0203 	subs.w	r2, r8, r3
 8000c26:	eb64 0409 	sbc.w	r4, r4, r9
 8000c2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c32:	431e      	orrs	r6, r3
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	e9c5 6400 	strd	r6, r4, [r5]
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	e74f      	b.n	8000ade <__udivmoddi4+0xa2>
 8000c3e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c42:	0c01      	lsrs	r1, r0, #16
 8000c44:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4638      	mov	r0, r7
 8000c52:	463c      	mov	r4, r7
 8000c54:	46b8      	mov	r8, r7
 8000c56:	46be      	mov	lr, r7
 8000c58:	2620      	movs	r6, #32
 8000c5a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c5e:	eba2 0208 	sub.w	r2, r2, r8
 8000c62:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c66:	e766      	b.n	8000b36 <__udivmoddi4+0xfa>
 8000c68:	4601      	mov	r1, r0
 8000c6a:	e718      	b.n	8000a9e <__udivmoddi4+0x62>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	e72c      	b.n	8000aca <__udivmoddi4+0x8e>
 8000c70:	f1c6 0220 	rsb	r2, r6, #32
 8000c74:	fa2e f302 	lsr.w	r3, lr, r2
 8000c78:	40b7      	lsls	r7, r6
 8000c7a:	40b1      	lsls	r1, r6
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c84:	430a      	orrs	r2, r1
 8000c86:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c90:	0c11      	lsrs	r1, r2, #16
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb08 f904 	mul.w	r9, r8, r4
 8000c9a:	40b0      	lsls	r0, r6
 8000c9c:	4589      	cmp	r9, r1
 8000c9e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ca2:	b280      	uxth	r0, r0
 8000ca4:	d93e      	bls.n	8000d24 <__udivmoddi4+0x2e8>
 8000ca6:	1879      	adds	r1, r7, r1
 8000ca8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cac:	d201      	bcs.n	8000cb2 <__udivmoddi4+0x276>
 8000cae:	4589      	cmp	r9, r1
 8000cb0:	d81f      	bhi.n	8000cf2 <__udivmoddi4+0x2b6>
 8000cb2:	eba1 0109 	sub.w	r1, r1, r9
 8000cb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cba:	fb09 f804 	mul.w	r8, r9, r4
 8000cbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cc2:	b292      	uxth	r2, r2
 8000cc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc8:	4542      	cmp	r2, r8
 8000cca:	d229      	bcs.n	8000d20 <__udivmoddi4+0x2e4>
 8000ccc:	18ba      	adds	r2, r7, r2
 8000cce:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cd2:	d2c4      	bcs.n	8000c5e <__udivmoddi4+0x222>
 8000cd4:	4542      	cmp	r2, r8
 8000cd6:	d2c2      	bcs.n	8000c5e <__udivmoddi4+0x222>
 8000cd8:	f1a9 0102 	sub.w	r1, r9, #2
 8000cdc:	443a      	add	r2, r7
 8000cde:	e7be      	b.n	8000c5e <__udivmoddi4+0x222>
 8000ce0:	45f0      	cmp	r8, lr
 8000ce2:	d29d      	bcs.n	8000c20 <__udivmoddi4+0x1e4>
 8000ce4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ce8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cec:	3801      	subs	r0, #1
 8000cee:	46e1      	mov	r9, ip
 8000cf0:	e796      	b.n	8000c20 <__udivmoddi4+0x1e4>
 8000cf2:	eba7 0909 	sub.w	r9, r7, r9
 8000cf6:	4449      	add	r1, r9
 8000cf8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cfc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d00:	fb09 f804 	mul.w	r8, r9, r4
 8000d04:	e7db      	b.n	8000cbe <__udivmoddi4+0x282>
 8000d06:	4673      	mov	r3, lr
 8000d08:	e77f      	b.n	8000c0a <__udivmoddi4+0x1ce>
 8000d0a:	4650      	mov	r0, sl
 8000d0c:	e766      	b.n	8000bdc <__udivmoddi4+0x1a0>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e6fd      	b.n	8000b0e <__udivmoddi4+0xd2>
 8000d12:	443b      	add	r3, r7
 8000d14:	3a02      	subs	r2, #2
 8000d16:	e733      	b.n	8000b80 <__udivmoddi4+0x144>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	443b      	add	r3, r7
 8000d1e:	e71c      	b.n	8000b5a <__udivmoddi4+0x11e>
 8000d20:	4649      	mov	r1, r9
 8000d22:	e79c      	b.n	8000c5e <__udivmoddi4+0x222>
 8000d24:	eba1 0109 	sub.w	r1, r1, r9
 8000d28:	46c4      	mov	ip, r8
 8000d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2e:	fb09 f804 	mul.w	r8, r9, r4
 8000d32:	e7c4      	b.n	8000cbe <__udivmoddi4+0x282>

08000d34 <__aeabi_idiv0>:
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <I2C_EEP_Init>:
EEP_HandleTypeDef I2C_HI2C;


//EEPROM Init
bool I2C_EEP_Init(I2C_HandleTypeDef *HI2c, uint8_t I2CAddress)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
	bool answer = false;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

	I2C_HI2C.HI2c = HI2c;
 8000d48:	4a0f      	ldr	r2, [pc, #60]	@ (8000d88 <I2C_EEP_Init+0x50>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
	I2C_HI2C.Address = I2CAddress;
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <I2C_EEP_Init+0x50>)
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	7153      	strb	r3, [r2, #5]

	HAL_GPIO_WritePin(PROM_WP_GPIO_Port, PROM_WP_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5e:	f007 fd9d 	bl	800889c <HAL_GPIO_WritePin>

	if (HAL_I2C_IsDeviceReady(I2C_HI2C.HI2c, I2C_HI2C.Address , 2, 100) == HAL_OK)
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <I2C_EEP_Init+0x50>)
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <I2C_EEP_Init+0x50>)
 8000d68:	795b      	ldrb	r3, [r3, #5]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2364      	movs	r3, #100	@ 0x64
 8000d6e:	2202      	movs	r2, #2
 8000d70:	f008 f88e 	bl	8008e90 <HAL_I2C_IsDeviceReady>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <I2C_EEP_Init+0x46>
	{
		answer = true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
	}
	return answer;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000028 	.word	0x20000028

08000d8c <I2C_EEP_Read>:

uint8_t I2C_EEP_Read(uint32_t MemAddress)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	6078      	str	r0, [r7, #4]
	uint8_t result[2] = {0,};
 8000d94:	2300      	movs	r3, #0
 8000d96:	81bb      	strh	r3, [r7, #12]

	HAL_GPIO_WritePin(PROM_WP_GPIO_Port, PROM_WP_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da2:	f007 fd7b 	bl	800889c <HAL_GPIO_WritePin>
	//HAL_Delay(10);
	while(HAL_I2C_IsDeviceReady(I2C_HI2C.HI2c, I2C_HI2C.Address, 1, HAL_MAX_DELAY) != HAL_OK);
 8000da6:	bf00      	nop
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <I2C_EEP_Read+0x64>)
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <I2C_EEP_Read+0x64>)
 8000dae:	795b      	ldrb	r3, [r3, #5]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	2201      	movs	r2, #1
 8000db8:	f008 f86a 	bl	8008e90 <HAL_I2C_IsDeviceReady>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f2      	bne.n	8000da8 <I2C_EEP_Read+0x1c>

	HAL_I2C_Mem_Read(I2C_HI2C.HI2c, I2C_HI2C.Address, MemAddress, I2C_MEMADD_SIZE_8BIT, result, 1, HAL_MAX_DELAY);
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <I2C_EEP_Read+0x64>)
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <I2C_EEP_Read+0x64>)
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd4:	9302      	str	r3, [sp, #8]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	f007 ff3b 	bl	8008c5c <HAL_I2C_Mem_Read>
	//HAL_Delay(10);
	return result[0];
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000028 	.word	0x20000028

08000df4 <I2C_EEP_Write>:

bool I2C_EEP_Write(uint32_t MemAddress, uint8_t Data)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af04      	add	r7, sp, #16
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	bool answer = false;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
	uint8_t result[2] = {Data,};
 8000e04:	2300      	movs	r3, #0
 8000e06:	81bb      	strh	r3, [r7, #12]
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(PROM_WP_GPIO_Port, PROM_WP_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e16:	f007 fd41 	bl	800889c <HAL_GPIO_WritePin>
	//HAL_Delay(10);
	while(HAL_I2C_IsDeviceReady(I2C_HI2C.HI2c, I2C_HI2C.Address, 1, HAL_MAX_DELAY) != HAL_OK);
 8000e1a:	bf00      	nop
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <I2C_EEP_Write+0x80>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <I2C_EEP_Write+0x80>)
 8000e22:	795b      	ldrb	r3, [r3, #5]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f008 f830 	bl	8008e90 <HAL_I2C_IsDeviceReady>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f2      	bne.n	8000e1c <I2C_EEP_Write+0x28>

	HAL_I2C_Mem_Write(I2C_HI2C.HI2c, I2C_HI2C.Address, MemAddress, I2C_MEMADD_SIZE_8BIT, result, 1, HAL_MAX_DELAY);
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <I2C_EEP_Write+0x80>)
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <I2C_EEP_Write+0x80>)
 8000e3c:	795b      	ldrb	r3, [r3, #5]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	f007 fded 	bl	8008a34 <HAL_I2C_Mem_Write>
	//HAL_Delay(10);
	HAL_GPIO_WritePin(PROM_WP_GPIO_Port, PROM_WP_Pin, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e64:	f007 fd1a 	bl	800889c <HAL_GPIO_WritePin>
	//HAL_Delay(10);
	return answer;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000028 	.word	0x20000028

08000e78 <I2C_EEP_READ_U08>:
	HAL_I2C_Mem_Read(&hI2C1, DEVICE_ADDR, Idx, I2C_MEMADD_SIZE_8BIT, &rbuf, Page, HAL_MAX_DELAY);//(hI2C1, DEVICE_ADDR, Idx, I2C_MEMADD_SIZE_16BIT, rbuf, Page, 1000);
	return rbuf;
}
*/
uint8_t I2C_EEP_READ_U08 (uint32_t Idx)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
	result = I2C_EEP_Read(Idx);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff81 	bl	8000d8c <I2C_EEP_Read>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73fb      	strb	r3, [r7, #15]
	return result;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <I2C_EEP_READ_U16>:

uint16_t I2C_EEP_READ_U16(uint32_t Idx)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	uint16_t result = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	81fb      	strh	r3, [r7, #14]

	result =  (uint16_t)(I2C_EEP_Read(Idx) << 8) ;
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff71 	bl	8000d8c <I2C_EEP_Read>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	81fb      	strh	r3, [r7, #14]
	result |= (uint16_t)(I2C_EEP_Read(Idx+1));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff69 	bl	8000d8c <I2C_EEP_Read>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	81fb      	strh	r3, [r7, #14]

	return result;
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <I2C_EEP_READ_U32>:

uint32_t I2C_EEP_READ_U32(uint32_t Idx)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]

	result  = (uint32_t)(I2C_EEP_Read(Idx)   << 24);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff56 	bl	8000d8c <I2C_EEP_Read>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	061b      	lsls	r3, r3, #24
 8000ee4:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+1) << 16);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff4e 	bl	8000d8c <I2C_EEP_Read>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+2) << 8);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3302      	adds	r3, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff44 	bl	8000d8c <I2C_EEP_Read>
 8000f04:	4603      	mov	r3, r0
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+3));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3303      	adds	r3, #3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff3a 	bl	8000d8c <I2C_EEP_Read>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]

	return result;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <I2C_EEP_READ_FLOAT>:

float I2C_EEP_READ_FLOAT (uint32_t Idx)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	uint32_t result  = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]

	result  = (uint32_t)(I2C_EEP_Read(Idx)   << 24);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff27 	bl	8000d8c <I2C_EEP_Read>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	061b      	lsls	r3, r3, #24
 8000f42:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+1) << 16);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff1f 	bl	8000d8c <I2C_EEP_Read>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	041a      	lsls	r2, r3, #16
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+2) << 8);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff15 	bl	8000d8c <I2C_EEP_Read>
 8000f62:	4603      	mov	r3, r0
 8000f64:	021a      	lsls	r2, r3, #8
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+3));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3303      	adds	r3, #3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff0b 	bl	8000d8c <I2C_EEP_Read>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]


	return *((float*)&result);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	ee07 3a90 	vmov	s15, r3
}
 8000f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <I2C_EEP_WRITE_U08>:

uint8_t I2C_EEP_WRITE_U08 (uint32_t Idx, uint8_t nData)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]

	uint8_t ret1 		= 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73bb      	strb	r3, [r7, #14]
	uint8_t ret2 		= 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	737b      	strb	r3, [r7, #13]

	uint8_t nVerifyOk 	= FAULT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

	ret1 = I2C_EEP_Write(Idx, nData);
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff1f 	bl	8000df4 <I2C_EEP_Write>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73bb      	strb	r3, [r7, #14]
	ret2 = I2C_EEP_Read (Idx);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fee6 	bl	8000d8c <I2C_EEP_Read>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	737b      	strb	r3, [r7, #13]

	if(ret1 == ret2) nVerifyOk = OK;
 8000fc4:	7bba      	ldrb	r2, [r7, #14]
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d101      	bne.n	8000fd0 <I2C_EEP_WRITE_U08+0x3c>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]

	return nVerifyOk;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <I2C_EEP_WRITE_U16>:

uint8_t I2C_EEP_WRITE_U16(uint32_t Idx, uint16_t nData)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]
	uint16_t ret1 		= 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	81bb      	strh	r3, [r7, #12]
	uint8_t nVerifyOk 	= FAULT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]


	I2C_EEP_Write(Idx  , ((nData >>  8)  & 0xFF)	);
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fefb 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+1, ((nData      )  & 0xFF) 	);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3301      	adds	r3, #1
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fef3 	bl	8000df4 <I2C_EEP_Write>

	ret1  = (uint16_t) (I2C_EEP_Read(Idx) << 8);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff febc 	bl	8000d8c <I2C_EEP_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	81bb      	strh	r3, [r7, #12]
	ret1 |= (uint16_t) (I2C_EEP_Read(Idx+1) 	 );
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3301      	adds	r3, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff feb4 	bl	8000d8c <I2C_EEP_Read>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	89bb      	ldrh	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	81bb      	strh	r3, [r7, #12]


	if(ret1 == nData) nVerifyOk = OK;
 800102e:	89ba      	ldrh	r2, [r7, #12]
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	429a      	cmp	r2, r3
 8001034:	d101      	bne.n	800103a <I2C_EEP_WRITE_U16+0x60>
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]

	return nVerifyOk;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <I2C_EEP_WRITE_U32>:

uint8_t I2C_EEP_WRITE_U32(uint32_t Idx, uint32_t nData)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	uint32_t ret1 		= 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
	uint8_t nVerifyOk 	= FAULT;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]

	I2C_EEP_Write(Idx,   ((nData >> 24)  & 0xFF) 	);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	0e1b      	lsrs	r3, r3, #24
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fec8 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+1, ((nData >> 16)  & 0xFF) 	);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	0c1b      	lsrs	r3, r3, #16
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f7ff febf 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+2, ((nData >>  8)  & 0xFF)	);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1c9a      	adds	r2, r3, #2
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4619      	mov	r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	f7ff feb6 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+3, ((nData      )  & 0xFF) 	);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3303      	adds	r3, #3
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff feae 	bl	8000df4 <I2C_EEP_Write>

	ret1  = (uint32_t) (I2C_EEP_Read (Idx  ) << 24);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff fe77 	bl	8000d8c <I2C_EEP_Read>
 800109e:	4603      	mov	r3, r0
 80010a0:	061b      	lsls	r3, r3, #24
 80010a2:	60bb      	str	r3, [r7, #8]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+1) << 16);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe6f 	bl	8000d8c <I2C_EEP_Read>
 80010ae:	4603      	mov	r3, r0
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+2) <<  8);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3302      	adds	r3, #2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fe65 	bl	8000d8c <I2C_EEP_Read>
 80010c2:	4603      	mov	r3, r0
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+3)      );
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3303      	adds	r3, #3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fe5b 	bl	8000d8c <I2C_EEP_Read>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]

	if(ret1 == nData) nVerifyOk = OK;
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d101      	bne.n	80010ec <I2C_EEP_WRITE_U32+0xa8>
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]

	return nVerifyOk;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <I2C_EEP_WRITE_FLOAT>:

uint8_t I2C_EEP_WRITE_FLOAT (uint32_t Idx, float fData)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	ed87 0a00 	vstr	s0, [r7]
	uint32_t nRelt = *((uint32_t*)&fData);
 8001102:	463b      	mov	r3, r7
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
	uint32_t ret1 		= 0;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]

	uint8_t nVerifyOk 	= FAULT;
 800110c:	2300      	movs	r3, #0
 800110e:	75fb      	strb	r3, [r7, #23]

	I2C_EEP_Write(Idx,   ((nRelt >> 24)  & 0xFF) 	);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	0e1b      	lsrs	r3, r3, #24
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fe6b 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+1, ((nRelt >> 16)  & 0xFF) 	);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	0c1b      	lsrs	r3, r3, #16
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f7ff fe62 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+2, ((nRelt >>  8)  & 0xFF)	);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	1c9a      	adds	r2, r3, #2
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	4610      	mov	r0, r2
 800113e:	f7ff fe59 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+3, ((nRelt      )  & 0xFF) 	);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3303      	adds	r3, #3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe51 	bl	8000df4 <I2C_EEP_Write>

	ret1  = (uint32_t) (I2C_EEP_Read (Idx  ) << 24);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fe1a 	bl	8000d8c <I2C_EEP_Read>
 8001158:	4603      	mov	r3, r0
 800115a:	061b      	lsls	r3, r3, #24
 800115c:	60fb      	str	r3, [r7, #12]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+1) << 16);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3301      	adds	r3, #1
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fe12 	bl	8000d8c <I2C_EEP_Read>
 8001168:	4603      	mov	r3, r0
 800116a:	041b      	lsls	r3, r3, #16
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+2) <<  8);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3302      	adds	r3, #2
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fe08 	bl	8000d8c <I2C_EEP_Read>
 800117c:	4603      	mov	r3, r0
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+3)      );
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3303      	adds	r3, #3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fdfe 	bl	8000d8c <I2C_EEP_Read>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]

	if(ret1 == nRelt) nVerifyOk = OK;
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d101      	bne.n	80011a6 <I2C_EEP_WRITE_FLOAT+0xb0>
 80011a2:	2301      	movs	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]

	return nVerifyOk;
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <EXT_Init>:
struct _tLDCTRL	tLdCtrl;
struct _tHVCTRL	tHvCtrl;
struct _tSiPMCTRL	tSiPmCtrl;

void EXT_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	memset(&tLdCtrl, 0, sizeof(struct _tLDCTRL));
 80011b4:	2210      	movs	r2, #16
 80011b6:	2100      	movs	r1, #0
 80011b8:	4816      	ldr	r0, [pc, #88]	@ (8001214 <EXT_Init+0x64>)
 80011ba:	f00b fab7 	bl	800c72c <memset>
	memset(&tPdCtrl, 0, sizeof(struct _tPDCTRL));
 80011be:	2210      	movs	r2, #16
 80011c0:	2100      	movs	r1, #0
 80011c2:	4815      	ldr	r0, [pc, #84]	@ (8001218 <EXT_Init+0x68>)
 80011c4:	f00b fab2 	bl	800c72c <memset>
	memset(&tHvCtrl, 0, sizeof(struct _tHVCTRL));
 80011c8:	2210      	movs	r2, #16
 80011ca:	2100      	movs	r1, #0
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <EXT_Init+0x6c>)
 80011ce:	f00b faad 	bl	800c72c <memset>
	memset(&tSiPmCtrl, 0, sizeof(struct _tSiPMCTRL));
 80011d2:	2210      	movs	r2, #16
 80011d4:	2100      	movs	r1, #0
 80011d6:	4812      	ldr	r0, [pc, #72]	@ (8001220 <EXT_Init+0x70>)
 80011d8:	f00b faa8 	bl	800c72c <memset>

	tPdCtrl.AvgAdcVal 		= DEFAULT_ADC_PD_NORMAL_VAL;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <EXT_Init+0x68>)
 80011de:	220a      	movs	r2, #10
 80011e0:	809a      	strh	r2, [r3, #4]
	tLdCtrl.AvgAdcVal 		= DEFAULT_ADC_LD_NORMAL_VAL;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <EXT_Init+0x64>)
 80011e4:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 80011e8:	809a      	strh	r2, [r3, #4]
	tHvCtrl.AvgAdcVal		= DEFAULT_ADC_HV_NORMAL_VAL;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <EXT_Init+0x6c>)
 80011ec:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80011f0:	809a      	strh	r2, [r3, #4]
	tSiPmCtrl.AvgAdcVal 	= DEFAULT_ADC_SiPM_NORMAL_VAL;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <EXT_Init+0x70>)
 80011f4:	220a      	movs	r2, #10
 80011f6:	809a      	strh	r2, [r3, #4]

	EXT_LD_Ctrl(EXT_LD_CTRL_OFF);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 f813 	bl	8001224 <EXT_LD_Ctrl>
	EXT_HV_Ctrl(EXT_HV_CTRL_OFF);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f834 	bl	800126c <EXT_HV_Ctrl>
	EXT_PD_Ctrl(EXT_PD_CTRL_OFF);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f855 	bl	80012b4 <EXT_PD_Ctrl>
	EXT_SiPM_Ctrl(EXT_SiPM_CTRL_OFF);
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f876 	bl	80012fc <EXT_SiPM_Ctrl>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000084 	.word	0x20000084
 8001218:	20000074 	.word	0x20000074
 800121c:	20000094 	.word	0x20000094
 8001220:	200000a4 	.word	0x200000a4

08001224 <EXT_LD_Ctrl>:

// GPIO Control-----------------------------------------------------------------------------------------------------------------------
void EXT_LD_Ctrl(uint8_t nCtrl)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	if(EXT_LD_CTRL_ON == nCtrl) 	{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_SET);    tLdCtrl.FlagCtrlOn = EXT_LD_CTRL_ON;  }
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d108      	bne.n	8001246 <EXT_LD_Ctrl+0x22>
 8001234:	2201      	movs	r2, #1
 8001236:	2101      	movs	r1, #1
 8001238:	480a      	ldr	r0, [pc, #40]	@ (8001264 <EXT_LD_Ctrl+0x40>)
 800123a:	f007 fb2f 	bl	800889c <HAL_GPIO_WritePin>
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <EXT_LD_Ctrl+0x44>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tLdCtrl.FlagCtrlOn = EXT_LD_CTRL_OFF; tLdCtrl.ErrorCount = 0;}
}
 8001244:	e00a      	b.n	800125c <EXT_LD_Ctrl+0x38>
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tLdCtrl.FlagCtrlOn = EXT_LD_CTRL_OFF; tLdCtrl.ErrorCount = 0;}
 8001246:	2200      	movs	r2, #0
 8001248:	2101      	movs	r1, #1
 800124a:	4806      	ldr	r0, [pc, #24]	@ (8001264 <EXT_LD_Ctrl+0x40>)
 800124c:	f007 fb26 	bl	800889c <HAL_GPIO_WritePin>
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <EXT_LD_Ctrl+0x44>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <EXT_LD_Ctrl+0x44>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	48000400 	.word	0x48000400
 8001268:	20000084 	.word	0x20000084

0800126c <EXT_HV_Ctrl>:

void EXT_HV_Ctrl(uint8_t nCtrl)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	if(EXT_HV_CTRL_ON == nCtrl) 	{ HAL_GPIO_WritePin(HV_CON_GPIO_Port, HV_CON_Pin, GPIO_PIN_SET);    tHvCtrl.FlagCtrlOn = EXT_HV_CTRL_ON;  }
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d108      	bne.n	800128e <EXT_HV_Ctrl+0x22>
 800127c:	2201      	movs	r2, #1
 800127e:	2102      	movs	r1, #2
 8001280:	480a      	ldr	r0, [pc, #40]	@ (80012ac <EXT_HV_Ctrl+0x40>)
 8001282:	f007 fb0b 	bl	800889c <HAL_GPIO_WritePin>
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <EXT_HV_Ctrl+0x44>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
	else							{ HAL_GPIO_WritePin(HV_CON_GPIO_Port, HV_CON_Pin, GPIO_PIN_RESET);  tHvCtrl.FlagCtrlOn = EXT_HV_CTRL_OFF; tHvCtrl.ErrorCount = 0;}
}
 800128c:	e00a      	b.n	80012a4 <EXT_HV_Ctrl+0x38>
	else							{ HAL_GPIO_WritePin(HV_CON_GPIO_Port, HV_CON_Pin, GPIO_PIN_RESET);  tHvCtrl.FlagCtrlOn = EXT_HV_CTRL_OFF; tHvCtrl.ErrorCount = 0;}
 800128e:	2200      	movs	r2, #0
 8001290:	2102      	movs	r1, #2
 8001292:	4806      	ldr	r0, [pc, #24]	@ (80012ac <EXT_HV_Ctrl+0x40>)
 8001294:	f007 fb02 	bl	800889c <HAL_GPIO_WritePin>
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <EXT_HV_Ctrl+0x44>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <EXT_HV_Ctrl+0x44>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	48000400 	.word	0x48000400
 80012b0:	20000094 	.word	0x20000094

080012b4 <EXT_PD_Ctrl>:

void EXT_PD_Ctrl(uint8_t nCtrl)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	if(EXT_PD_CTRL_ON == nCtrl) 	{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_SET);    tPdCtrl.FlagCtrlOn = EXT_PD_CTRL_ON;  }
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d108      	bne.n	80012d6 <EXT_PD_Ctrl+0x22>
 80012c4:	2201      	movs	r2, #1
 80012c6:	2101      	movs	r1, #1
 80012c8:	480a      	ldr	r0, [pc, #40]	@ (80012f4 <EXT_PD_Ctrl+0x40>)
 80012ca:	f007 fae7 	bl	800889c <HAL_GPIO_WritePin>
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <EXT_PD_Ctrl+0x44>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tPdCtrl.FlagCtrlOn = EXT_PD_CTRL_OFF; tPdCtrl.ErrorCount = 0;}
}
 80012d4:	e00a      	b.n	80012ec <EXT_PD_Ctrl+0x38>
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tPdCtrl.FlagCtrlOn = EXT_PD_CTRL_OFF; tPdCtrl.ErrorCount = 0;}
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <EXT_PD_Ctrl+0x40>)
 80012dc:	f007 fade 	bl	800889c <HAL_GPIO_WritePin>
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <EXT_PD_Ctrl+0x44>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <EXT_PD_Ctrl+0x44>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	48000400 	.word	0x48000400
 80012f8:	20000074 	.word	0x20000074

080012fc <EXT_SiPM_Ctrl>:

void EXT_SiPM_Ctrl(uint8_t nCtrl)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	if(EXT_SiPM_CTRL_ON == nCtrl) 	{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_SET);    tSiPmCtrl.FlagCtrlOn = EXT_SiPM_CTRL_ON;  }
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <EXT_SiPM_Ctrl+0x22>
 800130c:	2201      	movs	r2, #1
 800130e:	2101      	movs	r1, #1
 8001310:	480a      	ldr	r0, [pc, #40]	@ (800133c <EXT_SiPM_Ctrl+0x40>)
 8001312:	f007 fac3 	bl	800889c <HAL_GPIO_WritePin>
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <EXT_SiPM_Ctrl+0x44>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tSiPmCtrl.FlagCtrlOn = EXT_SiPM_CTRL_OFF; tSiPmCtrl.ErrorCount = 0;}
}
 800131c:	e00a      	b.n	8001334 <EXT_SiPM_Ctrl+0x38>
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tSiPmCtrl.FlagCtrlOn = EXT_SiPM_CTRL_OFF; tSiPmCtrl.ErrorCount = 0;}
 800131e:	2200      	movs	r2, #0
 8001320:	2101      	movs	r1, #1
 8001322:	4806      	ldr	r0, [pc, #24]	@ (800133c <EXT_SiPM_Ctrl+0x40>)
 8001324:	f007 faba 	bl	800889c <HAL_GPIO_WritePin>
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <EXT_SiPM_Ctrl+0x44>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <EXT_SiPM_Ctrl+0x44>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	48000400 	.word	0x48000400
 8001340:	200000a4 	.word	0x200000a4

08001344 <ADC_PD_Measuerment>:
	}
}
*/

void ADC_PD_Measuerment(uint8_t OnChk)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	if (ON == OnChk)
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d130      	bne.n	80013b6 <ADC_PD_Measuerment+0x72>
	{
		tPdCtrl.FlagCmdBusyOn = TRUE;
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001356:	2201      	movs	r2, #1
 8001358:	705a      	strb	r2, [r3, #1]

		if((DEFAULT_ADC_PD_LB_VAL < tPdCtrl.CurrAdcVal) && (DEFAULT_ADC_PD_UB_VAL > tPdCtrl.CurrAdcVal))
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 800135c:	88db      	ldrh	r3, [r3, #6]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d01c      	beq.n	800139c <ADC_PD_Measuerment+0x58>
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001364:	88db      	ldrh	r3, [r3, #6]
 8001366:	2b1d      	cmp	r3, #29
 8001368:	d818      	bhi.n	800139c <ADC_PD_Measuerment+0x58>
		{
			if (PD_MAX_COUNT > tPdCtrl.ChkCount++) {
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	491c      	ldr	r1, [pc, #112]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001372:	608a      	str	r2, [r1, #8]
 8001374:	4a1c      	ldr	r2, [pc, #112]	@ (80013e8 <ADC_PD_Measuerment+0xa4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d80c      	bhi.n	8001394 <ADC_PD_Measuerment+0x50>
				tPdCtrl.AvgAdcVal  = (tPdCtrl.CurrAdcVal + tPdCtrl.AvgAdcVal) / 2;
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 800137c:	88db      	ldrh	r3, [r3, #6]
 800137e:	461a      	mov	r2, r3
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001382:	889b      	ldrh	r3, [r3, #4]
 8001384:	4413      	add	r3, r2
 8001386:	0fda      	lsrs	r2, r3, #31
 8001388:	4413      	add	r3, r2
 800138a:	105b      	asrs	r3, r3, #1
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001390:	809a      	strh	r2, [r3, #4]
			if (PD_MAX_COUNT > tPdCtrl.ChkCount++) {
 8001392:	e020      	b.n	80013d6 <ADC_PD_Measuerment+0x92>
			}
			else
			{
				tPdCtrl.ChkCount = PD_MAX_COUNT;
 8001394:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001396:	4a15      	ldr	r2, [pc, #84]	@ (80013ec <ADC_PD_Measuerment+0xa8>)
 8001398:	609a      	str	r2, [r3, #8]
			if (PD_MAX_COUNT > tPdCtrl.ChkCount++) {
 800139a:	e01c      	b.n	80013d6 <ADC_PD_Measuerment+0x92>
			}
		}

		else
		{
			if (PD_MAX_COUNT < tPdCtrl.ErrorCount++) { tPdCtrl.ErrorCount = PD_MAX_COUNT; }
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	4910      	ldr	r1, [pc, #64]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013a4:	60ca      	str	r2, [r1, #12]
 80013a6:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d313      	bcc.n	80013d6 <ADC_PD_Measuerment+0x92>
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013b0:	4a0e      	ldr	r2, [pc, #56]	@ (80013ec <ADC_PD_Measuerment+0xa8>)
 80013b2:	60da      	str	r2, [r3, #12]
		tPdCtrl.FlagCmdBusyOn = FALSE;
		tPdCtrl.CurrAdcVal = 0;
		tPdCtrl.ChkCount = 0;
		tPdCtrl.AvgAdcVal = DEFAULT_ADC_PD_NORMAL_VAL;
	}
}
 80013b4:	e00f      	b.n	80013d6 <ADC_PD_Measuerment+0x92>
		tPdCtrl.FlagErrOn = OFF;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	70da      	strb	r2, [r3, #3]
		tPdCtrl.FlagCmdBusyOn = FALSE;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	705a      	strb	r2, [r3, #1]
		tPdCtrl.CurrAdcVal = 0;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	80da      	strh	r2, [r3, #6]
		tPdCtrl.ChkCount = 0;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
		tPdCtrl.AvgAdcVal = DEFAULT_ADC_PD_NORMAL_VAL;
 80013ce:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013d0:	220a      	movs	r2, #10
 80013d2:	809a      	strh	r2, [r3, #4]
}
 80013d4:	e7ff      	b.n	80013d6 <ADC_PD_Measuerment+0x92>
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000074 	.word	0x20000074
 80013e8:	00fffffd 	.word	0x00fffffd
 80013ec:	00fffffe 	.word	0x00fffffe

080013f0 <ADC_LD_Measuerment>:

void ADC_LD_Measuerment(uint8_t OnChk)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]

	if (ON == OnChk)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d132      	bne.n	8001466 <ADC_LD_Measuerment+0x76>
	{
		tLdCtrl.FlagCmdBusyOn = TRUE;
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001402:	2201      	movs	r2, #1
 8001404:	705a      	strb	r2, [r3, #1]

		if((DEFAULT_ADC_LD_LB_VAL < tLdCtrl.CurrAdcVal) && (DEFAULT_ADC_LD_UB_VAL > tLdCtrl.CurrAdcVal))
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001408:	88db      	ldrh	r3, [r3, #6]
 800140a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800140e:	d91d      	bls.n	800144c <ADC_LD_Measuerment+0x5c>
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001412:	88db      	ldrh	r3, [r3, #6]
 8001414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001418:	d218      	bcs.n	800144c <ADC_LD_Measuerment+0x5c>
		{
			if (LD_MAX_COUNT > tLdCtrl.ChkCount++) {
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <ADC_LD_Measuerment+0xac>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	491e      	ldr	r1, [pc, #120]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001422:	608a      	str	r2, [r1, #8]
 8001424:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <ADC_LD_Measuerment+0xb0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d80c      	bhi.n	8001444 <ADC_LD_Measuerment+0x54>
				tLdCtrl.AvgAdcVal  = (tLdCtrl.CurrAdcVal + tLdCtrl.AvgAdcVal) / 2;
 800142a:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <ADC_LD_Measuerment+0xac>)
 800142c:	88db      	ldrh	r3, [r3, #6]
 800142e:	461a      	mov	r2, r3
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001432:	889b      	ldrh	r3, [r3, #4]
 8001434:	4413      	add	r3, r2
 8001436:	0fda      	lsrs	r2, r3, #31
 8001438:	4413      	add	r3, r2
 800143a:	105b      	asrs	r3, r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001440:	809a      	strh	r2, [r3, #4]
			if (LD_MAX_COUNT > tLdCtrl.ChkCount++) {
 8001442:	e024      	b.n	800148e <ADC_LD_Measuerment+0x9e>
			}
			else
			{
				tLdCtrl.ChkCount = LD_MAX_COUNT;
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001446:	4a17      	ldr	r2, [pc, #92]	@ (80014a4 <ADC_LD_Measuerment+0xb4>)
 8001448:	609a      	str	r2, [r3, #8]
			if (LD_MAX_COUNT > tLdCtrl.ChkCount++) {
 800144a:	e020      	b.n	800148e <ADC_LD_Measuerment+0x9e>
			}
		}

		else
		{
			if (LD_MAX_COUNT < tLdCtrl.ErrorCount++) { tLdCtrl.ErrorCount = LD_MAX_COUNT; }
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <ADC_LD_Measuerment+0xac>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	4912      	ldr	r1, [pc, #72]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001454:	60ca      	str	r2, [r1, #12]
 8001456:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800145a:	4293      	cmp	r3, r2
 800145c:	d317      	bcc.n	800148e <ADC_LD_Measuerment+0x9e>
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001460:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <ADC_LD_Measuerment+0xb4>)
 8001462:	60da      	str	r2, [r3, #12]
		tLdCtrl.ChkCount = 0;
		tLdCtrl.ErrorCount = 0;

		tLdCtrl.AvgAdcVal = DEFAULT_ADC_LD_NORMAL_VAL;
	}
}
 8001464:	e013      	b.n	800148e <ADC_LD_Measuerment+0x9e>
		tLdCtrl.FlagErrOn = OFF;
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001468:	2200      	movs	r2, #0
 800146a:	70da      	strb	r2, [r3, #3]
		tLdCtrl.FlagCmdBusyOn = FALSE;
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <ADC_LD_Measuerment+0xac>)
 800146e:	2200      	movs	r2, #0
 8001470:	705a      	strb	r2, [r3, #1]
		tLdCtrl.CurrAdcVal = 0;
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001474:	2200      	movs	r2, #0
 8001476:	80da      	strh	r2, [r3, #6]
		tLdCtrl.ChkCount = 0;
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <ADC_LD_Measuerment+0xac>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
		tLdCtrl.ErrorCount = 0;
 800147e:	4b07      	ldr	r3, [pc, #28]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
		tLdCtrl.AvgAdcVal = DEFAULT_ADC_LD_NORMAL_VAL;
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001486:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800148a:	809a      	strh	r2, [r3, #4]
}
 800148c:	e7ff      	b.n	800148e <ADC_LD_Measuerment+0x9e>
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000084 	.word	0x20000084
 80014a0:	00fffffd 	.word	0x00fffffd
 80014a4:	00fffffe 	.word	0x00fffffe

080014a8 <ADC_HV_Measuerment>:

void ADC_HV_Measuerment(uint8_t OnChk)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]

	if (ON == OnChk)
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d132      	bne.n	800151e <ADC_HV_Measuerment+0x76>
	{
		tHvCtrl.FlagCmdBusyOn = TRUE;
 80014b8:	4b24      	ldr	r3, [pc, #144]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	705a      	strb	r2, [r3, #1]

		if((DEFAULT_ADC_HV_LB_VAL < tHvCtrl.CurrAdcVal) && (DEFAULT_ADC_HV_UB_VAL > tHvCtrl.CurrAdcVal))
 80014be:	4b23      	ldr	r3, [pc, #140]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014c0:	88db      	ldrh	r3, [r3, #6]
 80014c2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014c6:	d91d      	bls.n	8001504 <ADC_HV_Measuerment+0x5c>
 80014c8:	4b20      	ldr	r3, [pc, #128]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014ca:	88db      	ldrh	r3, [r3, #6]
 80014cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014d0:	d218      	bcs.n	8001504 <ADC_HV_Measuerment+0x5c>
		{
			if (HV_MAX_COUNT > tHvCtrl.ChkCount++) {
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	491c      	ldr	r1, [pc, #112]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014da:	608a      	str	r2, [r1, #8]
 80014dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <ADC_HV_Measuerment+0xa8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d80c      	bhi.n	80014fc <ADC_HV_Measuerment+0x54>
				tHvCtrl.AvgAdcVal = (tHvCtrl.CurrAdcVal + tHvCtrl.AvgAdcVal) / 2;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014e4:	88db      	ldrh	r3, [r3, #6]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	0fda      	lsrs	r2, r3, #31
 80014f0:	4413      	add	r3, r2
 80014f2:	105b      	asrs	r3, r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014f8:	809a      	strh	r2, [r3, #4]
			if (HV_MAX_COUNT > tHvCtrl.ChkCount++) {
 80014fa:	e021      	b.n	8001540 <ADC_HV_Measuerment+0x98>
			}
			else
			{
				tHvCtrl.ChkCount = HV_MAX_COUNT;
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014fe:	4a15      	ldr	r2, [pc, #84]	@ (8001554 <ADC_HV_Measuerment+0xac>)
 8001500:	609a      	str	r2, [r3, #8]
			if (HV_MAX_COUNT > tHvCtrl.ChkCount++) {
 8001502:	e01d      	b.n	8001540 <ADC_HV_Measuerment+0x98>
			}
		}

		else
		{
			if (HV_MAX_COUNT < tHvCtrl.ErrorCount++) { tHvCtrl.ErrorCount = HV_MAX_COUNT; }
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	4910      	ldr	r1, [pc, #64]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 800150c:	60ca      	str	r2, [r1, #12]
 800150e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001512:	4293      	cmp	r3, r2
 8001514:	d314      	bcc.n	8001540 <ADC_HV_Measuerment+0x98>
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001518:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <ADC_HV_Measuerment+0xac>)
 800151a:	60da      	str	r2, [r3, #12]
		tHvCtrl.FlagCmdBusyOn = FALSE;
		tHvCtrl.CurrAdcVal = 0;
		tHvCtrl.ChkCount = 0;
		tHvCtrl.AvgAdcVal = DEFAULT_ADC_HV_NORMAL_VAL;
	}
}
 800151c:	e010      	b.n	8001540 <ADC_HV_Measuerment+0x98>
		tHvCtrl.FlagErrOn = OFF;
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	70da      	strb	r2, [r3, #3]
		tHvCtrl.FlagCmdBusyOn = FALSE;
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	705a      	strb	r2, [r3, #1]
		tHvCtrl.CurrAdcVal = 0;
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	80da      	strh	r2, [r3, #6]
		tHvCtrl.ChkCount = 0;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
		tHvCtrl.AvgAdcVal = DEFAULT_ADC_HV_NORMAL_VAL;
 8001536:	4b05      	ldr	r3, [pc, #20]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001538:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800153c:	809a      	strh	r2, [r3, #4]
}
 800153e:	e7ff      	b.n	8001540 <ADC_HV_Measuerment+0x98>
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	20000094 	.word	0x20000094
 8001550:	00fffffd 	.word	0x00fffffd
 8001554:	00fffffe 	.word	0x00fffffe

08001558 <ADC_SiPM_Measuerment>:

void ADC_SiPM_Measuerment(uint8_t OnChk)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]

	if (ON == OnChk)
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d130      	bne.n	80015ca <ADC_SiPM_Measuerment+0x72>
	{
		tSiPmCtrl.FlagCmdBusyOn = TRUE;
 8001568:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 800156a:	2201      	movs	r2, #1
 800156c:	705a      	strb	r2, [r3, #1]

		if((DEFAULT_ADC_SiPM_LB_VAL < tSiPmCtrl.CurrAdcVal) && (DEFAULT_ADC_SiPM_UB_VAL > tSiPmCtrl.CurrAdcVal))
 800156e:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001570:	88db      	ldrh	r3, [r3, #6]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d01c      	beq.n	80015b0 <ADC_SiPM_Measuerment+0x58>
 8001576:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001578:	88db      	ldrh	r3, [r3, #6]
 800157a:	2b1d      	cmp	r3, #29
 800157c:	d818      	bhi.n	80015b0 <ADC_SiPM_Measuerment+0x58>
		{
			if (SiPM_MAX_COUNT > tSiPmCtrl.ChkCount++) { tSiPmCtrl.AvgAdcVal = (tSiPmCtrl.CurrAdcVal + tSiPmCtrl.AvgAdcVal) / 2; }
 800157e:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	491c      	ldr	r1, [pc, #112]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001586:	608a      	str	r2, [r1, #8]
 8001588:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <ADC_SiPM_Measuerment+0xa4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d80c      	bhi.n	80015a8 <ADC_SiPM_Measuerment+0x50>
 800158e:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001590:	88db      	ldrh	r3, [r3, #6]
 8001592:	461a      	mov	r2, r3
 8001594:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001596:	889b      	ldrh	r3, [r3, #4]
 8001598:	4413      	add	r3, r2
 800159a:	0fda      	lsrs	r2, r3, #31
 800159c:	4413      	add	r3, r2
 800159e:	105b      	asrs	r3, r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015a4:	809a      	strh	r2, [r3, #4]
 80015a6:	e020      	b.n	80015ea <ADC_SiPM_Measuerment+0x92>
			else
			{
				tSiPmCtrl.ChkCount = SiPM_MAX_COUNT;
 80015a8:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015aa:	4a15      	ldr	r2, [pc, #84]	@ (8001600 <ADC_SiPM_Measuerment+0xa8>)
 80015ac:	609a      	str	r2, [r3, #8]
			if (SiPM_MAX_COUNT > tSiPmCtrl.ChkCount++) { tSiPmCtrl.AvgAdcVal = (tSiPmCtrl.CurrAdcVal + tSiPmCtrl.AvgAdcVal) / 2; }
 80015ae:	e01c      	b.n	80015ea <ADC_SiPM_Measuerment+0x92>
			}
		}

		else
		{
			if (SiPM_MAX_COUNT < tSiPmCtrl.ErrorCount++) { tSiPmCtrl.ErrorCount = HV_MAX_COUNT; }
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	4910      	ldr	r1, [pc, #64]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015b8:	60ca      	str	r2, [r1, #12]
 80015ba:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80015be:	4293      	cmp	r3, r2
 80015c0:	d313      	bcc.n	80015ea <ADC_SiPM_Measuerment+0x92>
 80015c2:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001600 <ADC_SiPM_Measuerment+0xa8>)
 80015c6:	60da      	str	r2, [r3, #12]
		tSiPmCtrl.FlagCmdBusyOn = FALSE;
		tSiPmCtrl.CurrAdcVal = 0;
		tSiPmCtrl.ChkCount = 0;
		tSiPmCtrl.AvgAdcVal = DEFAULT_ADC_SiPM_NORMAL_VAL;
	}
}
 80015c8:	e00f      	b.n	80015ea <ADC_SiPM_Measuerment+0x92>
		tSiPmCtrl.FlagErrOn = OFF;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	70da      	strb	r2, [r3, #3]
		tSiPmCtrl.FlagCmdBusyOn = FALSE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	705a      	strb	r2, [r3, #1]
		tSiPmCtrl.CurrAdcVal = 0;
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	80da      	strh	r2, [r3, #6]
		tSiPmCtrl.ChkCount = 0;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
		tSiPmCtrl.AvgAdcVal = DEFAULT_ADC_SiPM_NORMAL_VAL;
 80015e2:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015e4:	220a      	movs	r2, #10
 80015e6:	809a      	strh	r2, [r3, #4]
}
 80015e8:	e7ff      	b.n	80015ea <ADC_SiPM_Measuerment+0x92>
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200000a4 	.word	0x200000a4
 80015fc:	00fffffd 	.word	0x00fffffd
 8001600:	00fffffe 	.word	0x00fffffe
 8001604:	00000000 	.word	0x00000000

08001608 <ADC_ChkCondition>:


uint8_t ADC_ChkCondition(uint16_t DefSpd, uint16_t nAdcVal)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	4613      	mov	r3, r2
 8001616:	80bb      	strh	r3, [r7, #4]
	uint8_t result = FALSE;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]

	if( (CONST_REF_GUIDE_VAL_LB(DefSpd) <= nAdcVal) && (CONST_REF_GUIDE_VAL_UB(DefSpd) >= nAdcVal) )
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff28 	bl	8000474 <__aeabi_i2d>
 8001624:	a31c      	add	r3, pc, #112	@ (adr r3, 8001698 <ADC_ChkCondition+0x90>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe ff8d 	bl	8000548 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff f999 	bl	800096c <__aeabi_d2f>
 800163a:	ee07 0a10 	vmov	s14, r0
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d81c      	bhi.n	800168c <ADC_ChkCondition+0x84>
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff0d 	bl	8000474 <__aeabi_i2d>
 800165a:	a311      	add	r3, pc, #68	@ (adr r3, 80016a0 <ADC_ChkCondition+0x98>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe ff72 	bl	8000548 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff f97e 	bl	800096c <__aeabi_d2f>
 8001670:	ee07 0a10 	vmov	s14, r0
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	db01      	blt.n	800168c <ADC_ChkCondition+0x84>
	{
		result  = TRUE;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	cccccccd 	.word	0xcccccccd
 800169c:	3feccccc 	.word	0x3feccccc
 80016a0:	9999999a 	.word	0x9999999a
 80016a4:	3ff19999 	.word	0x3ff19999

080016a8 <SetFanSpdCtrl>:
#include <Fan.h>

struct _tFAN	tFan;

static void SetFanSpdCtrl(uint8_t nSpd)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	if(FAN_SPD_HI == nSpd) 	{ HAL_GPIO_WritePin(FAN_SPEED_GPIO_Port, FAN_SPEED_Pin, GPIO_PIN_SET); 		tFan.SelSpd = FAN_SPD_HI; }
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d108      	bne.n	80016ca <SetFanSpdCtrl+0x22>
 80016b8:	2201      	movs	r2, #1
 80016ba:	2108      	movs	r1, #8
 80016bc:	4809      	ldr	r0, [pc, #36]	@ (80016e4 <SetFanSpdCtrl+0x3c>)
 80016be:	f007 f8ed 	bl	800889c <HAL_GPIO_WritePin>
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <SetFanSpdCtrl+0x40>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	715a      	strb	r2, [r3, #5]
	else					{ HAL_GPIO_WritePin(FAN_SPEED_GPIO_Port, FAN_SPEED_Pin, GPIO_PIN_RESET); 	tFan.SelSpd = FAN_SPD_LO; }
}
 80016c8:	e007      	b.n	80016da <SetFanSpdCtrl+0x32>
	else					{ HAL_GPIO_WritePin(FAN_SPEED_GPIO_Port, FAN_SPEED_Pin, GPIO_PIN_RESET); 	tFan.SelSpd = FAN_SPD_LO; }
 80016ca:	2200      	movs	r2, #0
 80016cc:	2108      	movs	r1, #8
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <SetFanSpdCtrl+0x3c>)
 80016d0:	f007 f8e4 	bl	800889c <HAL_GPIO_WritePin>
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <SetFanSpdCtrl+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	715a      	strb	r2, [r3, #5]
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	48000400 	.word	0x48000400
 80016e8:	200000b4 	.word	0x200000b4

080016ec <SetFanCtrl>:

static void SetFanCtrl(uint8_t nCtrl)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	if(FAN_CTRL_ON == nCtrl) 	{ HAL_GPIO_WritePin(FAN_CON_GPIO_Port, FAN_CON_Pin, GPIO_PIN_SET); 	  tFan.FlagCtrlOn = FAN_CTRL_ON;  }
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <SetFanCtrl+0x22>
 80016fc:	2201      	movs	r2, #1
 80016fe:	2110      	movs	r1, #16
 8001700:	4809      	ldr	r0, [pc, #36]	@ (8001728 <SetFanCtrl+0x3c>)
 8001702:	f007 f8cb 	bl	800889c <HAL_GPIO_WritePin>
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <SetFanCtrl+0x40>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
	else						{ HAL_GPIO_WritePin(FAN_CON_GPIO_Port, FAN_CON_Pin, GPIO_PIN_RESET);  tFan.FlagCtrlOn = FAN_CTRL_OFF; }
}
 800170c:	e007      	b.n	800171e <SetFanCtrl+0x32>
	else						{ HAL_GPIO_WritePin(FAN_CON_GPIO_Port, FAN_CON_Pin, GPIO_PIN_RESET);  tFan.FlagCtrlOn = FAN_CTRL_OFF; }
 800170e:	2200      	movs	r2, #0
 8001710:	2110      	movs	r1, #16
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <SetFanCtrl+0x3c>)
 8001714:	f007 f8c2 	bl	800889c <HAL_GPIO_WritePin>
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <SetFanCtrl+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	48000400 	.word	0x48000400
 800172c:	200000b4 	.word	0x200000b4

08001730 <FAN_Init>:



void FAN_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	memset(&tFan, 0, sizeof(struct _tFAN));
 8001734:	2218      	movs	r2, #24
 8001736:	2100      	movs	r1, #0
 8001738:	4803      	ldr	r0, [pc, #12]	@ (8001748 <FAN_Init+0x18>)
 800173a:	f00a fff7 	bl	800c72c <memset>
	SetFanCtrl(FAN_CTRL_OFF);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff ffd4 	bl	80016ec <SetFanCtrl>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200000b4 	.word	0x200000b4

0800174c <FAN_Ctrl>:


void FAN_Ctrl(unsigned char SelSpd, unsigned char nCtrlOn)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	460a      	mov	r2, r1
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	4613      	mov	r3, r2
 800175a:	71bb      	strb	r3, [r7, #6]
	SetFanSpdCtrl(SelSpd);
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ffa2 	bl	80016a8 <SetFanSpdCtrl>
	SetFanCtrl(nCtrlOn);
 8001764:	79bb      	ldrb	r3, [r7, #6]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffc0 	bl	80016ec <SetFanCtrl>

	if(FAN_CTRL_OFF == nCtrlOn) { tFan.RpmCurrCnt = 0; SetFanSpdCtrl(FAN_SPD_LO); }
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <FAN_Ctrl+0x32>
 8001772:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <FAN_Ctrl+0x3c>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff ff95 	bl	80016a8 <SetFanSpdCtrl>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200000b4 	.word	0x200000b4

0800178c <FAN_RpmMeasuerment>:

uint8_t FAN_RpmMeasuerment(uint8_t MeasureOn)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
	uint8_t result = FALSE;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]

	if(OFF == MeasureOn) { HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);  tFan.RpmCurrCnt = 0;  return;}
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <FAN_RpmMeasuerment+0x24>
 80017a0:	2017      	movs	r0, #23
 80017a2:	f006 fc6c 	bl	800807e <HAL_NVIC_DisableIRQ>
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <FAN_RpmMeasuerment+0x40>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	bf00      	nop
 80017ae:	e009      	b.n	80017c4 <FAN_RpmMeasuerment+0x38>
	else
	{
		 HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017b0:	2017      	movs	r0, #23
 80017b2:	f006 fc56 	bl	8008062 <HAL_NVIC_EnableIRQ>

		 if(ON == tFan.FlagMeasureComp)
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <FAN_RpmMeasuerment+0x40>)
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <FAN_RpmMeasuerment+0x36>
		 {
			 result = TRUE;
 80017be:	2301      	movs	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
		 }
	}
	 return result;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200000b4 	.word	0x200000b4

080017d0 <FAN_ChkCondition>:

uint8_t FAN_ChkCondition(uint16_t DefSpd,uint32_t nRpmCnt)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	ed2d 8b02 	vpush	{d8}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	80fb      	strh	r3, [r7, #6]
	uint8_t result = FALSE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

	if( (nRpmCnt >= CONST_REF_GUIDE_VAL_LB(DefSpd)) && (nRpmCnt <= CONST_REF_GUIDE_VAL_UB(DefSpd)) )
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe3f 	bl	8000474 <__aeabi_i2d>
 80017f6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001868 <FAN_ChkCondition+0x98>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7fe fea4 	bl	8000548 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f8b0 	bl	800096c <__aeabi_d2f>
 800180c:	ee07 0a90 	vmov	s15, r0
 8001810:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	db1c      	blt.n	8001854 <FAN_ChkCondition+0x84>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe24 	bl	8000474 <__aeabi_i2d>
 800182c:	a310      	add	r3, pc, #64	@ (adr r3, 8001870 <FAN_ChkCondition+0xa0>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fe89 	bl	8000548 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f895 	bl	800096c <__aeabi_d2f>
 8001842:	ee07 0a90 	vmov	s15, r0
 8001846:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	d801      	bhi.n	8001854 <FAN_ChkCondition+0x84>
	{
		result  = TRUE;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	ecbd 8b02 	vpop	{d8}
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	cccccccd 	.word	0xcccccccd
 800186c:	3feccccc 	.word	0x3feccccc
 8001870:	9999999a 	.word	0x9999999a
 8001874:	3ff19999 	.word	0x3ff19999

08001878 <Calc_Init>:
#include <G_Value.h>

#include <Measure.h>

void Calc_Init(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	71fb      	strb	r3, [r7, #7]
	for(i = PM_CH1; i < PM_CH_MAX; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	e038      	b.n	80018fa <Calc_Init+0x82>
	{
		tPmResult1[i].fMass_Concet = 0.0f;
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4a28      	ldr	r2, [pc, #160]	@ (800192c <Calc_Init+0xb4>)
 800188c:	015b      	lsls	r3, r3, #5
 800188e:	4413      	add	r3, r2
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
		tPmResult1[i].fTmpMassConcet = 0.0f;
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	4a24      	ldr	r2, [pc, #144]	@ (800192c <Calc_Init+0xb4>)
 800189a:	015b      	lsls	r3, r3, #5
 800189c:	4413      	add	r3, r2
 800189e:	3304      	adds	r3, #4
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
		tPmResult1[i].C = 0.0f;
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4a20      	ldr	r2, [pc, #128]	@ (800192c <Calc_Init+0xb4>)
 80018aa:	015b      	lsls	r3, r3, #5
 80018ac:	4413      	add	r3, r2
 80018ae:	3308      	adds	r3, #8
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
		tPmResult1[i].M = 0.0f;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <Calc_Init+0xb4>)
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	4413      	add	r3, r2
 80018be:	330c      	adds	r3, #12
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
		tPmResult1[i].fNum_Concet = 0.0f;
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4a18      	ldr	r2, [pc, #96]	@ (800192c <Calc_Init+0xb4>)
 80018ca:	015b      	lsls	r3, r3, #5
 80018cc:	4413      	add	r3, r2
 80018ce:	3310      	adds	r3, #16
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
		tPmResult1[i].nTmpNumConcet = 0;
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4a14      	ldr	r2, [pc, #80]	@ (800192c <Calc_Init+0xb4>)
 80018da:	015b      	lsls	r3, r3, #5
 80018dc:	4413      	add	r3, r2
 80018de:	3314      	adds	r3, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

		tPmResult1[i].fTps = 0.0f;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4a11      	ldr	r2, [pc, #68]	@ (800192c <Calc_Init+0xb4>)
 80018e8:	015b      	lsls	r3, r3, #5
 80018ea:	4413      	add	r3, r2
 80018ec:	3318      	adds	r3, #24
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
	for(i = PM_CH1; i < PM_CH_MAX; i++)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	3301      	adds	r3, #1
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d9c3      	bls.n	8001888 <Calc_Init+0x10>
	}

	tPmResult2.fCFU = 0.0f;
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <Calc_Init+0xb8>)
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
	tPmResult2.fNumConcetBio = 0.0f;
 8001908:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <Calc_Init+0xb8>)
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
	tPmResult2.fResultTps = 0.0f;
 8001910:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <Calc_Init+0xb8>)
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
	tPmResult2.fReverved = 0.0f;
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <Calc_Init+0xb8>)
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	200001bc 	.word	0x200001bc
 8001930:	2000027c 	.word	0x2000027c

08001934 <Calc_GetSelNumConnect>:

void Calc_GetSelNumConnect(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
	tPmResult1[PM_CH1].C = (float)( (tPmResult1[PM_CH1].nTmpNumConcet * tParam[PM_CH1].Cal));
 8001938:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001944:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <Calc_GetSelNumConnect+0xa0>)
 8001946:	edd3 7a08 	vldr	s15, [r3, #32]
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194e:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 8001950:	edc3 7a02 	vstr	s15, [r3, #8]
	tPmResult1[PM_CH2].C = (float)( (tPmResult1[PM_CH2].nTmpNumConcet * tParam[PM_CH2].Cal));
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 8001956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001960:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <Calc_GetSelNumConnect+0xa0>)
 8001962:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196a:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 800196c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	tPmResult1[PM_CH3].C = (float)( (tPmResult1[PM_CH3].nTmpNumConcet * tParam[PM_CH3].Cal));
 8001970:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 8001972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800197c:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <Calc_GetSelNumConnect+0xa0>)
 800197e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 8001988:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	tPmResult1[PM_CH4].C = (float)( (tPmResult1[PM_CH4].nTmpNumConcet * tParam[PM_CH4].Cal));
 800198c:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <Calc_GetSelNumConnect+0xa0>)
 800199a:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 80019a4:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
	tPmResult1[PM_CH5].C = (float)( (tPmResult1[PM_CH5].nTmpNumConcet * tParam[PM_CH5].Cal));
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <Calc_GetSelNumConnect+0xa0>)
 80019b8:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80019bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 80019c2:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	200001bc 	.word	0x200001bc
 80019d4:	200000cc 	.word	0x200000cc

080019d8 <Calc_GetNumberConcent>:

// Number Concentration Calc
void Calc_GetNumberConcent(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	tPmResult1[PM_CH1].fNum_Concet = tPmResult1[PM_CH1].C;
 80019dc:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a28      	ldr	r2, [pc, #160]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019e2:	6113      	str	r3, [r2, #16]
	tPmResult1[PM_CH2].fNum_Concet = tPmResult1[PM_CH1].C + tPmResult1[PM_CH2].C;
 80019e4:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80019ea:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019ec:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80019f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f4:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019f6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	tPmResult1[PM_CH3].fNum_Concet = tPmResult1[PM_CH1].C + tPmResult1[PM_CH2].C + tPmResult1[PM_CH3].C;
 80019fa:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a00:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a02:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a0c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a14:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a16:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	tPmResult1[PM_CH4].fNum_Concet = tPmResult1[PM_CH1].C + tPmResult1[PM_CH2].C + tPmResult1[PM_CH3].C + tPmResult1[PM_CH4].C;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a22:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a2a:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a2c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a36:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8001a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a40:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	tPmResult1[PM_CH5].fNum_Concet = tPmResult1[PM_CH1].C + tPmResult1[PM_CH2].C + tPmResult1[PM_CH3].C + tPmResult1[PM_CH4].C + tPmResult1[PM_CH5].C;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a46:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a4c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a56:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a60:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8001a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a6a:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8001a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a72:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a74:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200001bc 	.word	0x200001bc

08001a88 <Calc_GetSelMassConnect>:

void Calc_GetSelMassConnect(void) //PM Count * Calibration  * Density * (4/3*Pi*(Dpv/2)^3;
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	tPmResult1[PM_CH1].M = (float)( tPmResult1[PM_CH1].C * tParam[PM_CH1].den ) * (float)( (4.0/3.0) * M_PI*( powf(DEFAULT_PARAM_PDCH1_DPV_VAL / 2.0, 3) ) );
 8001a8c:	4b27      	ldr	r3, [pc, #156]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001a8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a92:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <Calc_GetSelMassConnect+0xa8>)
 8001a94:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001b34 <Calc_GetSelMassConnect+0xac>
 8001aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa4:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001aa6:	edc3 7a03 	vstr	s15, [r3, #12]
	tPmResult1[PM_CH2].M = (float)( tPmResult1[PM_CH2].C * tParam[PM_CH1].den ) * (float)( (4.0/3.0) * M_PI*( powf(DEFAULT_PARAM_PDCH2_DPV_VAL / 2.0, 3) ) );
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001aac:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <Calc_GetSelMassConnect+0xa8>)
 8001ab2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aba:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001b38 <Calc_GetSelMassConnect+0xb0>
 8001abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001ac4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	tPmResult1[PM_CH3].M = (float)( tPmResult1[PM_CH3].C * tParam[PM_CH1].den ) * (float)( (4.0/3.0) * M_PI*( powf(DEFAULT_PARAM_PDCH3_DPV_VAL / 2.0, 3) ) );
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001aca:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001ace:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <Calc_GetSelMassConnect+0xa8>)
 8001ad0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001b3c <Calc_GetSelMassConnect+0xb4>
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001ae2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	tPmResult1[PM_CH4].M = (float)( tPmResult1[PM_CH4].C * tParam[PM_CH1].den ) * (float)( (4.0/3.0) * M_PI*( powf(DEFAULT_PARAM_PDCH4_DPV_VAL / 2.0, 3) ) );
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001ae8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <Calc_GetSelMassConnect+0xa8>)
 8001aee:	edd3 7a07 	vldr	s15, [r3, #28]
 8001af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001b40 <Calc_GetSelMassConnect+0xb8>
 8001afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001b00:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	tPmResult1[PM_CH5].M = (float)( tPmResult1[PM_CH5].C * tParam[PM_CH1].den ) * (float)( (4.0/3.0) * M_PI*( powf(DEFAULT_PARAM_PDCH5_DPV_VAL / 2.0, 3) ) );
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001b06:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <Calc_GetSelMassConnect+0xa8>)
 8001b0c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b14:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001b44 <Calc_GetSelMassConnect+0xbc>
 8001b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001b1e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	200001bc 	.word	0x200001bc
 8001b30:	200000cc 	.word	0x200000cc
 8001b34:	3d11a8da 	.word	0x3d11a8da
 8001b38:	3e7b8383 	.word	0x3e7b8383
 8001b3c:	405484df 	.word	0x405484df
 8001b40:	41977e15 	.word	0x41977e15
 8001b44:	43549aed 	.word	0x43549aed

08001b48 <Calc_GetMassConcentration>:


// Mass Concentration
void Calc_GetMassConcentration(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	tPmResult1[PM0_5].fMass_Concet = (float)(tPmResult1[PM_CH1].M + tPmResult1[PM_CH2].M);
 8001b4c:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b4e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b52:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b54:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5c:	4b23      	ldr	r3, [pc, #140]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
	tPmResult1[PM1_0].fMass_Concet = (float)(tPmResult1[PM_CH1].M + tPmResult1[PM_CH2].M + tPmResult1[PM_CH3].M);
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b64:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b68:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b6a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b74:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b7e:	edc3 7a08 	vstr	s15, [r3, #32]
	tPmResult1[PM2_5].fMass_Concet = (float)(tPmResult1[PM_CH1].M + tPmResult1[PM_CH2].M + tPmResult1[PM_CH3].M + tPmResult1[PM_CH4].M);
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b84:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b88:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b8a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b92:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b94:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b9e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001ba8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	tPmResult1[PM4_0].fMass_Concet = (float)(tPmResult1[PM_CH1].M + tPmResult1[PM_CH2].M + tPmResult1[PM_CH3].M + tPmResult1[PM_CH4].M + tPmResult1[PM_CH5].M);
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bae:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bb4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bbe:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bc8:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bd2:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bdc:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200001bc 	.word	0x200001bc

08001bf0 <Calc_GetTypicalPaticleSize>:

// TPS
void Calc_GetTypicalPaticleSize(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
	tPmResult1[PM_CH1].fTps = (float)( tPmResult1[PM_CH1].C * DEFAULT_PARAM_PDCH1_DP_VAL );
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001bf6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bfa:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001c68 <Calc_GetTypicalPaticleSize+0x78>
 8001bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c04:	edc3 7a06 	vstr	s15, [r3, #24]
	tPmResult1[PM_CH2].fTps = (float)( tPmResult1[PM_CH2].C * DEFAULT_PARAM_PDCH2_DP_VAL );
 8001c08:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c0a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c0e:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c18:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	tPmResult1[PM_CH3].fTps = (float)( tPmResult1[PM_CH3].C * DEFAULT_PARAM_PDCH3_DP_VAL );
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c1e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001c22:	eeb7 7a0c 	vmov.f32	s14, #124	@ 0x3fe00000  1.750
 8001c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c2c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
	tPmResult1[PM_CH4].fTps = (float)( tPmResult1[PM_CH4].C * DEFAULT_PARAM_PDCH4_DP_VAL );
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c32:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8001c36:	eeb0 7a0a 	vmov.f32	s14, #10	@ 0x40500000  3.250
 8001c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c40:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
	tPmResult1[PM_CH5].fTps = (float)( tPmResult1[PM_CH5].C * DEFAULT_PARAM_PDCH5_DP_VAL );
 8001c44:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c46:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8001c4a:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c54:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200001bc 	.word	0x200001bc
 8001c68:	3ecccccd 	.word	0x3ecccccd

08001c6c <Default_FactorySet>:

struct _tPARAM 		tParam[PM_CH_MAX];


void Default_FactorySet(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af00      	add	r7, sp, #0
//-------- Param -------------//
	uint8_t  i = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t strDevType[8] 		= {0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00};
 8001c78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
	uint8_t strDevSerial[16] 	= {0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001c82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
	uint8_t strDevVer[5] 		= {0x01, 0x00, 0x00, 0x01, 0x00};
 8001c94:	4b66      	ldr	r3, [pc, #408]	@ (8001e30 <Default_FactorySet+0x1c4>)
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	723b      	strb	r3, [r7, #8]
	//Set Boundary

	SetCfg_CurrentFanUseTime(0);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 f8cb 	bl	8001e38 <SetCfg_CurrentFanUseTime>
	SetCfg_CurrentFanInterValTime(604800); // 1 Weak Sec
 8001ca2:	4864      	ldr	r0, [pc, #400]	@ (8001e34 <Default_FactorySet+0x1c8>)
 8001ca4:	f000 f8dc 	bl	8001e60 <SetCfg_CurrentFanInterValTime>

	for (i = 0; i <= 7; i++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001cae:	e05f      	b.n	8001d70 <Default_FactorySet+0x104>
	{
			 if (0x00 == i) SetParam_BoundaryVolt(i, 0x0010);
 8001cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d106      	bne.n	8001cc6 <Default_FactorySet+0x5a>
 8001cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cbc:	2110      	movs	r1, #16
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f9ec 	bl	800209c <SetParam_BoundaryVolt>
 8001cc4:	e04f      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x01 == i) SetParam_BoundaryVolt(i, 0x001C);
 8001cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d106      	bne.n	8001cdc <Default_FactorySet+0x70>
 8001cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cd2:	211c      	movs	r1, #28
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f9e1 	bl	800209c <SetParam_BoundaryVolt>
 8001cda:	e044      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x02 == i) SetParam_BoundaryVolt(i, 0x006F);
 8001cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d106      	bne.n	8001cf2 <Default_FactorySet+0x86>
 8001ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ce8:	216f      	movs	r1, #111	@ 0x6f
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f9d6 	bl	800209c <SetParam_BoundaryVolt>
 8001cf0:	e039      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x03 == i) SetParam_BoundaryVolt(i, 0x0108);
 8001cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <Default_FactorySet+0x9e>
 8001cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cfe:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f9ca 	bl	800209c <SetParam_BoundaryVolt>
 8001d08:	e02d      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x04 == i) SetParam_BoundaryVolt(i, 0x05FA);
 8001d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d107      	bne.n	8001d22 <Default_FactorySet+0xb6>
 8001d12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d16:	f240 51fa 	movw	r1, #1530	@ 0x5fa
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f9be 	bl	800209c <SetParam_BoundaryVolt>
 8001d20:	e021      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x05 == i) SetParam_BoundaryVolt(i, 0x0CE4);
 8001d22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d107      	bne.n	8001d3a <Default_FactorySet+0xce>
 8001d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d2e:	f640 41e4 	movw	r1, #3300	@ 0xce4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f9b2 	bl	800209c <SetParam_BoundaryVolt>
 8001d38:	e015      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x06 == i) SetParam_BoundaryVolt(i, 0x0064);
 8001d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d106      	bne.n	8001d50 <Default_FactorySet+0xe4>
 8001d42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d46:	2164      	movs	r1, #100	@ 0x64
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f9a7 	bl	800209c <SetParam_BoundaryVolt>
 8001d4e:	e00a      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x07 == i) SetParam_BoundaryVolt(i, 0x012C);
 8001d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d54:	2b07      	cmp	r3, #7
 8001d56:	d106      	bne.n	8001d66 <Default_FactorySet+0xfa>
 8001d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d5c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f99b 	bl	800209c <SetParam_BoundaryVolt>
	for (i = 0; i <= 7; i++)
 8001d66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d74:	2b07      	cmp	r3, #7
 8001d76:	d99b      	bls.n	8001cb0 <Default_FactorySet+0x44>
	}

	for (i = 0; i < 8; i++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d7e:	e009      	b.n	8001d94 <Default_FactorySet+0x128>
	{
		SetCfg_Device_ProcType(strDevType);
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f87f 	bl	8001e88 <SetCfg_Device_ProcType>
	for (i = 0; i < 8; i++)
 8001d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d9f1      	bls.n	8001d80 <Default_FactorySet+0x114>
	}

	for (i = 0; i < 16; i++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001da2:	e009      	b.n	8001db8 <Default_FactorySet+0x14c>
	{
		SetCfg_Device_ProcSerial(strDevSerial);
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f8aa 	bl	8001f02 <SetCfg_Device_ProcSerial>
	for (i = 0; i < 16; i++)
 8001dae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001db2:	3301      	adds	r3, #1
 8001db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d9f1      	bls.n	8001da4 <Default_FactorySet+0x138>
	}

	for (i = 0; i < 5; i++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001dc6:	e008      	b.n	8001dda <Default_FactorySet+0x16e>
	{
		SetCfg_Device_ProcVer(strDevVer);
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f8d6 	bl	8001f7c <SetCfg_Device_ProcVer>
	for (i = 0; i < 5; i++)
 8001dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001dda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d9f2      	bls.n	8001dc8 <Default_FactorySet+0x15c>
	}

	SetParam_AdjCal(0x00, 1.0f);
 8001de2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f9fe 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x01, 1.0f);
 8001dec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001df0:	2001      	movs	r0, #1
 8001df2:	f000 f9f9 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x02, 1.0f);
 8001df6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f000 f9f4 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x03, 1.0f);
 8001e00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 f9ef 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x04, 1.0f);
 8001e0a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001e0e:	2004      	movs	r0, #4
 8001e10:	f000 f9ea 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x05, 1.0f);
 8001e14:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001e18:	2005      	movs	r0, #5
 8001e1a:	f000 f9e5 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x06, 1.0f);
 8001e1e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001e22:	2006      	movs	r0, #6
 8001e24:	f000 f9e0 	bl	80021e8 <SetParam_AdjCal>
	//Device Info (Product Type)

	//Device Info (Serial Num)

	//Device Info
}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	@ 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	01000001 	.word	0x01000001
 8001e34:	00093a80 	.word	0x00093a80

08001e38 <SetCfg_CurrentFanUseTime>:

// CONFIG
//=============================================================================

void SetCfg_CurrentFanUseTime(uint32_t nVal)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	I2C_EEP_WRITE_U32(EEP_IDX_CFG_FAN_USE_TIME, nVal);
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	2023      	movs	r0, #35	@ 0x23
 8001e44:	f7ff f8fe 	bl	8001044 <I2C_EEP_WRITE_U32>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <GetCfg_CurrentFanUseTime>:

uint32_t GetCfg_CurrentFanUseTime(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	return I2C_EEP_READ_U32(EEP_IDX_CFG_FAN_USE_TIME);
 8001e54:	2023      	movs	r0, #35	@ 0x23
 8001e56:	f7ff f83a 	bl	8000ece <I2C_EEP_READ_U32>
 8001e5a:	4603      	mov	r3, r0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <SetCfg_CurrentFanInterValTime>:


void SetCfg_CurrentFanInterValTime(uint32_t nVal)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	I2C_EEP_WRITE_U32(EEP_IDX_CFG_FAN_CLEAN_SET_TIME, nVal);
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	2027      	movs	r0, #39	@ 0x27
 8001e6c:	f7ff f8ea 	bl	8001044 <I2C_EEP_WRITE_U32>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <GetCfg_CurrentFanInterValTime>:

uint32_t GetCfg_CurrentFanInterValTime(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	return I2C_EEP_READ_U32(EEP_IDX_CFG_FAN_CLEAN_SET_TIME);
 8001e7c:	2027      	movs	r0, #39	@ 0x27
 8001e7e:	f7ff f826 	bl	8000ece <I2C_EEP_READ_U32>
 8001e82:	4603      	mov	r3, r0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <SetCfg_Device_ProcType>:

void SetCfg_Device_ProcType(uint8_t* nVal)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<8; i++ )
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e00c      	b.n	8001eb4 <SetCfg_Device_ProcType+0x2c>
	{
		I2C_EEP_WRITE_U08(EEP_IDX_CFG_DEVICE_PROC_TYPE+i, nVal[i]);
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	3306      	adds	r3, #6
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7ff f873 	bl	8000f94 <I2C_EEP_WRITE_U08>
	for (i = 0; i<8; i++ )
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b07      	cmp	r3, #7
 8001eb8:	d9ef      	bls.n	8001e9a <SetCfg_Device_ProcType+0x12>
	}
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <GetCfg_Device_ProcType>:

void GetCfg_Device_ProcType(uint8_t* nVal)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<8; i++ )
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e00d      	b.n	8001ef2 <GetCfg_Device_ProcType+0x2e>
	{
		 nVal[i] = I2C_EEP_READ_U08(EEP_IDX_CFG_DEVICE_PROC_TYPE+i);
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	3306      	adds	r3, #6
 8001eda:	4619      	mov	r1, r3
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	18d4      	adds	r4, r2, r3
 8001ee2:	4608      	mov	r0, r1
 8001ee4:	f7fe ffc8 	bl	8000e78 <I2C_EEP_READ_U08>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	7023      	strb	r3, [r4, #0]
	for (i = 0; i<8; i++ )
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	d9ee      	bls.n	8001ed6 <GetCfg_Device_ProcType+0x12>
	}
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd90      	pop	{r4, r7, pc}

08001f02 <SetCfg_Device_ProcSerial>:

void SetCfg_Device_ProcSerial(uint8_t* nVal)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<16; i++ )
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e00c      	b.n	8001f2e <SetCfg_Device_ProcSerial+0x2c>
	{
		I2C_EEP_WRITE_U08(EEP_IDX_CFG_DEVICE_PROC_SERIAL+i, nVal[i]);
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	330e      	adds	r3, #14
 8001f18:	4618      	mov	r0, r3
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7ff f836 	bl	8000f94 <I2C_EEP_WRITE_U08>
	for (i = 0; i<16; i++ )
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d9ef      	bls.n	8001f14 <SetCfg_Device_ProcSerial+0x12>
	}
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <GetCfg_Device_ProcSerial>:

void GetCfg_Device_ProcSerial(uint8_t* nVal)
{
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<16; i++ )
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e00d      	b.n	8001f6c <GetCfg_Device_ProcSerial+0x2e>
	{
		 nVal[i] = I2C_EEP_READ_U08(EEP_IDX_CFG_DEVICE_PROC_SERIAL+i);
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	330e      	adds	r3, #14
 8001f54:	4619      	mov	r1, r3
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	18d4      	adds	r4, r2, r3
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	f7fe ff8b 	bl	8000e78 <I2C_EEP_READ_U08>
 8001f62:	4603      	mov	r3, r0
 8001f64:	7023      	strb	r3, [r4, #0]
	for (i = 0; i<16; i++ )
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	d9ee      	bls.n	8001f50 <GetCfg_Device_ProcSerial+0x12>
	}
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}

08001f7c <SetCfg_Device_ProcVer>:

void SetCfg_Device_ProcVer(uint8_t* nVal)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<5; i++ )
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	e00c      	b.n	8001fa8 <SetCfg_Device_ProcVer+0x2c>
	{
		I2C_EEP_WRITE_U08(EEP_IDX_CFG_FIRMWARE_VERSION+i, nVal[i]);
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	331e      	adds	r3, #30
 8001f92:	4618      	mov	r0, r3
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fff9 	bl	8000f94 <I2C_EEP_WRITE_U08>
	for (i = 0; i<5; i++ )
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d9ef      	bls.n	8001f8e <SetCfg_Device_ProcVer+0x12>
	}
}
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <GetCfg_Device_ProcVer>:

void GetCfg_Device_ProcVer(uint8_t* nVal)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<5; i++ )
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e00d      	b.n	8001fe6 <GetCfg_Device_ProcVer+0x2e>
	{
		 nVal[i] = I2C_EEP_READ_U08(EEP_IDX_CFG_FIRMWARE_VERSION+i);
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	331e      	adds	r3, #30
 8001fce:	4619      	mov	r1, r3
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	18d4      	adds	r4, r2, r3
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	f7fe ff4e 	bl	8000e78 <I2C_EEP_READ_U08>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	7023      	strb	r3, [r4, #0]
	for (i = 0; i<5; i++ )
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d9ee      	bls.n	8001fca <GetCfg_Device_ProcVer+0x12>
	}
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}

08001ff6 <SetCfg_DeviceUseCount>:


void SetCfg_DeviceUseCount(uint32_t nVal)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
	I2C_EEP_WRITE_U08(EEP_IDX_CFG_SET_EEP_CHK, 	 (uint8_t)((nVal >> 24)) );
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0e1b      	lsrs	r3, r3, #24
 8002002:	b2db      	uxtb	r3, r3
 8002004:	4619      	mov	r1, r3
 8002006:	2002      	movs	r0, #2
 8002008:	f7fe ffc4 	bl	8000f94 <I2C_EEP_WRITE_U08>
	I2C_EEP_WRITE_U08(EEP_IDX_CFG_SET_EEP_CHK+1, (uint8_t)((nVal >> 16)) );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	2003      	movs	r0, #3
 8002016:	f7fe ffbd 	bl	8000f94 <I2C_EEP_WRITE_U08>
	I2C_EEP_WRITE_U08(EEP_IDX_CFG_SET_EEP_CHK+2, (uint8_t)((nVal >>  8)) );
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4619      	mov	r1, r3
 8002022:	2004      	movs	r0, #4
 8002024:	f7fe ffb6 	bl	8000f94 <I2C_EEP_WRITE_U08>
	I2C_EEP_WRITE_U08(EEP_IDX_CFG_SET_EEP_CHK+3, (uint8_t)((nVal      )) );
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	2005      	movs	r0, #5
 8002030:	f7fe ffb0 	bl	8000f94 <I2C_EEP_WRITE_U08>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <GetCfg_DeviceUseCount>:

uint32_t GetCfg_DeviceUseCount(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
	uint32_t Result = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]

	Result   = (uint32_t)(I2C_EEP_READ_U08(EEP_IDX_CFG_SET_EEP_CHK  ) << 24);
 8002046:	2002      	movs	r0, #2
 8002048:	f7fe ff16 	bl	8000e78 <I2C_EEP_READ_U08>
 800204c:	4603      	mov	r3, r0
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	607b      	str	r3, [r7, #4]
	Result  |= (uint32_t)(I2C_EEP_READ_U08(EEP_IDX_CFG_SET_EEP_CHK+1) << 16);
 8002052:	2003      	movs	r0, #3
 8002054:	f7fe ff10 	bl	8000e78 <I2C_EEP_READ_U08>
 8002058:	4603      	mov	r3, r0
 800205a:	041b      	lsls	r3, r3, #16
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4313      	orrs	r3, r2
 8002060:	607b      	str	r3, [r7, #4]
	Result  |= (uint32_t)(I2C_EEP_READ_U08(EEP_IDX_CFG_SET_EEP_CHK+2) <<  8);
 8002062:	2004      	movs	r0, #4
 8002064:	f7fe ff08 	bl	8000e78 <I2C_EEP_READ_U08>
 8002068:	4603      	mov	r3, r0
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4313      	orrs	r3, r2
 8002070:	607b      	str	r3, [r7, #4]
	Result  |= (uint32_t)(I2C_EEP_READ_U08(EEP_IDX_CFG_SET_EEP_CHK+3)      );
 8002072:	2005      	movs	r0, #5
 8002074:	f7fe ff00 	bl	8000e78 <I2C_EEP_READ_U08>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4313      	orrs	r3, r2
 8002080:	607b      	str	r3, [r7, #4]

	return Result;
 8002082:	687b      	ldr	r3, [r7, #4]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <SetCfg_Flash_Firmware_Write>:
{
	return  I2C_EEP_READ_U08(EEP_IDX_CFG_FLAG_FLASH_WR);
}

void SetCfg_Flash_Firmware_Write(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	I2C_EEP_WRITE_U08(EEP_IDX_CFG_FLAG_FLASH_WR, OFF);
 8002090:	2100      	movs	r1, #0
 8002092:	2032      	movs	r0, #50	@ 0x32
 8002094:	f7fe ff7e 	bl	8000f94 <I2C_EEP_WRITE_U08>
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <SetParam_BoundaryVolt>:
//=============================================================================

// PARAM
void SetParam_BoundaryVolt(uint8_t nCh,  uint16_t nVal)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	460a      	mov	r2, r1
 80020a6:	71fb      	strb	r3, [r7, #7]
 80020a8:	4613      	mov	r3, r2
 80020aa:	80bb      	strh	r3, [r7, #4]
		 if(0x00 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_BASE_ADC, nVal);
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <SetParam_BoundaryVolt+0x22>
 80020b2:	88bb      	ldrh	r3, [r7, #4]
 80020b4:	4619      	mov	r1, r3
 80020b6:	2044      	movs	r0, #68	@ 0x44
 80020b8:	f7fe ff8f 	bl	8000fda <I2C_EEP_WRITE_U16>
	else if(0x03 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH3_ADC_UB, nVal);
	else if(0x04 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH4_ADC_UB, nVal);
	else if(0x05 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH5_ADC_UB, nVal);
	else if(0x06 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_SiPM_ADC_LB, nVal);
	else if(0x07 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_SiPM_ADC_UB, nVal);
}
 80020bc:	e03d      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x01 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH1_ADC_UB, nVal);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <SetParam_BoundaryVolt+0x34>
 80020c4:	88bb      	ldrh	r3, [r7, #4]
 80020c6:	4619      	mov	r1, r3
 80020c8:	2046      	movs	r0, #70	@ 0x46
 80020ca:	f7fe ff86 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 80020ce:	e034      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x02 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH2_ADC_UB, nVal);
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d105      	bne.n	80020e2 <SetParam_BoundaryVolt+0x46>
 80020d6:	88bb      	ldrh	r3, [r7, #4]
 80020d8:	4619      	mov	r1, r3
 80020da:	2048      	movs	r0, #72	@ 0x48
 80020dc:	f7fe ff7d 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 80020e0:	e02b      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x03 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH3_ADC_UB, nVal);
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d105      	bne.n	80020f4 <SetParam_BoundaryVolt+0x58>
 80020e8:	88bb      	ldrh	r3, [r7, #4]
 80020ea:	4619      	mov	r1, r3
 80020ec:	204a      	movs	r0, #74	@ 0x4a
 80020ee:	f7fe ff74 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 80020f2:	e022      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x04 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH4_ADC_UB, nVal);
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d105      	bne.n	8002106 <SetParam_BoundaryVolt+0x6a>
 80020fa:	88bb      	ldrh	r3, [r7, #4]
 80020fc:	4619      	mov	r1, r3
 80020fe:	204c      	movs	r0, #76	@ 0x4c
 8002100:	f7fe ff6b 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 8002104:	e019      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x05 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH5_ADC_UB, nVal);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d105      	bne.n	8002118 <SetParam_BoundaryVolt+0x7c>
 800210c:	88bb      	ldrh	r3, [r7, #4]
 800210e:	4619      	mov	r1, r3
 8002110:	204e      	movs	r0, #78	@ 0x4e
 8002112:	f7fe ff62 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 8002116:	e010      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x06 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_SiPM_ADC_LB, nVal);
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	2b06      	cmp	r3, #6
 800211c:	d105      	bne.n	800212a <SetParam_BoundaryVolt+0x8e>
 800211e:	88bb      	ldrh	r3, [r7, #4]
 8002120:	4619      	mov	r1, r3
 8002122:	2050      	movs	r0, #80	@ 0x50
 8002124:	f7fe ff59 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 8002128:	e007      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x07 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_SiPM_ADC_UB, nVal);
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b07      	cmp	r3, #7
 800212e:	d104      	bne.n	800213a <SetParam_BoundaryVolt+0x9e>
 8002130:	88bb      	ldrh	r3, [r7, #4]
 8002132:	4619      	mov	r1, r3
 8002134:	2052      	movs	r0, #82	@ 0x52
 8002136:	f7fe ff50 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <GetParam_BoundaryVolt>:

uint16_t GetParam_BoundaryVolt(uint8_t nCh)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
	uint16_t Result = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	81fb      	strh	r3, [r7, #14]

		 if(0x00 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_BASE_ADC);
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <GetParam_BoundaryVolt+0x20>
 8002156:	2044      	movs	r0, #68	@ 0x44
 8002158:	f7fe fe9e 	bl	8000e98 <I2C_EEP_READ_U16>
 800215c:	4603      	mov	r3, r0
 800215e:	81fb      	strh	r3, [r7, #14]
 8002160:	e03d      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x01 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_CH1_ADC_UB);
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <GetParam_BoundaryVolt+0x32>
 8002168:	2046      	movs	r0, #70	@ 0x46
 800216a:	f7fe fe95 	bl	8000e98 <I2C_EEP_READ_U16>
 800216e:	4603      	mov	r3, r0
 8002170:	81fb      	strh	r3, [r7, #14]
 8002172:	e034      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x02 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_CH2_ADC_UB);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d105      	bne.n	8002186 <GetParam_BoundaryVolt+0x44>
 800217a:	2048      	movs	r0, #72	@ 0x48
 800217c:	f7fe fe8c 	bl	8000e98 <I2C_EEP_READ_U16>
 8002180:	4603      	mov	r3, r0
 8002182:	81fb      	strh	r3, [r7, #14]
 8002184:	e02b      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x03 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_CH3_ADC_UB);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d105      	bne.n	8002198 <GetParam_BoundaryVolt+0x56>
 800218c:	204a      	movs	r0, #74	@ 0x4a
 800218e:	f7fe fe83 	bl	8000e98 <I2C_EEP_READ_U16>
 8002192:	4603      	mov	r3, r0
 8002194:	81fb      	strh	r3, [r7, #14]
 8002196:	e022      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x04 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_CH4_ADC_UB);
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d105      	bne.n	80021aa <GetParam_BoundaryVolt+0x68>
 800219e:	204c      	movs	r0, #76	@ 0x4c
 80021a0:	f7fe fe7a 	bl	8000e98 <I2C_EEP_READ_U16>
 80021a4:	4603      	mov	r3, r0
 80021a6:	81fb      	strh	r3, [r7, #14]
 80021a8:	e019      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x05 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_CH5_ADC_UB);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d105      	bne.n	80021bc <GetParam_BoundaryVolt+0x7a>
 80021b0:	204e      	movs	r0, #78	@ 0x4e
 80021b2:	f7fe fe71 	bl	8000e98 <I2C_EEP_READ_U16>
 80021b6:	4603      	mov	r3, r0
 80021b8:	81fb      	strh	r3, [r7, #14]
 80021ba:	e010      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x06 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_SiPM_ADC_LB);
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d105      	bne.n	80021ce <GetParam_BoundaryVolt+0x8c>
 80021c2:	2050      	movs	r0, #80	@ 0x50
 80021c4:	f7fe fe68 	bl	8000e98 <I2C_EEP_READ_U16>
 80021c8:	4603      	mov	r3, r0
 80021ca:	81fb      	strh	r3, [r7, #14]
 80021cc:	e007      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x07 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_SiPM_ADC_UB);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b07      	cmp	r3, #7
 80021d2:	d104      	bne.n	80021de <GetParam_BoundaryVolt+0x9c>
 80021d4:	2052      	movs	r0, #82	@ 0x52
 80021d6:	f7fe fe5f 	bl	8000e98 <I2C_EEP_READ_U16>
 80021da:	4603      	mov	r3, r0
 80021dc:	81fb      	strh	r3, [r7, #14]

	return Result;
 80021de:	89fb      	ldrh	r3, [r7, #14]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <SetParam_AdjCal>:


// PARAM
void SetParam_AdjCal(uint8_t nSel, float fVal)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	ed87 0a00 	vstr	s0, [r7]
 80021f4:	71fb      	strb	r3, [r7, #7]
		 if(0x00 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_DENSITY, fVal);
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <SetParam_AdjCal+0x20>
 80021fc:	ed97 0a00 	vldr	s0, [r7]
 8002200:	2084      	movs	r0, #132	@ 0x84
 8002202:	f7fe ff78 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
	else if(0x02 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH2_CAL, fVal);
	else if(0x03 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH3_CAL, fVal);
	else if(0x04 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH4_CAL, fVal);
	else if(0x05 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH5_CAL, fVal);
	else if(0x06 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_CFU_CAL, fVal);
}
 8002206:	e034      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x01 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH1_CAL, fVal);
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <SetParam_AdjCal+0x32>
 800220e:	ed97 0a00 	vldr	s0, [r7]
 8002212:	2088      	movs	r0, #136	@ 0x88
 8002214:	f7fe ff6f 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 8002218:	e02b      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x02 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH2_CAL, fVal);
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d105      	bne.n	800222c <SetParam_AdjCal+0x44>
 8002220:	ed97 0a00 	vldr	s0, [r7]
 8002224:	208c      	movs	r0, #140	@ 0x8c
 8002226:	f7fe ff66 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 800222a:	e022      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x03 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH3_CAL, fVal);
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d105      	bne.n	800223e <SetParam_AdjCal+0x56>
 8002232:	ed97 0a00 	vldr	s0, [r7]
 8002236:	2090      	movs	r0, #144	@ 0x90
 8002238:	f7fe ff5d 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 800223c:	e019      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x04 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH4_CAL, fVal);
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d105      	bne.n	8002250 <SetParam_AdjCal+0x68>
 8002244:	ed97 0a00 	vldr	s0, [r7]
 8002248:	2094      	movs	r0, #148	@ 0x94
 800224a:	f7fe ff54 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 800224e:	e010      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x05 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH5_CAL, fVal);
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d105      	bne.n	8002262 <SetParam_AdjCal+0x7a>
 8002256:	ed97 0a00 	vldr	s0, [r7]
 800225a:	2098      	movs	r0, #152	@ 0x98
 800225c:	f7fe ff4b 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 8002260:	e007      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x06 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_CFU_CAL, fVal);
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	2b06      	cmp	r3, #6
 8002266:	d104      	bne.n	8002272 <SetParam_AdjCal+0x8a>
 8002268:	ed97 0a00 	vldr	s0, [r7]
 800226c:	209c      	movs	r0, #156	@ 0x9c
 800226e:	f7fe ff42 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <GetParam_AdjCal>:

float GetParam_AdjCal(uint8_t nSel)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	71fb      	strb	r3, [r7, #7]
	float Result = 0.0f;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]

		 if(0x00 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_DENSITY);
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <GetParam_AdjCal+0x22>
 8002290:	2084      	movs	r0, #132	@ 0x84
 8002292:	f7fe fe4b 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 8002296:	ed87 0a03 	vstr	s0, [r7, #12]
 800229a:	e034      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x01 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_CH1_CAL);
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <GetParam_AdjCal+0x34>
 80022a2:	2088      	movs	r0, #136	@ 0x88
 80022a4:	f7fe fe42 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 80022a8:	ed87 0a03 	vstr	s0, [r7, #12]
 80022ac:	e02b      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x02 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_CH2_CAL);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d105      	bne.n	80022c0 <GetParam_AdjCal+0x46>
 80022b4:	208c      	movs	r0, #140	@ 0x8c
 80022b6:	f7fe fe39 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 80022ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80022be:	e022      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x03 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_CH3_CAL);
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d105      	bne.n	80022d2 <GetParam_AdjCal+0x58>
 80022c6:	2090      	movs	r0, #144	@ 0x90
 80022c8:	f7fe fe30 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 80022cc:	ed87 0a03 	vstr	s0, [r7, #12]
 80022d0:	e019      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x04 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_CH4_CAL);
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d105      	bne.n	80022e4 <GetParam_AdjCal+0x6a>
 80022d8:	2094      	movs	r0, #148	@ 0x94
 80022da:	f7fe fe27 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 80022de:	ed87 0a03 	vstr	s0, [r7, #12]
 80022e2:	e010      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x05 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_CH5_CAL);
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d105      	bne.n	80022f6 <GetParam_AdjCal+0x7c>
 80022ea:	2098      	movs	r0, #152	@ 0x98
 80022ec:	f7fe fe1e 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 80022f0:	ed87 0a03 	vstr	s0, [r7, #12]
 80022f4:	e007      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x06 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_CFU_CAL);
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	d104      	bne.n	8002306 <GetParam_AdjCal+0x8c>
 80022fc:	209c      	movs	r0, #156	@ 0x9c
 80022fe:	f7fe fe15 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 8002302:	ed87 0a03 	vstr	s0, [r7, #12]

	return Result;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	ee07 3a90 	vmov	s15, r3
}
 800230c:	eeb0 0a67 	vmov.f32	s0, s15
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <PARAM_Init>:
	return result;
}


void PARAM_Init(I2C_HandleTypeDef* hI2C)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
	I2C_EEP_Init(hI2C, 0xA0);
 8002324:	21a0      	movs	r1, #160	@ 0xa0
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fd06 	bl	8000d38 <I2C_EEP_Init>
	for(i = 0; i <PM_CH_MAX; i++)
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	e00e      	b.n	8002350 <PARAM_Init+0x38>
	{
		memset(&tParam[i], 0, sizeof(struct _tPARAM));
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <PARAM_Init+0x48>)
 800233e:	4413      	add	r3, r2
 8002340:	2228      	movs	r2, #40	@ 0x28
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f00a f9f1 	bl	800c72c <memset>
	for(i = 0; i <PM_CH_MAX; i++)
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	3301      	adds	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b05      	cmp	r3, #5
 8002354:	d9ed      	bls.n	8002332 <PARAM_Init+0x1a>

	}
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200000cc 	.word	0x200000cc

08002364 <PARAM_Process>:


void PARAM_Process(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
	uint8_t  i = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	71fb      	strb	r3, [r7, #7]

	if((DEFAULT_FACTORY_SET_ON	!= I2C_EEP_READ_U08(EEP_IDX_CFG_DEFAULT_FACTORY)))
 800236e:	2001      	movs	r0, #1
 8002370:	f7fe fd82 	bl	8000e78 <I2C_EEP_READ_U08>
 8002374:	4603      	mov	r3, r0
 8002376:	2b01      	cmp	r3, #1
 8002378:	d005      	beq.n	8002386 <PARAM_Process+0x22>
	{
		Default_FactorySet();
 800237a:	f7ff fc77 	bl	8001c6c <Default_FactorySet>
		I2C_EEP_WRITE_U08(EEP_IDX_CFG_DEFAULT_FACTORY, DEFAULT_FACTORY_SET_ON);
 800237e:	2101      	movs	r1, #1
 8002380:	2001      	movs	r0, #1
 8002382:	f7fe fe07 	bl	8000f94 <I2C_EEP_WRITE_U08>
	}

	tFan.CleWorkTime = GetCfg_CurrentFanUseTime();
 8002386:	f7ff fd63 	bl	8001e50 <GetCfg_CurrentFanUseTime>
 800238a:	4603      	mov	r3, r0
 800238c:	4a71      	ldr	r2, [pc, #452]	@ (8002554 <PARAM_Process+0x1f0>)
 800238e:	6093      	str	r3, [r2, #8]
	tFan.CleInterval = GetCfg_CurrentFanInterValTime();
 8002390:	f7ff fd72 	bl	8001e78 <GetCfg_CurrentFanInterValTime>
 8002394:	4603      	mov	r3, r0
 8002396:	4a6f      	ldr	r2, [pc, #444]	@ (8002554 <PARAM_Process+0x1f0>)
 8002398:	60d3      	str	r3, [r2, #12]

	if (0 == tFan.CleInterval) 	{ tFan.FlagCleanModeOn = OFF; 	}
 800239a:	4b6e      	ldr	r3, [pc, #440]	@ (8002554 <PARAM_Process+0x1f0>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <PARAM_Process+0x46>
 80023a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002554 <PARAM_Process+0x1f0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	719a      	strb	r2, [r3, #6]
 80023a8:	e002      	b.n	80023b0 <PARAM_Process+0x4c>
	else 						{ tFan.FlagCleanModeOn = ON;	}
 80023aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002554 <PARAM_Process+0x1f0>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	719a      	strb	r2, [r3, #6]

	for (i = 0; i <= 7; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	71fb      	strb	r3, [r7, #7]
 80023b4:	e080      	b.n	80024b8 <PARAM_Process+0x154>
	{
			 if (0x00 == i) { tParam[PM_CH1].BasePD = GetParam_BoundaryVolt(i); }
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d108      	bne.n	80023ce <PARAM_Process+0x6a>
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff febf 	bl	8002142 <GetParam_BoundaryVolt>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b63      	ldr	r3, [pc, #396]	@ (8002558 <PARAM_Process+0x1f4>)
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	e071      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x01 == i) { tParam[PM_CH1].LB = tParam[PM_CH1].BasePD ; 		tParam[PM_CH1].UB = GetParam_BoundaryVolt(i); }
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10c      	bne.n	80023ee <PARAM_Process+0x8a>
 80023d4:	4b60      	ldr	r3, [pc, #384]	@ (8002558 <PARAM_Process+0x1f4>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002558 <PARAM_Process+0x1f4>)
 80023da:	60d3      	str	r3, [r2, #12]
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff feaf 	bl	8002142 <GetParam_BoundaryVolt>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002558 <PARAM_Process+0x1f4>)
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	e061      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x02 == i) { tParam[PM_CH2].LB = tParam[PM_CH1].UB + 1; 		tParam[PM_CH2].UB = GetParam_BoundaryVolt(i); }
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d10d      	bne.n	8002410 <PARAM_Process+0xac>
 80023f4:	4b58      	ldr	r3, [pc, #352]	@ (8002558 <PARAM_Process+0x1f4>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	3301      	adds	r3, #1
 80023fa:	4a57      	ldr	r2, [pc, #348]	@ (8002558 <PARAM_Process+0x1f4>)
 80023fc:	6353      	str	r3, [r2, #52]	@ 0x34
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fe9e 	bl	8002142 <GetParam_BoundaryVolt>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	4b53      	ldr	r3, [pc, #332]	@ (8002558 <PARAM_Process+0x1f4>)
 800240c:	639a      	str	r2, [r3, #56]	@ 0x38
 800240e:	e050      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x03 == i) { tParam[PM_CH3].LB = tParam[PM_CH2].UB + 1;		tParam[PM_CH3].UB = GetParam_BoundaryVolt(i); }
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d10d      	bne.n	8002432 <PARAM_Process+0xce>
 8002416:	4b50      	ldr	r3, [pc, #320]	@ (8002558 <PARAM_Process+0x1f4>)
 8002418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241a:	3301      	adds	r3, #1
 800241c:	4a4e      	ldr	r2, [pc, #312]	@ (8002558 <PARAM_Process+0x1f4>)
 800241e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fe8d 	bl	8002142 <GetParam_BoundaryVolt>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b4a      	ldr	r3, [pc, #296]	@ (8002558 <PARAM_Process+0x1f4>)
 800242e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002430:	e03f      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x04 == i) { tParam[PM_CH4].LB = tParam[PM_CH3].UB + 1;		tParam[PM_CH4].UB = GetParam_BoundaryVolt(i); }
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d10f      	bne.n	8002458 <PARAM_Process+0xf4>
 8002438:	4b47      	ldr	r3, [pc, #284]	@ (8002558 <PARAM_Process+0x1f4>)
 800243a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243c:	3301      	adds	r3, #1
 800243e:	4a46      	ldr	r2, [pc, #280]	@ (8002558 <PARAM_Process+0x1f4>)
 8002440:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fe7b 	bl	8002142 <GetParam_BoundaryVolt>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	4b41      	ldr	r3, [pc, #260]	@ (8002558 <PARAM_Process+0x1f4>)
 8002452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002456:	e02c      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x05 == i) { tParam[PM_CH5].LB = tParam[PM_CH4].UB + 1; 		tParam[PM_CH5].UB = GetParam_BoundaryVolt(i); }
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d110      	bne.n	8002480 <PARAM_Process+0x11c>
 800245e:	4b3e      	ldr	r3, [pc, #248]	@ (8002558 <PARAM_Process+0x1f4>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002464:	3301      	adds	r3, #1
 8002466:	4a3c      	ldr	r2, [pc, #240]	@ (8002558 <PARAM_Process+0x1f4>)
 8002468:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fe67 	bl	8002142 <GetParam_BoundaryVolt>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <PARAM_Process+0x1f4>)
 800247a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800247e:	e018      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x06 == i)   tParam[PM_SiPM].LB = GetParam_BoundaryVolt(i);
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	2b06      	cmp	r3, #6
 8002484:	d109      	bne.n	800249a <PARAM_Process+0x136>
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fe5a 	bl	8002142 <GetParam_BoundaryVolt>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <PARAM_Process+0x1f4>)
 8002494:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002498:	e00b      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x07 == i)   tParam[PM_SiPM].UB = GetParam_BoundaryVolt(i);
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	2b07      	cmp	r3, #7
 800249e:	d108      	bne.n	80024b2 <PARAM_Process+0x14e>
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fe4d 	bl	8002142 <GetParam_BoundaryVolt>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <PARAM_Process+0x1f4>)
 80024ae:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	for (i = 0; i <= 7; i++)
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	3301      	adds	r3, #1
 80024b6:	71fb      	strb	r3, [r7, #7]
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2b07      	cmp	r3, #7
 80024bc:	f67f af7b 	bls.w	80023b6 <PARAM_Process+0x52>
	}

	//Set Boundary

	GetCfg_Device_ProcType(tConfig.prodtype);
 80024c0:	4826      	ldr	r0, [pc, #152]	@ (800255c <PARAM_Process+0x1f8>)
 80024c2:	f7ff fcff 	bl	8001ec4 <GetCfg_Device_ProcType>
	GetCfg_Device_ProcSerial(tConfig.prodSerial);
 80024c6:	4826      	ldr	r0, [pc, #152]	@ (8002560 <PARAM_Process+0x1fc>)
 80024c8:	f7ff fd39 	bl	8001f3e <GetCfg_Device_ProcSerial>
	GetCfg_Device_ProcVer(tConfig.FirmwareVer);
 80024cc:	4825      	ldr	r0, [pc, #148]	@ (8002564 <PARAM_Process+0x200>)
 80024ce:	f7ff fd73 	bl	8001fb8 <GetCfg_Device_ProcVer>

	//SetCfg_DeviceUseCount(1);
	tConfig.DeviceUseCount = GetCfg_DeviceUseCount();
 80024d2:	f7ff fdb3 	bl	800203c <GetCfg_DeviceUseCount>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4a20      	ldr	r2, [pc, #128]	@ (800255c <PARAM_Process+0x1f8>)
 80024da:	6253      	str	r3, [r2, #36]	@ 0x24

	tParam[PM_CH1].den = GetParam_AdjCal(0x00);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff fecc 	bl	800227a <GetParam_AdjCal>
 80024e2:	eef0 7a40 	vmov.f32	s15, s0
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <PARAM_Process+0x1f4>)
 80024e8:	edc3 7a07 	vstr	s15, [r3, #28]

	tParam[PM_CH1].Cal = GetParam_AdjCal(0x01);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7ff fec4 	bl	800227a <GetParam_AdjCal>
 80024f2:	eef0 7a40 	vmov.f32	s15, s0
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <PARAM_Process+0x1f4>)
 80024f8:	edc3 7a08 	vstr	s15, [r3, #32]
	tParam[PM_CH2].Cal = GetParam_AdjCal(0x02);
 80024fc:	2002      	movs	r0, #2
 80024fe:	f7ff febc 	bl	800227a <GetParam_AdjCal>
 8002502:	eef0 7a40 	vmov.f32	s15, s0
 8002506:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <PARAM_Process+0x1f4>)
 8002508:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	tParam[PM_CH3].Cal = GetParam_AdjCal(0x03);
 800250c:	2003      	movs	r0, #3
 800250e:	f7ff feb4 	bl	800227a <GetParam_AdjCal>
 8002512:	eef0 7a40 	vmov.f32	s15, s0
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <PARAM_Process+0x1f4>)
 8002518:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	tParam[PM_CH4].Cal = GetParam_AdjCal(0x04);
 800251c:	2004      	movs	r0, #4
 800251e:	f7ff feac 	bl	800227a <GetParam_AdjCal>
 8002522:	eef0 7a40 	vmov.f32	s15, s0
 8002526:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <PARAM_Process+0x1f4>)
 8002528:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
	tParam[PM_CH5].Cal = GetParam_AdjCal(0x05);
 800252c:	2005      	movs	r0, #5
 800252e:	f7ff fea4 	bl	800227a <GetParam_AdjCal>
 8002532:	eef0 7a40 	vmov.f32	s15, s0
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <PARAM_Process+0x1f4>)
 8002538:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

	tParam[PM_SiPM].CfuCal = GetParam_AdjCal(0x06);
 800253c:	2006      	movs	r0, #6
 800253e:	f7ff fe9c 	bl	800227a <GetParam_AdjCal>
 8002542:	eef0 7a40 	vmov.f32	s15, s0
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <PARAM_Process+0x1f4>)
 8002548:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec


}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200000b4 	.word	0x200000b4
 8002558:	200000cc 	.word	0x200000cc
 800255c:	20000030 	.word	0x20000030
 8002560:	20000038 	.word	0x20000038
 8002564:	20000048 	.word	0x20000048

08002568 <PROC_Init>:

void RngOfPdAdcSamplingVal(uint16_t nAdcVal);
void RngOfSiPmAdcSamplingVal(uint16_t nAdcVal);

void PROC_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	memset( &tPmResult1, 0, sizeof(struct _tPM_RESULT1) );
 800256c:	2220      	movs	r2, #32
 800256e:	2100      	movs	r1, #0
 8002570:	480a      	ldr	r0, [pc, #40]	@ (800259c <PROC_Init+0x34>)
 8002572:	f00a f8db 	bl	800c72c <memset>
	memset( &tPmResult2, 0, sizeof(struct _tPM_RESULT2) );
 8002576:	2210      	movs	r2, #16
 8002578:	2100      	movs	r1, #0
 800257a:	4809      	ldr	r0, [pc, #36]	@ (80025a0 <PROC_Init+0x38>)
 800257c:	f00a f8d6 	bl	800c72c <memset>
	memset( &tSysState,  0, sizeof(struct _tSYS_STAT) );
 8002580:	2220      	movs	r2, #32
 8002582:	2100      	movs	r1, #0
 8002584:	4807      	ldr	r0, [pc, #28]	@ (80025a4 <PROC_Init+0x3c>)
 8002586:	f00a f8d1 	bl	800c72c <memset>

	m_BITProcSeq = BIT_SEQ_IDLE;
 800258a:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <PROC_Init+0x40>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
	m_SysProcSeq = SYS_SEQ_IDLE;
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <PROC_Init+0x44>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200001bc 	.word	0x200001bc
 80025a0:	2000027c 	.word	0x2000027c
 80025a4:	2000028c 	.word	0x2000028c
 80025a8:	200002d4 	.word	0x200002d4
 80025ac:	200002d5 	.word	0x200002d5

080025b0 <WaitTime_Init>:

void WaitTime_Init(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
	tSysTime.Sys10mSecTick = 0;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <WaitTime_Init+0x34>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	739a      	strb	r2, [r3, #14]
	tSysTime.Sys10mSecTick = 0;
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <WaitTime_Init+0x34>)
 80025bc:	2200      	movs	r2, #0
 80025be:	739a      	strb	r2, [r3, #14]
	tSysTime.Sys1SecTick = 0;
 80025c0:	4b08      	ldr	r3, [pc, #32]	@ (80025e4 <WaitTime_Init+0x34>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	825a      	strh	r2, [r3, #18]

	tSysTime.WaitSecTime = 0;
 80025c6:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <WaitTime_Init+0x34>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
	tSysTime.WaitmSecTime = 0;
 80025cc:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <WaitTime_Init+0x34>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	621a      	str	r2, [r3, #32]

	uwTick = 0;
 80025d2:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <WaitTime_Init+0x38>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	200002ac 	.word	0x200002ac
 80025e8:	20000900 	.word	0x20000900

080025ec <WaitHoldTime_Sec>:

uint8_t WaitHoldTime_Sec(uint8_t ChkOn, uint32_t ChkTime)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
	uint8_t result = FALSE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]

	if (OFF == ChkOn) { WaitTime_Init(); tSysTime.FlagWaitSecTimeOn = OFF; return result; }
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <WaitHoldTime_Sec+0x24>
 8002602:	f7ff ffd5 	bl	80025b0 <WaitTime_Init>
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <WaitHoldTime_Sec+0x50>)
 8002608:	2200      	movs	r2, #0
 800260a:	751a      	strb	r2, [r3, #20]
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	e010      	b.n	8002632 <WaitHoldTime_Sec+0x46>
	else
	{
		tSysTime.FlagWaitSecTimeOn = ON;
 8002610:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <WaitHoldTime_Sec+0x50>)
 8002612:	2201      	movs	r2, #1
 8002614:	751a      	strb	r2, [r3, #20]
	}

	if (tSysTime.WaitSecTime >= ChkTime) {
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <WaitHoldTime_Sec+0x50>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d807      	bhi.n	8002630 <WaitHoldTime_Sec+0x44>
		result = TRUE;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
		tSysTime.WaitSecTime = 0;
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <WaitHoldTime_Sec+0x50>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
		tSysTime.FlagWaitSecTimeOn = OFF;
 800262a:	4b04      	ldr	r3, [pc, #16]	@ (800263c <WaitHoldTime_Sec+0x50>)
 800262c:	2200      	movs	r2, #0
 800262e:	751a      	strb	r2, [r3, #20]
	}

	return result;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200002ac 	.word	0x200002ac

08002640 <WaitHoldTime_mSec>:

uint8_t WaitHoldTime_mSec(uint8_t ChkOn, uint32_t ChkTime)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
	uint8_t result = FALSE;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]

	if (OFF == ChkOn) { WaitTime_Init(); tSysTime.FlagWaitmSecTimeOn = OFF; return result; }
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <WaitHoldTime_mSec+0x24>
 8002656:	f7ff ffab 	bl	80025b0 <WaitTime_Init>
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <WaitHoldTime_mSec+0x50>)
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	e010      	b.n	8002686 <WaitHoldTime_mSec+0x46>
	else
	{
		tSysTime.FlagWaitmSecTimeOn = ON;
 8002664:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <WaitHoldTime_mSec+0x50>)
 8002666:	2201      	movs	r2, #1
 8002668:	771a      	strb	r2, [r3, #28]
	}

	if (tSysTime.WaitmSecTime >= ChkTime)
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <WaitHoldTime_mSec+0x50>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d807      	bhi.n	8002684 <WaitHoldTime_mSec+0x44>
	{
		result = TRUE;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
		tSysTime.WaitmSecTime = 0;
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <WaitHoldTime_mSec+0x50>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
		tSysTime.FlagWaitmSecTimeOn = OFF;
 800267e:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <WaitHoldTime_mSec+0x50>)
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
	}

	return result;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200002ac 	.word	0x200002ac

08002694 <DeviceSetState>:

uint16_t DeviceSetState(uint16_t Addr, uint8_t Flag)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	460a      	mov	r2, r1
 800269e:	80fb      	strh	r3, [r7, #6]
 80026a0:	4613      	mov	r3, r2
 80026a2:	717b      	strb	r3, [r7, #5]
	uint16_t result = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	81fb      	strh	r3, [r7, #14]

	if(ON == Flag) 	{ result |= (1 << Addr);  }
 80026a8:	797b      	ldrb	r3, [r7, #5]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10a      	bne.n	80026c4 <DeviceSetState+0x30>
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2201      	movs	r2, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	b21a      	sxth	r2, r3
 80026b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026bc:	4313      	orrs	r3, r2
 80026be:	b21b      	sxth	r3, r3
 80026c0:	81fb      	strh	r3, [r7, #14]
 80026c2:	e00b      	b.n	80026dc <DeviceSetState+0x48>
	else 			{ result &= ~(1 << Addr); }
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	2201      	movs	r2, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d6:	4013      	ands	r3, r2
 80026d8:	b21b      	sxth	r3, r3
 80026da:	81fb      	strh	r3, [r7, #14]

	return result;
 80026dc:	89fb      	ldrh	r3, [r7, #14]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <MCU_AlarmTempMonitor>:


uint8_t MCU_AlarmTempMonitor(uint16_t nTemp)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
	uint8_t result = OFF;
 80026f6:	2300      	movs	r3, #0
 80026f8:	74fb      	strb	r3, [r7, #19]
	float cpu_temp = 0.0f;
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]


	if( 0 != nTemp)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d027      	beq.n	8002756 <MCU_AlarmTempMonitor+0x6a>
    {
		float temperature = ((float)nTemp / 4095) * 3300; // ADC 값을 전압으로 변환
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002710:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002794 <MCU_AlarmTempMonitor+0xa8>
 8002714:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002718:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002798 <MCU_AlarmTempMonitor+0xac>
 800271c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002720:	edc7 7a03 	vstr	s15, [r7, #12]
		cpu_temp = ((temperature - 760.0) / 2.5); // 온도로 변환
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7fd feb7 	bl	8000498 <__aeabi_f2d>
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <MCU_AlarmTempMonitor+0xb0>)
 8002730:	f7fd fd52 	bl	80001d8 <__aeabi_dsub>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <MCU_AlarmTempMonitor+0xb4>)
 8002742:	f7fe f82b 	bl	800079c <__aeabi_ddiv>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f7fe f90d 	bl	800096c <__aeabi_d2f>
 8002752:	4603      	mov	r3, r0
 8002754:	617b      	str	r3, [r7, #20]
		//cpu_temp = 65;
    }


    if (DEFAULT_TEMP_OVER_VAL < cpu_temp)
 8002756:	edd7 7a05 	vldr	s15, [r7, #20]
 800275a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80027a4 <MCU_AlarmTempMonitor+0xb8>
 800275e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	dd08      	ble.n	800277a <MCU_AlarmTempMonitor+0x8e>
    {
    	tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_TEMP_OVR_ON, ON);
 8002768:	2101      	movs	r1, #1
 800276a:	2009      	movs	r0, #9
 800276c:	f7ff ff92 	bl	8002694 <DeviceSetState>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <MCU_AlarmTempMonitor+0xbc>)
 8002776:	839a      	strh	r2, [r3, #28]
 8002778:	e007      	b.n	800278a <MCU_AlarmTempMonitor+0x9e>
    }

    else
    {
    	tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_TEMP_OVR_ON, OFF);
 800277a:	2100      	movs	r1, #0
 800277c:	2009      	movs	r0, #9
 800277e:	f7ff ff89 	bl	8002694 <DeviceSetState>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <MCU_AlarmTempMonitor+0xbc>)
 8002788:	839a      	strh	r2, [r3, #28]
    }

    return result;
 800278a:	7cfb      	ldrb	r3, [r7, #19]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	457ff000 	.word	0x457ff000
 8002798:	454e4000 	.word	0x454e4000
 800279c:	4087c000 	.word	0x4087c000
 80027a0:	40040000 	.word	0x40040000
 80027a4:	42700000 	.word	0x42700000
 80027a8:	2000028c 	.word	0x2000028c

080027ac <ReadMeasuredVal>:
    // Use memcpy to copy the float's memory representation to the byte array
    memcpy(byteArray, &value, sizeof(float));
}
*/
void ReadMeasuredVal(void)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73bb      	strb	r3, [r7, #14]

	float fTmpTps = 0.0f;
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
	float fTmpCon = 0.0f;
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]

	uint8_t nTmpConv8[4] = {0,};
 80027c6:	2300      	movs	r3, #0
 80027c8:	603b      	str	r3, [r7, #0]


	if (OFF == tSysState.FlagLoopOn) { WaitTime_Init(); tSysState.FlagLoopOn = ON; }
 80027ca:	4b7f      	ldr	r3, [pc, #508]	@ (80029c8 <ReadMeasuredVal+0x21c>)
 80027cc:	7a1b      	ldrb	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d104      	bne.n	80027dc <ReadMeasuredVal+0x30>
 80027d2:	f7ff feed 	bl	80025b0 <WaitTime_Init>
 80027d6:	4b7c      	ldr	r3, [pc, #496]	@ (80029c8 <ReadMeasuredVal+0x21c>)
 80027d8:	2201      	movs	r2, #1
 80027da:	721a      	strb	r2, [r3, #8]

	if ( TRUE == WaitHoldTime_mSec(ON, UART_MSG_RESP_TIME) )
 80027dc:	2164      	movs	r1, #100	@ 0x64
 80027de:	2001      	movs	r0, #1
 80027e0:	f7ff ff2e 	bl	8002640 <WaitHoldTime_mSec>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	f040 828e 	bne.w	8002d08 <ReadMeasuredVal+0x55c>
	{

		Calc_GetSelNumConnect();
 80027ec:	f7ff f8a2 	bl	8001934 <Calc_GetSelNumConnect>
		Calc_GetNumberConcent();
 80027f0:	f7ff f8f2 	bl	80019d8 <Calc_GetNumberConcent>
		Calc_GetSelMassConnect();
 80027f4:	f7ff f948 	bl	8001a88 <Calc_GetSelMassConnect>
		Calc_GetMassConcentration();
 80027f8:	f7ff f9a6 	bl	8001b48 <Calc_GetMassConcentration>
		Calc_GetTypicalPaticleSize();
 80027fc:	f7ff f9f8 	bl	8001bf0 <Calc_GetTypicalPaticleSize>

		for (i = PM_CH1; i <= PM_CH5; i++)
 8002800:	2300      	movs	r3, #0
 8002802:	73bb      	strb	r3, [r7, #14]
 8002804:	e01c      	b.n	8002840 <ReadMeasuredVal+0x94>
		{
			fTmpTps += tPmResult1[i].fTps;
 8002806:	7bbb      	ldrb	r3, [r7, #14]
 8002808:	4a70      	ldr	r2, [pc, #448]	@ (80029cc <ReadMeasuredVal+0x220>)
 800280a:	015b      	lsls	r3, r3, #5
 800280c:	4413      	add	r3, r2
 800280e:	3318      	adds	r3, #24
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ed97 7a02 	vldr	s14, [r7, #8]
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	edc7 7a02 	vstr	s15, [r7, #8]
			fTmpCon += tPmResult1[i].fNum_Concet;
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	4a6a      	ldr	r2, [pc, #424]	@ (80029cc <ReadMeasuredVal+0x220>)
 8002824:	015b      	lsls	r3, r3, #5
 8002826:	4413      	add	r3, r2
 8002828:	3310      	adds	r3, #16
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002836:	edc7 7a01 	vstr	s15, [r7, #4]
		for (i = PM_CH1; i <= PM_CH5; i++)
 800283a:	7bbb      	ldrb	r3, [r7, #14]
 800283c:	3301      	adds	r3, #1
 800283e:	73bb      	strb	r3, [r7, #14]
 8002840:	7bbb      	ldrb	r3, [r7, #14]
 8002842:	2b04      	cmp	r3, #4
 8002844:	d9df      	bls.n	8002806 <ReadMeasuredVal+0x5a>
		}

		tPmResult2.fResultTps = (float)(fTmpTps / fTmpCon);
 8002846:	edd7 6a02 	vldr	s13, [r7, #8]
 800284a:	ed97 7a01 	vldr	s14, [r7, #4]
 800284e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002852:	4b5f      	ldr	r3, [pc, #380]	@ (80029d0 <ReadMeasuredVal+0x224>)
 8002854:	edc3 7a02 	vstr	s15, [r3, #8]

		tPmResult2.fCFU = (float)(tPmResult1[PM_SiPM].nTmpNumConcet * tParam[PM_SiPM].CfuCal);
 8002858:	4b5c      	ldr	r3, [pc, #368]	@ (80029cc <ReadMeasuredVal+0x220>)
 800285a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002866:	4b5b      	ldr	r3, [pc, #364]	@ (80029d4 <ReadMeasuredVal+0x228>)
 8002868:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	4b57      	ldr	r3, [pc, #348]	@ (80029d0 <ReadMeasuredVal+0x224>)
 8002872:	edc3 7a00 	vstr	s15, [r3]
		tPmResult2.fNumConcetBio = (float)(tPmResult1[PM_SiPM].nTmpNumConcet);
 8002876:	4b55      	ldr	r3, [pc, #340]	@ (80029cc <ReadMeasuredVal+0x220>)
 8002878:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002884:	4b52      	ldr	r3, [pc, #328]	@ (80029d0 <ReadMeasuredVal+0x224>)
 8002886:	edc3 7a01 	vstr	s15, [r3, #4]
		//---------------------------------------------------------------------------------------------------------------------------------------
		if(ON == tSysState.FlagSendPmResultOn)
 800288a:	4b4f      	ldr	r3, [pc, #316]	@ (80029c8 <ReadMeasuredVal+0x21c>)
 800288c:	7a9b      	ldrb	r3, [r3, #10]
 800288e:	2b01      	cmp	r3, #1
 8002890:	f040 822f 	bne.w	8002cf2 <ReadMeasuredVal+0x546>
		{
			// HEADER
			tMsgPkt.TxMsgCnt = 0;
 8002894:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102

			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;
 800289c:	4b4e      	ldr	r3, [pc, #312]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800289e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	b2d1      	uxtb	r1, r2
 80028a6:	4a4c      	ldr	r2, [pc, #304]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028a8:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b4a      	ldr	r3, [pc, #296]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028b0:	4413      	add	r3, r2
 80028b2:	22c0      	movs	r2, #192	@ 0xc0
 80028b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // ADDR
 80028b8:	4b47      	ldr	r3, [pc, #284]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028ba:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	b2d1      	uxtb	r1, r2
 80028c2:	4a45      	ldr	r2, [pc, #276]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028c4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028cc:	4413      	add	r3, r2
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = CMD_MEASUER_READ_VAL;
 80028d4:	4b40      	ldr	r3, [pc, #256]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028d6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	b2d1      	uxtb	r1, r2
 80028de:	4a3e      	ldr	r2, [pc, #248]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028e0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b3c      	ldr	r3, [pc, #240]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028e8:	4413      	add	r3, r2
 80028ea:	2203      	movs	r2, #3
 80028ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // MSG STATE
 80028f0:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028f2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	b2d1      	uxtb	r1, r2
 80028fa:	4a37      	ldr	r2, [pc, #220]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028fc:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002900:	461a      	mov	r2, r3
 8002902:	4b35      	ldr	r3, [pc, #212]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002904:	4413      	add	r3, r2
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x34; // 52
 800290c:	4b32      	ldr	r3, [pc, #200]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800290e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	b2d1      	uxtb	r1, r2
 8002916:	4a30      	ldr	r2, [pc, #192]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002918:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800291c:	461a      	mov	r2, r3
 800291e:	4b2e      	ldr	r3, [pc, #184]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002920:	4413      	add	r3, r2
 8002922:	2234      	movs	r2, #52	@ 0x34
 8002924:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			for (ch = 0; ch < 4; ch++) // MASS Concentration
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e046      	b.n	80029bc <ReadMeasuredVal+0x210>
			{
				memcpy( nTmpConv8, &tPmResult1[ch].fMass_Concet, sizeof(float));
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	015b      	lsls	r3, r3, #5
 8002932:	4a26      	ldr	r2, [pc, #152]	@ (80029cc <ReadMeasuredVal+0x220>)
 8002934:	4413      	add	r3, r2
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	603b      	str	r3, [r7, #0]

				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 800293a:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800293c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	b2d1      	uxtb	r1, r2
 8002944:	4a24      	ldr	r2, [pc, #144]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002946:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800294a:	4619      	mov	r1, r3
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002950:	440b      	add	r3, r1
 8002952:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002958:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	b2d1      	uxtb	r1, r2
 8002960:	4a1d      	ldr	r2, [pc, #116]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002962:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002966:	4619      	mov	r1, r3
 8002968:	78ba      	ldrb	r2, [r7, #2]
 800296a:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800296c:	440b      	add	r3, r1
 800296e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002974:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	b2d1      	uxtb	r1, r2
 800297c:	4a16      	ldr	r2, [pc, #88]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800297e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002982:	4619      	mov	r1, r3
 8002984:	787a      	ldrb	r2, [r7, #1]
 8002986:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002988:	440b      	add	r3, r1
 800298a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 800298e:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002990:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	b2d1      	uxtb	r1, r2
 8002998:	4a0f      	ldr	r2, [pc, #60]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800299a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800299e:	4619      	mov	r1, r3
 80029a0:	783a      	ldrb	r2, [r7, #0]
 80029a2:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80029a4:	440b      	add	r3, r1
 80029a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

				memset(nTmpConv8, 0, sizeof(nTmpConv8));
 80029aa:	463b      	mov	r3, r7
 80029ac:	2204      	movs	r2, #4
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f009 febb 	bl	800c72c <memset>
			for (ch = 0; ch < 4; ch++) // MASS Concentration
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	3301      	adds	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d9b5      	bls.n	800292e <ReadMeasuredVal+0x182>
			}

			for (ch = 0; ch < 5; ch++) // Number Concentration
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e051      	b.n	8002a6c <ReadMeasuredVal+0x2c0>
 80029c8:	2000028c 	.word	0x2000028c
 80029cc:	200001bc 	.word	0x200001bc
 80029d0:	2000027c 	.word	0x2000027c
 80029d4:	200000cc 	.word	0x200000cc
 80029d8:	20000570 	.word	0x20000570
			{
				memcpy( nTmpConv8, &tPmResult1[ch].fNum_Concet, sizeof(float));
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	3310      	adds	r3, #16
 80029e2:	4abd      	ldr	r2, [pc, #756]	@ (8002cd8 <ReadMeasuredVal+0x52c>)
 80029e4:	4413      	add	r3, r2
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	603b      	str	r3, [r7, #0]

				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 80029ea:	4bbc      	ldr	r3, [pc, #752]	@ (8002cdc <ReadMeasuredVal+0x530>)
 80029ec:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	b2d1      	uxtb	r1, r2
 80029f4:	4ab9      	ldr	r2, [pc, #740]	@ (8002cdc <ReadMeasuredVal+0x530>)
 80029f6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80029fa:	4619      	mov	r1, r3
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	4bb7      	ldr	r3, [pc, #732]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a00:	440b      	add	r3, r1
 8002a02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002a06:	4bb5      	ldr	r3, [pc, #724]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a08:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	b2d1      	uxtb	r1, r2
 8002a10:	4ab2      	ldr	r2, [pc, #712]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a12:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002a16:	4619      	mov	r1, r3
 8002a18:	78ba      	ldrb	r2, [r7, #2]
 8002a1a:	4bb0      	ldr	r3, [pc, #704]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002a22:	4bae      	ldr	r3, [pc, #696]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a24:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	b2d1      	uxtb	r1, r2
 8002a2c:	4aab      	ldr	r2, [pc, #684]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a2e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002a32:	4619      	mov	r1, r3
 8002a34:	787a      	ldrb	r2, [r7, #1]
 8002a36:	4ba9      	ldr	r3, [pc, #676]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a38:	440b      	add	r3, r1
 8002a3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 8002a3e:	4ba7      	ldr	r3, [pc, #668]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a40:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	b2d1      	uxtb	r1, r2
 8002a48:	4aa4      	ldr	r2, [pc, #656]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a4a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002a4e:	4619      	mov	r1, r3
 8002a50:	783a      	ldrb	r2, [r7, #0]
 8002a52:	4ba2      	ldr	r3, [pc, #648]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a54:	440b      	add	r3, r1
 8002a56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

				memset(nTmpConv8, 0, sizeof(nTmpConv8));
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f009 fe63 	bl	800c72c <memset>
			for (ch = 0; ch < 5; ch++) // Number Concentration
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d9b4      	bls.n	80029dc <ReadMeasuredVal+0x230>
			}


			memcpy( nTmpConv8, &tPmResult2.fResultTps, sizeof(float));
 8002a72:	4b9b      	ldr	r3, [pc, #620]	@ (8002ce0 <ReadMeasuredVal+0x534>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	603b      	str	r3, [r7, #0]
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 8002a78:	4b98      	ldr	r3, [pc, #608]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a7a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	b2d1      	uxtb	r1, r2
 8002a82:	4a96      	ldr	r2, [pc, #600]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a84:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002a88:	4619      	mov	r1, r3
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	4b93      	ldr	r3, [pc, #588]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a8e:	440b      	add	r3, r1
 8002a90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002a94:	4b91      	ldr	r3, [pc, #580]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a96:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	b2d1      	uxtb	r1, r2
 8002a9e:	4a8f      	ldr	r2, [pc, #572]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002aa0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	78ba      	ldrb	r2, [r7, #2]
 8002aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002ab0:	4b8a      	ldr	r3, [pc, #552]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ab2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	b2d1      	uxtb	r1, r2
 8002aba:	4a88      	ldr	r2, [pc, #544]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002abc:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	787a      	ldrb	r2, [r7, #1]
 8002ac4:	4b85      	ldr	r3, [pc, #532]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 8002acc:	4b83      	ldr	r3, [pc, #524]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ace:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	b2d1      	uxtb	r1, r2
 8002ad6:	4a81      	ldr	r2, [pc, #516]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ad8:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002adc:	4619      	mov	r1, r3
 8002ade:	783a      	ldrb	r2, [r7, #0]
 8002ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			memset(nTmpConv8, 0, sizeof(nTmpConv8));
 8002ae8:	463b      	mov	r3, r7
 8002aea:	2204      	movs	r2, #4
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f009 fe1c 	bl	800c72c <memset>

			memcpy( nTmpConv8, &tPmResult2.fCFU, sizeof(float));
 8002af4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ce0 <ReadMeasuredVal+0x534>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	603b      	str	r3, [r7, #0]
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 8002afa:	4b78      	ldr	r3, [pc, #480]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002afc:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	b2d1      	uxtb	r1, r2
 8002b04:	4a75      	ldr	r2, [pc, #468]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b06:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4b73      	ldr	r3, [pc, #460]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b10:	440b      	add	r3, r1
 8002b12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002b16:	4b71      	ldr	r3, [pc, #452]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b18:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	b2d1      	uxtb	r1, r2
 8002b20:	4a6e      	ldr	r2, [pc, #440]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b22:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002b26:	4619      	mov	r1, r3
 8002b28:	78ba      	ldrb	r2, [r7, #2]
 8002b2a:	4b6c      	ldr	r3, [pc, #432]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002b32:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b34:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	b2d1      	uxtb	r1, r2
 8002b3c:	4a67      	ldr	r2, [pc, #412]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b3e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002b42:	4619      	mov	r1, r3
 8002b44:	787a      	ldrb	r2, [r7, #1]
 8002b46:	4b65      	ldr	r3, [pc, #404]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b48:	440b      	add	r3, r1
 8002b4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 8002b4e:	4b63      	ldr	r3, [pc, #396]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b50:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	b2d1      	uxtb	r1, r2
 8002b58:	4a60      	ldr	r2, [pc, #384]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b5a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002b5e:	4619      	mov	r1, r3
 8002b60:	783a      	ldrb	r2, [r7, #0]
 8002b62:	4b5e      	ldr	r3, [pc, #376]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b64:	440b      	add	r3, r1
 8002b66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			memset(nTmpConv8, 0, sizeof(nTmpConv8));
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f009 fddb 	bl	800c72c <memset>

			memcpy( nTmpConv8, &tPmResult2.fNumConcetBio, sizeof(float));
 8002b76:	4b5a      	ldr	r3, [pc, #360]	@ (8002ce0 <ReadMeasuredVal+0x534>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 8002b7c:	4b57      	ldr	r3, [pc, #348]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b7e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	b2d1      	uxtb	r1, r2
 8002b86:	4a55      	ldr	r2, [pc, #340]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b88:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	4b52      	ldr	r3, [pc, #328]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b92:	440b      	add	r3, r1
 8002b94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002b98:	4b50      	ldr	r3, [pc, #320]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b9a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	b2d1      	uxtb	r1, r2
 8002ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ba4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002ba8:	4619      	mov	r1, r3
 8002baa:	78ba      	ldrb	r2, [r7, #2]
 8002bac:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002bb4:	4b49      	ldr	r3, [pc, #292]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bb6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	b2d1      	uxtb	r1, r2
 8002bbe:	4a47      	ldr	r2, [pc, #284]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bc0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	787a      	ldrb	r2, [r7, #1]
 8002bc8:	4b44      	ldr	r3, [pc, #272]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bca:	440b      	add	r3, r1
 8002bcc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 8002bd0:	4b42      	ldr	r3, [pc, #264]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bd2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	b2d1      	uxtb	r1, r2
 8002bda:	4a40      	ldr	r2, [pc, #256]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bdc:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002be0:	4619      	mov	r1, r3
 8002be2:	783a      	ldrb	r2, [r7, #0]
 8002be4:	4b3d      	ldr	r3, [pc, #244]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			memset(nTmpConv8, 0, sizeof(nTmpConv8));
 8002bec:	463b      	mov	r3, r7
 8002bee:	2204      	movs	r2, #4
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f009 fd9a 	bl	800c72c <memset>

			memcpy( nTmpConv8, &tPmResult2.fReverved, sizeof(float));
 8002bf8:	4b39      	ldr	r3, [pc, #228]	@ (8002ce0 <ReadMeasuredVal+0x534>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	603b      	str	r3, [r7, #0]
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 8002bfe:	4b37      	ldr	r3, [pc, #220]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c00:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	b2d1      	uxtb	r1, r2
 8002c08:	4a34      	ldr	r2, [pc, #208]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c0a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002c0e:	4619      	mov	r1, r3
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	4b32      	ldr	r3, [pc, #200]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c14:	440b      	add	r3, r1
 8002c16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002c1a:	4b30      	ldr	r3, [pc, #192]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c1c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	b2d1      	uxtb	r1, r2
 8002c24:	4a2d      	ldr	r2, [pc, #180]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c26:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	78ba      	ldrb	r2, [r7, #2]
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c30:	440b      	add	r3, r1
 8002c32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002c36:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c38:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	b2d1      	uxtb	r1, r2
 8002c40:	4a26      	ldr	r2, [pc, #152]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c42:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002c46:	4619      	mov	r1, r3
 8002c48:	787a      	ldrb	r2, [r7, #1]
 8002c4a:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 8002c52:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c54:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	b2d1      	uxtb	r1, r2
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c5e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002c62:	4619      	mov	r1, r3
 8002c64:	783a      	ldrb	r2, [r7, #0]
 8002c66:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c68:	440b      	add	r3, r1
 8002c6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			memset(nTmpConv8, 0, sizeof(nTmpConv8));
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2204      	movs	r2, #4
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f009 fd59 	bl	800c72c <memset>

			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = UART_Chksum(tMsgPkt.Txbuff, tMsgPkt.TxMsgCnt);
 8002c7a:	4b18      	ldr	r3, [pc, #96]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c7c:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8002c80:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c82:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002c86:	1c59      	adds	r1, r3, #1
 8002c88:	b2c8      	uxtb	r0, r1
 8002c8a:	4914      	ldr	r1, [pc, #80]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c8c:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 8002c90:	461c      	mov	r4, r3
 8002c92:	4611      	mov	r1, r2
 8002c94:	4813      	ldr	r0, [pc, #76]	@ (8002ce4 <ReadMeasuredVal+0x538>)
 8002c96:	f002 ffe1 	bl	8005c5c <UART_Chksum>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ca0:	4423      	add	r3, r4
 8002ca2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			UART_StuffAssambly();
 8002ca6:	f002 ff1b 	bl	8005ae0 <UART_StuffAssambly>
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX;
 8002caa:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002cac:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	b2d1      	uxtb	r1, r2
 8002cb4:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002cb6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b07      	ldr	r3, [pc, #28]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002cbe:	4413      	add	r3, r2
 8002cc0:	22c2      	movs	r2, #194	@ 0xc2
 8002cc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


			tPdCtrl.ChkCount = 0;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <ReadMeasuredVal+0x53c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
			tMsgPkt.FlagTxPktOn = ON;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8002cd4:	e00a      	b.n	8002cec <ReadMeasuredVal+0x540>
 8002cd6:	bf00      	nop
 8002cd8:	200001bc 	.word	0x200001bc
 8002cdc:	20000570 	.word	0x20000570
 8002ce0:	2000027c 	.word	0x2000027c
 8002ce4:	200005f0 	.word	0x200005f0
 8002ce8:	20000074 	.word	0x20000074
			tSysState.FlagSendPmResultOn = OFF;
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <ReadMeasuredVal+0x578>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	729a      	strb	r2, [r3, #10]
		}

		Calc_Init();
 8002cf2:	f7fe fdc1 	bl	8001878 <Calc_Init>
		WaitTime_Init();
 8002cf6:	f7ff fc5b 	bl	80025b0 <WaitTime_Init>
		tSysState.FlagLoopOn = OFF;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <ReadMeasuredVal+0x578>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	721a      	strb	r2, [r3, #8]
		tPdCtrl.ChkCount = 0;
 8002d00:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <ReadMeasuredVal+0x57c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
	{
		RngOfPdAdcSamplingVal(tPdCtrl.CurrAdcVal);
		RngOfSiPmAdcSamplingVal(tSiPmCtrl.CurrAdcVal);

	}
}
 8002d06:	e009      	b.n	8002d1c <ReadMeasuredVal+0x570>
		RngOfPdAdcSamplingVal(tPdCtrl.CurrAdcVal);
 8002d08:	4b07      	ldr	r3, [pc, #28]	@ (8002d28 <ReadMeasuredVal+0x57c>)
 8002d0a:	88db      	ldrh	r3, [r3, #6]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fc4f 	bl	80045b0 <RngOfPdAdcSamplingVal>
		RngOfSiPmAdcSamplingVal(tSiPmCtrl.CurrAdcVal);
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <ReadMeasuredVal+0x580>)
 8002d14:	88db      	ldrh	r3, [r3, #6]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fd18 	bl	800474c <RngOfSiPmAdcSamplingVal>
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd90      	pop	{r4, r7, pc}
 8002d24:	2000028c 	.word	0x2000028c
 8002d28:	20000074 	.word	0x20000074
 8002d2c:	200000a4 	.word	0x200000a4

08002d30 <FanCleanCtrl>:

uint8_t FanCleanCtrl(void)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0

	uint8_t Result = FALSE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	71fb      	strb	r3, [r7, #7]

	if (OFF == tSysState.FlagLoopOn) { WaitTime_Init(); tSysState.FlagLoopOn = ON; EXT_LD_Ctrl(OFF); EXT_HV_Ctrl(OFF); EXT_PD_Ctrl(OFF); FAN_Ctrl(HI, ON); }
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb0 <FanCleanCtrl+0x180>)
 8002d3c:	7a1b      	ldrb	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d111      	bne.n	8002d66 <FanCleanCtrl+0x36>
 8002d42:	f7ff fc35 	bl	80025b0 <WaitTime_Init>
 8002d46:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb0 <FanCleanCtrl+0x180>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	721a      	strb	r2, [r3, #8]
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fe fa69 	bl	8001224 <EXT_LD_Ctrl>
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe fa8a 	bl	800126c <EXT_HV_Ctrl>
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fe faab 	bl	80012b4 <EXT_PD_Ctrl>
 8002d5e:	2101      	movs	r1, #1
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7fe fcf3 	bl	800174c <FAN_Ctrl>

	if ( TRUE == WaitHoldTime_Sec(ON, UART_MSG_MANUAL_FAN_CLE_TIME) )
 8002d66:	210a      	movs	r1, #10
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7ff fc3f 	bl	80025ec <WaitHoldTime_Sec>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	f040 8098 	bne.w	8002ea6 <FanCleanCtrl+0x176>
	{
		//Check Get ADC

		// HEADER
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;
 8002d76:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002d78:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	b2d1      	uxtb	r1, r2
 8002d80:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002d82:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b4a      	ldr	r3, [pc, #296]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002d8a:	4413      	add	r3, r2
 8002d8c:	22c0      	movs	r2, #192	@ 0xc0
 8002d8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // ADDR
 8002d92:	4b48      	ldr	r3, [pc, #288]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002d94:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	b2d1      	uxtb	r1, r2
 8002d9c:	4a45      	ldr	r2, [pc, #276]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002d9e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b43      	ldr	r3, [pc, #268]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002da6:	4413      	add	r3, r2
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = CMD_START_FAN_CLEAN;
 8002dae:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002db0:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	b2d1      	uxtb	r1, r2
 8002db8:	4a3e      	ldr	r2, [pc, #248]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dba:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tMsgPkt.MsgState; // MSG STATE
 8002dca:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dcc:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	b2d1      	uxtb	r1, r2
 8002dd4:	4a37      	ldr	r2, [pc, #220]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dd6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4b35      	ldr	r3, [pc, #212]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dde:	f893 210a 	ldrb.w	r2, [r3, #266]	@ 0x10a
 8002de2:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002de4:	440b      	add	r3, r1
 8002de6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // Message Length
 8002dea:	4b32      	ldr	r3, [pc, #200]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dec:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	b2d1      	uxtb	r1, r2
 8002df4:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002df6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dfe:	4413      	add	r3, r2
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = UART_Chksum(tMsgPkt.Txbuff, tMsgPkt.TxMsgCnt);
 8002e06:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e08:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8002e0c:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e0e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002e12:	1c59      	adds	r1, r3, #1
 8002e14:	b2c8      	uxtb	r0, r1
 8002e16:	4927      	ldr	r1, [pc, #156]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e18:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 8002e1c:	461c      	mov	r4, r3
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4825      	ldr	r0, [pc, #148]	@ (8002eb8 <FanCleanCtrl+0x188>)
 8002e22:	f002 ff1b 	bl	8005c5c <UART_Chksum>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e2c:	4423      	add	r3, r4
 8002e2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		UART_StuffAssambly();
 8002e32:	f002 fe55 	bl	8005ae0 <UART_StuffAssambly>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX;
 8002e36:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e38:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	b2d1      	uxtb	r1, r2
 8002e40:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e42:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e4a:	4413      	add	r3, r2
 8002e4c:	22c2      	movs	r2, #194	@ 0xc2
 8002e4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

		if(ON == tSysState.FlagOperModeOn) 	{ FAN_Ctrl(LO, ON);  EXT_LD_Ctrl(ON); EXT_HV_Ctrl(ON); EXT_PD_Ctrl(ON); }
 8002e52:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <FanCleanCtrl+0x180>)
 8002e54:	7adb      	ldrb	r3, [r3, #11]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10d      	bne.n	8002e76 <FanCleanCtrl+0x146>
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fe fc75 	bl	800174c <FAN_Ctrl>
 8002e62:	2001      	movs	r0, #1
 8002e64:	f7fe f9de 	bl	8001224 <EXT_LD_Ctrl>
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f7fe f9ff 	bl	800126c <EXT_HV_Ctrl>
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7fe fa20 	bl	80012b4 <EXT_PD_Ctrl>
 8002e74:	e003      	b.n	8002e7e <FanCleanCtrl+0x14e>
		else 								{ FAN_Ctrl(LO, OFF); }
 8002e76:	2100      	movs	r1, #0
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe fc67 	bl	800174c <FAN_Ctrl>

		tFan.CleWorkTime = 0;
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ebc <FanCleanCtrl+0x18c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
		SetCfg_CurrentFanUseTime(0);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fe ffd7 	bl	8001e38 <SetCfg_CurrentFanUseTime>

		tMsgPkt.FlagTxPktOn = ON;
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
		tSysState.FlagStatClenaOn = OFF;
 8002e92:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <FanCleanCtrl+0x180>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	735a      	strb	r2, [r3, #13]

		WaitTime_Init();
 8002e98:	f7ff fb8a 	bl	80025b0 <WaitTime_Init>
		tSysState.FlagLoopOn = OFF;
 8002e9c:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <FanCleanCtrl+0x180>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	721a      	strb	r2, [r3, #8]

		Result = TRUE;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	71fb      	strb	r3, [r7, #7]
	}

	return Result;
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	2000028c 	.word	0x2000028c
 8002eb4:	20000570 	.word	0x20000570
 8002eb8:	200005f0 	.word	0x200005f0
 8002ebc:	200000b4 	.word	0x200000b4

08002ec0 <Measure_Start>:


void Measure_Start(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
	if(OFF == tLdCtrl.FlagCtrlOn) 	{ EXT_LD_Ctrl(ON);  tLdCtrl.CurrAdcVal = 0; tLdCtrl.ChkCount = 0;}
 8002ec4:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <Measure_Start+0x60>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d108      	bne.n	8002ede <Measure_Start+0x1e>
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f7fe f9a9 	bl	8001224 <EXT_LD_Ctrl>
 8002ed2:	4b13      	ldr	r3, [pc, #76]	@ (8002f20 <Measure_Start+0x60>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	80da      	strh	r2, [r3, #6]
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <Measure_Start+0x60>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
	if(OFF == tFan.FlagCtrlOn) 		{ FAN_Ctrl(LO, ON); tPdCtrl.CurrAdcVal = 0; tPdCtrl.ChkCount = 0;}
 8002ede:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <Measure_Start+0x64>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <Measure_Start+0x3a>
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fe fc2f 	bl	800174c <FAN_Ctrl>
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <Measure_Start+0x68>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	80da      	strh	r2, [r3, #6]
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <Measure_Start+0x68>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
	if(OFF == tHvCtrl.FlagCtrlOn ) 	{ EXT_HV_Ctrl(ON);  tHvCtrl.CurrAdcVal = 0; tHvCtrl.ChkCount = 0;}
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <Measure_Start+0x6c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d108      	bne.n	8002f14 <Measure_Start+0x54>
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7fe f9b2 	bl	800126c <EXT_HV_Ctrl>
 8002f08:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <Measure_Start+0x6c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	80da      	strh	r2, [r3, #6]
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <Measure_Start+0x6c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
	tSysState.FlagGetAdcOn = ON;
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <Measure_Start+0x70>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	71da      	strb	r2, [r3, #7]
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000084 	.word	0x20000084
 8002f24:	200000b4 	.word	0x200000b4
 8002f28:	20000074 	.word	0x20000074
 8002f2c:	20000094 	.word	0x20000094
 8002f30:	2000028c 	.word	0x2000028c

08002f34 <Measure_Stop>:

void Measure_Stop(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	if(ON == tLdCtrl.FlagCtrlOn) 	{ EXT_LD_Ctrl(OFF);  tLdCtrl.CurrAdcVal = 0; tLdCtrl.ChkCount = 0;}
 8002f38:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <Measure_Stop+0x60>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d108      	bne.n	8002f52 <Measure_Stop+0x1e>
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7fe f96f 	bl	8001224 <EXT_LD_Ctrl>
 8002f46:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <Measure_Stop+0x60>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	80da      	strh	r2, [r3, #6]
 8002f4c:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <Measure_Stop+0x60>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
	if(ON == tFan.FlagCtrlOn) 		{ FAN_Ctrl(LO, OFF); tPdCtrl.CurrAdcVal = 0; tPdCtrl.ChkCount = 0;}
 8002f52:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <Measure_Stop+0x64>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d109      	bne.n	8002f6e <Measure_Stop+0x3a>
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fe fbf5 	bl	800174c <FAN_Ctrl>
 8002f62:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <Measure_Stop+0x68>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	80da      	strh	r2, [r3, #6]
 8002f68:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <Measure_Stop+0x68>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
	if(ON == tHvCtrl.FlagCtrlOn ) 	{ EXT_HV_Ctrl(OFF);  tHvCtrl.CurrAdcVal = 0; tHvCtrl.ChkCount = 0;}
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <Measure_Stop+0x6c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d108      	bne.n	8002f88 <Measure_Stop+0x54>
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fe f978 	bl	800126c <EXT_HV_Ctrl>
 8002f7c:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <Measure_Stop+0x6c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	80da      	strh	r2, [r3, #6]
 8002f82:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <Measure_Stop+0x6c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
	tSysState.FlagGetAdcOn = OFF;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <Measure_Stop+0x70>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	71da      	strb	r2, [r3, #7]
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000084 	.word	0x20000084
 8002f98:	200000b4 	.word	0x200000b4
 8002f9c:	20000074 	.word	0x20000074
 8002fa0:	20000094 	.word	0x20000094
 8002fa4:	2000028c 	.word	0x2000028c

08002fa8 <AssmTxMsg_GetBoundaryVolt>:

void AssmTxMsg_GetBoundaryVolt(uint8_t nCh)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
	 if(0x00 == nCh)
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d14b      	bne.n	8003050 <AssmTxMsg_GetBoundaryVolt+0xa8>
	 {
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8002fb8:	4b95      	ldr	r3, [pc, #596]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fba:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	b2d1      	uxtb	r1, r2
 8002fc2:	4a93      	ldr	r2, [pc, #588]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fc4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b91      	ldr	r3, [pc, #580]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fcc:	4413      	add	r3, r2
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
 8002fd4:	4b8e      	ldr	r3, [pc, #568]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fd6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	b2d1      	uxtb	r1, r2
 8002fde:	4a8c      	ldr	r2, [pc, #560]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fe0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b8a      	ldr	r3, [pc, #552]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fe8:	4413      	add	r3, r2
 8002fea:	79fa      	ldrb	r2, [r7, #7]
 8002fec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[nCh].BasePD >> 8) & 0xFF);
 8002ff0:	79fa      	ldrb	r2, [r7, #7]
 8002ff2:	4988      	ldr	r1, [pc, #544]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3308      	adds	r3, #8
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	0a18      	lsrs	r0, r3, #8
 8003004:	4b82      	ldr	r3, [pc, #520]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003006:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	b2d1      	uxtb	r1, r2
 800300e:	4a80      	ldr	r2, [pc, #512]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003010:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003014:	4619      	mov	r1, r3
 8003016:	b2c2      	uxtb	r2, r0
 8003018:	4b7d      	ldr	r3, [pc, #500]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800301a:	440b      	add	r3, r1
 800301c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[nCh].BasePD  ) & 0xFF);
 8003020:	79fa      	ldrb	r2, [r7, #7]
 8003022:	497c      	ldr	r1, [pc, #496]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	440b      	add	r3, r1
 800302e:	3308      	adds	r3, #8
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	4b77      	ldr	r3, [pc, #476]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003034:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	b2d1      	uxtb	r1, r2
 800303c:	4a74      	ldr	r2, [pc, #464]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800303e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003042:	4619      	mov	r1, r3
 8003044:	b2c2      	uxtb	r2, r0
 8003046:	4b72      	ldr	r3, [pc, #456]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003048:	440b      	add	r3, r1
 800304a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].UB >> 8) & 0xFF);
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].UB  ) & 0xFF);
	 }
}
 800304e:	e0d8      	b.n	8003202 <AssmTxMsg_GetBoundaryVolt+0x25a>
	 else if((0x01 <= nCh)&&(0x05 >= nCh))
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d050      	beq.n	80030f8 <AssmTxMsg_GetBoundaryVolt+0x150>
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d84d      	bhi.n	80030f8 <AssmTxMsg_GetBoundaryVolt+0x150>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 800305c:	4b6c      	ldr	r3, [pc, #432]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800305e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	b2d1      	uxtb	r1, r2
 8003066:	4a6a      	ldr	r2, [pc, #424]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003068:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800306c:	461a      	mov	r2, r3
 800306e:	4b68      	ldr	r3, [pc, #416]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003070:	4413      	add	r3, r2
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
 8003078:	4b65      	ldr	r3, [pc, #404]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800307a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	b2d1      	uxtb	r1, r2
 8003082:	4a63      	ldr	r2, [pc, #396]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003084:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003088:	461a      	mov	r2, r3
 800308a:	4b61      	ldr	r3, [pc, #388]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800308c:	4413      	add	r3, r2
 800308e:	79fa      	ldrb	r2, [r7, #7]
 8003090:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[nCh-1].UB >> 8) & 0xFF);
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	1e5a      	subs	r2, r3, #1
 8003098:	495e      	ldr	r1, [pc, #376]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3310      	adds	r3, #16
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0a18      	lsrs	r0, r3, #8
 80030aa:	4b59      	ldr	r3, [pc, #356]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030ac:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	b2d1      	uxtb	r1, r2
 80030b4:	4a56      	ldr	r2, [pc, #344]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030b6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80030ba:	4619      	mov	r1, r3
 80030bc:	b2c2      	uxtb	r2, r0
 80030be:	4b54      	ldr	r3, [pc, #336]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030c0:	440b      	add	r3, r1
 80030c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[nCh-1].UB  ) & 0xFF);
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	4952      	ldr	r1, [pc, #328]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3310      	adds	r3, #16
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	4b4d      	ldr	r3, [pc, #308]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030dc:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	b2d1      	uxtb	r1, r2
 80030e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030e6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80030ea:	4619      	mov	r1, r3
 80030ec:	b2c2      	uxtb	r2, r0
 80030ee:	4b48      	ldr	r3, [pc, #288]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030f0:	440b      	add	r3, r1
 80030f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80030f6:	e084      	b.n	8003202 <AssmTxMsg_GetBoundaryVolt+0x25a>
	 else if(0x06 == nCh)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d13f      	bne.n	800317e <AssmTxMsg_GetBoundaryVolt+0x1d6>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 80030fe:	4b44      	ldr	r3, [pc, #272]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003100:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	b2d1      	uxtb	r1, r2
 8003108:	4a41      	ldr	r2, [pc, #260]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800310a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800310e:	461a      	mov	r2, r3
 8003110:	4b3f      	ldr	r3, [pc, #252]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003112:	4413      	add	r3, r2
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
 800311a:	4b3d      	ldr	r3, [pc, #244]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800311c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	b2d1      	uxtb	r1, r2
 8003124:	4a3a      	ldr	r2, [pc, #232]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003126:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800312a:	461a      	mov	r2, r3
 800312c:	4b38      	ldr	r3, [pc, #224]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800312e:	4413      	add	r3, r2
 8003130:	79fa      	ldrb	r2, [r7, #7]
 8003132:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].LB >> 8) & 0xFF);
 8003136:	4b37      	ldr	r3, [pc, #220]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 8003138:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800313c:	0a18      	lsrs	r0, r3, #8
 800313e:	4b34      	ldr	r3, [pc, #208]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003140:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	b2d1      	uxtb	r1, r2
 8003148:	4a31      	ldr	r2, [pc, #196]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800314a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800314e:	4619      	mov	r1, r3
 8003150:	b2c2      	uxtb	r2, r0
 8003152:	4b2f      	ldr	r3, [pc, #188]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003154:	440b      	add	r3, r1
 8003156:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].LB  ) & 0xFF);
 800315a:	4b2e      	ldr	r3, [pc, #184]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 800315c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
 8003160:	4b2b      	ldr	r3, [pc, #172]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003162:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	b2d1      	uxtb	r1, r2
 800316a:	4a29      	ldr	r2, [pc, #164]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800316c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003170:	4619      	mov	r1, r3
 8003172:	b2c2      	uxtb	r2, r0
 8003174:	4b26      	ldr	r3, [pc, #152]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003176:	440b      	add	r3, r1
 8003178:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 800317c:	e041      	b.n	8003202 <AssmTxMsg_GetBoundaryVolt+0x25a>
	 else if(0x07 == nCh)
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d13e      	bne.n	8003202 <AssmTxMsg_GetBoundaryVolt+0x25a>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003184:	4b22      	ldr	r3, [pc, #136]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003186:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	b2d1      	uxtb	r1, r2
 800318e:	4a20      	ldr	r2, [pc, #128]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003190:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003194:	461a      	mov	r2, r3
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003198:	4413      	add	r3, r2
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031a2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	b2d1      	uxtb	r1, r2
 80031aa:	4a19      	ldr	r2, [pc, #100]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031ac:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b17      	ldr	r3, [pc, #92]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031b4:	4413      	add	r3, r2
 80031b6:	79fa      	ldrb	r2, [r7, #7]
 80031b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].UB >> 8) & 0xFF);
 80031bc:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 80031be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80031c2:	0a18      	lsrs	r0, r3, #8
 80031c4:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031c6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	b2d1      	uxtb	r1, r2
 80031ce:	4a10      	ldr	r2, [pc, #64]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031d0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80031d4:	4619      	mov	r1, r3
 80031d6:	b2c2      	uxtb	r2, r0
 80031d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031da:	440b      	add	r3, r1
 80031dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].UB  ) & 0xFF);
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 80031e2:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 80031e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031e8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	b2d1      	uxtb	r1, r2
 80031f0:	4a07      	ldr	r2, [pc, #28]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031f2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80031f6:	4619      	mov	r1, r3
 80031f8:	b2c2      	uxtb	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031fc:	440b      	add	r3, r1
 80031fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000570 	.word	0x20000570
 8003214:	200000cc 	.word	0x200000cc

08003218 <SetBoundaryVolt>:

void SetBoundaryVolt(uint8_t nCh)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
	 if(0x00 == nCh)
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d13f      	bne.n	80032a8 <SetBoundaryVolt+0x90>
	 {

		tParam[nCh].BasePD  = (uint16_t)(tMsgPkt.RxBuff[6] << 8);
 8003228:	4b5e      	ldr	r3, [pc, #376]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 800322a:	799b      	ldrb	r3, [r3, #6]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	b29b      	uxth	r3, r3
 8003230:	79fa      	ldrb	r2, [r7, #7]
 8003232:	4618      	mov	r0, r3
 8003234:	495c      	ldr	r1, [pc, #368]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	3308      	adds	r3, #8
 8003242:	6018      	str	r0, [r3, #0]
		tParam[nCh].BasePD |= (uint16_t)(tMsgPkt.RxBuff[7]);
 8003244:	79fa      	ldrb	r2, [r7, #7]
 8003246:	4958      	ldr	r1, [pc, #352]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	440b      	add	r3, r1
 8003252:	3308      	adds	r3, #8
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a53      	ldr	r2, [pc, #332]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 8003258:	79d2      	ldrb	r2, [r2, #7]
 800325a:	4611      	mov	r1, r2
 800325c:	79fa      	ldrb	r2, [r7, #7]
 800325e:	4319      	orrs	r1, r3
 8003260:	4851      	ldr	r0, [pc, #324]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4403      	add	r3, r0
 800326c:	3308      	adds	r3, #8
 800326e:	6019      	str	r1, [r3, #0]

		SetParam_BoundaryVolt(nCh, tParam[nCh].BasePD);
 8003270:	79fa      	ldrb	r2, [r7, #7]
 8003272:	494d      	ldr	r1, [pc, #308]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	3308      	adds	r3, #8
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29a      	uxth	r2, r3
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe ff07 	bl	800209c <SetParam_BoundaryVolt>

		tParam[nCh].LB = tParam[PM_CH1].BasePD + 1;
 800328e:	4b46      	ldr	r3, [pc, #280]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	79fa      	ldrb	r2, [r7, #7]
 8003294:	1c59      	adds	r1, r3, #1
 8003296:	4844      	ldr	r0, [pc, #272]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4403      	add	r3, r0
 80032a2:	330c      	adds	r3, #12
 80032a4:	6019      	str	r1, [r3, #0]
		tParam[PM_SiPM].UB  = (uint16_t)(tMsgPkt.RxBuff[6] << 8);
		tParam[PM_SiPM].UB |= (uint16_t)(tMsgPkt.RxBuff[7]);

		SetParam_BoundaryVolt(nCh, tParam[PM_SiPM].UB);
	 }
}
 80032a6:	e078      	b.n	800339a <SetBoundaryVolt+0x182>
	 else if((0x01 <= nCh)&&(0x05 >= nCh))
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d03a      	beq.n	8003324 <SetBoundaryVolt+0x10c>
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d837      	bhi.n	8003324 <SetBoundaryVolt+0x10c>
		tParam[nCh-1].UB  = (uint16_t)(tMsgPkt.RxBuff[6] << 8);
 80032b4:	4b3b      	ldr	r3, [pc, #236]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 80032b6:	799b      	ldrb	r3, [r3, #6]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	b299      	uxth	r1, r3
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	1e5a      	subs	r2, r3, #1
 80032c0:	4608      	mov	r0, r1
 80032c2:	4939      	ldr	r1, [pc, #228]	@ (80033a8 <SetBoundaryVolt+0x190>)
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	3310      	adds	r3, #16
 80032d0:	6018      	str	r0, [r3, #0]
		tParam[nCh-1].UB |= (uint16_t)(tMsgPkt.RxBuff[7]);
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	1e5a      	subs	r2, r3, #1
 80032d6:	4934      	ldr	r1, [pc, #208]	@ (80033a8 <SetBoundaryVolt+0x190>)
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	3310      	adds	r3, #16
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2f      	ldr	r2, [pc, #188]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 80032e8:	79d2      	ldrb	r2, [r2, #7]
 80032ea:	4611      	mov	r1, r2
 80032ec:	79fa      	ldrb	r2, [r7, #7]
 80032ee:	3a01      	subs	r2, #1
 80032f0:	4319      	orrs	r1, r3
 80032f2:	482d      	ldr	r0, [pc, #180]	@ (80033a8 <SetBoundaryVolt+0x190>)
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4403      	add	r3, r0
 80032fe:	3310      	adds	r3, #16
 8003300:	6019      	str	r1, [r3, #0]
		SetParam_BoundaryVolt(nCh, tParam[nCh-1].UB);
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	4928      	ldr	r1, [pc, #160]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	3310      	adds	r3, #16
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29a      	uxth	r2, r3
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe febd 	bl	800209c <SetParam_BoundaryVolt>
}
 8003322:	e03a      	b.n	800339a <SetBoundaryVolt+0x182>
	 else if(0x06 == nCh)
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	2b06      	cmp	r3, #6
 8003328:	d11a      	bne.n	8003360 <SetBoundaryVolt+0x148>
		tParam[PM_SiPM].LB  = (uint16_t)(tMsgPkt.RxBuff[6] << 8);
 800332a:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 800332c:	799b      	ldrb	r3, [r3, #6]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b29b      	uxth	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	4b1c      	ldr	r3, [pc, #112]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003336:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		tParam[PM_SiPM].LB |= (uint16_t)(tMsgPkt.RxBuff[7]);
 800333a:	4b1b      	ldr	r3, [pc, #108]	@ (80033a8 <SetBoundaryVolt+0x190>)
 800333c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003340:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 8003342:	79d2      	ldrb	r2, [r2, #7]
 8003344:	4313      	orrs	r3, r2
 8003346:	4a18      	ldr	r2, [pc, #96]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003348:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
		SetParam_BoundaryVolt(nCh, tParam[PM_SiPM].LB);
 800334c:	4b16      	ldr	r3, [pc, #88]	@ (80033a8 <SetBoundaryVolt+0x190>)
 800334e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003352:	b29a      	uxth	r2, r3
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fe9f 	bl	800209c <SetParam_BoundaryVolt>
}
 800335e:	e01c      	b.n	800339a <SetBoundaryVolt+0x182>
	 else if(0x07 == nCh)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	2b07      	cmp	r3, #7
 8003364:	d119      	bne.n	800339a <SetBoundaryVolt+0x182>
		tParam[PM_SiPM].UB  = (uint16_t)(tMsgPkt.RxBuff[6] << 8);
 8003366:	4b0f      	ldr	r3, [pc, #60]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 8003368:	799b      	ldrb	r3, [r3, #6]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	b29b      	uxth	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003372:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
		tParam[PM_SiPM].UB |= (uint16_t)(tMsgPkt.RxBuff[7]);
 8003376:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800337c:	4a09      	ldr	r2, [pc, #36]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 800337e:	79d2      	ldrb	r2, [r2, #7]
 8003380:	4313      	orrs	r3, r2
 8003382:	4a09      	ldr	r2, [pc, #36]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003384:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		SetParam_BoundaryVolt(nCh, tParam[PM_SiPM].UB);
 8003388:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <SetBoundaryVolt+0x190>)
 800338a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800338e:	b29a      	uxth	r2, r3
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe fe81 	bl	800209c <SetParam_BoundaryVolt>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000570 	.word	0x20000570
 80033a8:	200000cc 	.word	0x200000cc

080033ac <AssmTxMsg_GetAdjustCal>:

//EEROR
void AssmTxMsg_GetAdjustCal(uint8_t nCh)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
	uint32_t nRelt = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]

//		 if(0x00 == nCh)					{ nRelt = *((uint32_t*)&tParam[PM_CH1].den); 		}
//	else if((0x01 <= nCh)&&(0x05 >= nCh))	{ nRelt = *((uint32_t*)&tParam[PM_CH1-1].Cal); 	}
//	else if(0x06 == nCh)					{ nRelt = *((uint32_t*)&tParam[PM_SiPM].CfuCal); 	}

		 if(0x00 == nCh)					{ memcpy(&nRelt, &tParam[PM_CH1].den, sizeof nRelt); }
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <AssmTxMsg_GetAdjustCal+0x1c>
 80033c0:	4b37      	ldr	r3, [pc, #220]	@ (80034a0 <AssmTxMsg_GetAdjustCal+0xf4>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e018      	b.n	80033fa <AssmTxMsg_GetAdjustCal+0x4e>
	else if((0x01 <= nCh)&&(0x05 >= nCh))	{ memcpy(&nRelt, &tParam[nCh-1].Cal, sizeof nRelt); 	}
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00e      	beq.n	80033ec <AssmTxMsg_GetAdjustCal+0x40>
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d80b      	bhi.n	80033ec <AssmTxMsg_GetAdjustCal+0x40>
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	1e5a      	subs	r2, r3, #1
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	3320      	adds	r3, #32
 80033e2:	4a2f      	ldr	r2, [pc, #188]	@ (80034a0 <AssmTxMsg_GetAdjustCal+0xf4>)
 80033e4:	4413      	add	r3, r2
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e006      	b.n	80033fa <AssmTxMsg_GetAdjustCal+0x4e>
	else if(0x06 == nCh)					{ memcpy(&nRelt, &tParam[PM_SiPM].CfuCal, sizeof nRelt); 	}
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	2b06      	cmp	r3, #6
 80033f0:	d103      	bne.n	80033fa <AssmTxMsg_GetAdjustCal+0x4e>
 80033f2:	4b2b      	ldr	r3, [pc, #172]	@ (80034a0 <AssmTxMsg_GetAdjustCal+0xf4>)
 80033f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80033f8:	60fb      	str	r3, [r7, #12]

	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
 80033fa:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 80033fc:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	b2d1      	uxtb	r1, r2
 8003404:	4a27      	ldr	r2, [pc, #156]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003406:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800340a:	461a      	mov	r2, r3
 800340c:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800340e:	4413      	add	r3, r2
 8003410:	79fa      	ldrb	r2, [r7, #7]
 8003412:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((nRelt >> 24)  & 0xFF);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	0e18      	lsrs	r0, r3, #24
 800341a:	4b22      	ldr	r3, [pc, #136]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800341c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	b2d1      	uxtb	r1, r2
 8003424:	4a1f      	ldr	r2, [pc, #124]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003426:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800342a:	4619      	mov	r1, r3
 800342c:	b2c2      	uxtb	r2, r0
 800342e:	4b1d      	ldr	r3, [pc, #116]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003430:	440b      	add	r3, r1
 8003432:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((nRelt >> 16)  & 0xFF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	0c18      	lsrs	r0, r3, #16
 800343a:	4b1a      	ldr	r3, [pc, #104]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800343c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	b2d1      	uxtb	r1, r2
 8003444:	4a17      	ldr	r2, [pc, #92]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003446:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800344a:	4619      	mov	r1, r3
 800344c:	b2c2      	uxtb	r2, r0
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003450:	440b      	add	r3, r1
 8003452:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((nRelt >>  8)  & 0xFF);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	0a18      	lsrs	r0, r3, #8
 800345a:	4b12      	ldr	r3, [pc, #72]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800345c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	b2d1      	uxtb	r1, r2
 8003464:	4a0f      	ldr	r2, [pc, #60]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003466:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800346a:	4619      	mov	r1, r3
 800346c:	b2c2      	uxtb	r2, r0
 800346e:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003470:	440b      	add	r3, r1
 8003472:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((nRelt 	   )  & 0xFF);
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800347a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	b2d1      	uxtb	r1, r2
 8003482:	4a08      	ldr	r2, [pc, #32]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003484:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003488:	4619      	mov	r1, r3
 800348a:	b2c2      	uxtb	r2, r0
 800348c:	4b05      	ldr	r3, [pc, #20]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800348e:	440b      	add	r3, r1
 8003490:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	200000cc 	.word	0x200000cc
 80034a4:	20000570 	.word	0x20000570

080034a8 <SetAdjustCal>:

void SetAdjustCal(uint8_t nCh)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
	uint32_t result  = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]

	result  = (uint32_t)(tMsgPkt.RxBuff[6] << 24);
 80034b6:	4b38      	ldr	r3, [pc, #224]	@ (8003598 <SetAdjustCal+0xf0>)
 80034b8:	799b      	ldrb	r3, [r3, #6]
 80034ba:	061b      	lsls	r3, r3, #24
 80034bc:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(tMsgPkt.RxBuff[7] << 16);
 80034be:	4b36      	ldr	r3, [pc, #216]	@ (8003598 <SetAdjustCal+0xf0>)
 80034c0:	79db      	ldrb	r3, [r3, #7]
 80034c2:	041a      	lsls	r2, r3, #16
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(tMsgPkt.RxBuff[8] << 8);
 80034ca:	4b33      	ldr	r3, [pc, #204]	@ (8003598 <SetAdjustCal+0xf0>)
 80034cc:	7a1b      	ldrb	r3, [r3, #8]
 80034ce:	021a      	lsls	r2, r3, #8
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(tMsgPkt.RxBuff[9]);
 80034d6:	4b30      	ldr	r3, [pc, #192]	@ (8003598 <SetAdjustCal+0xf0>)
 80034d8:	7a5b      	ldrb	r3, [r3, #9]
 80034da:	461a      	mov	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

	 if(0x00 == nCh)
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d11c      	bne.n	8003522 <SetAdjustCal+0x7a>
	 {
		tParam[nCh].den = *((float*)&result);
 80034e8:	f107 030c 	add.w	r3, r7, #12
 80034ec:	79fa      	ldrb	r2, [r7, #7]
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	482a      	ldr	r0, [pc, #168]	@ (800359c <SetAdjustCal+0xf4>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4403      	add	r3, r0
 80034fc:	331c      	adds	r3, #28
 80034fe:	6019      	str	r1, [r3, #0]
		SetParam_AdjCal(nCh, tParam[nCh].den);
 8003500:	79fa      	ldrb	r2, [r7, #7]
 8003502:	4926      	ldr	r1, [pc, #152]	@ (800359c <SetAdjustCal+0xf4>)
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	331c      	adds	r3, #28
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	eeb0 0a67 	vmov.f32	s0, s15
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fe64 	bl	80021e8 <SetParam_AdjCal>
	 else if(0x06 == nCh)
	 {
		tParam[PM_SiPM].CfuCal = *((float*)&result);
		SetParam_BoundaryVolt(nCh, tParam[PM_SiPM].LB);
	 }
}
 8003520:	e036      	b.n	8003590 <SetAdjustCal+0xe8>
	 else if((0x01 <= nCh)&&(0x05 >= nCh))
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d021      	beq.n	800356c <SetAdjustCal+0xc4>
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	2b05      	cmp	r3, #5
 800352c:	d81e      	bhi.n	800356c <SetAdjustCal+0xc4>
		tParam[nCh-1].Cal  = *((float*)&result);
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	79fa      	ldrb	r2, [r7, #7]
 8003534:	3a01      	subs	r2, #1
 8003536:	6819      	ldr	r1, [r3, #0]
 8003538:	4818      	ldr	r0, [pc, #96]	@ (800359c <SetAdjustCal+0xf4>)
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4403      	add	r3, r0
 8003544:	3320      	adds	r3, #32
 8003546:	6019      	str	r1, [r3, #0]
		SetParam_AdjCal(nCh, tParam[nCh-1].Cal);
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	4913      	ldr	r1, [pc, #76]	@ (800359c <SetAdjustCal+0xf4>)
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	440b      	add	r3, r1
 8003558:	3320      	adds	r3, #32
 800355a:	edd3 7a00 	vldr	s15, [r3]
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	eeb0 0a67 	vmov.f32	s0, s15
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fe3f 	bl	80021e8 <SetParam_AdjCal>
}
 800356a:	e011      	b.n	8003590 <SetAdjustCal+0xe8>
	 else if(0x06 == nCh)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b06      	cmp	r3, #6
 8003570:	d10e      	bne.n	8003590 <SetAdjustCal+0xe8>
		tParam[PM_SiPM].CfuCal = *((float*)&result);
 8003572:	f107 030c 	add.w	r3, r7, #12
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a08      	ldr	r2, [pc, #32]	@ (800359c <SetAdjustCal+0xf4>)
 800357a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
		SetParam_BoundaryVolt(nCh, tParam[PM_SiPM].LB);
 800357e:	4b07      	ldr	r3, [pc, #28]	@ (800359c <SetAdjustCal+0xf4>)
 8003580:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003584:	b29a      	uxth	r2, r3
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fd86 	bl	800209c <SetParam_BoundaryVolt>
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000570 	.word	0x20000570
 800359c:	200000cc 	.word	0x200000cc

080035a0 <AssmTxMsg_DeviceInfo>:

void AssmTxMsg_DeviceInfo(uint8_t nMode)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]

	if(DEVICE_INFO_PRODUCT_TYPE == nMode){
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d127      	bne.n	8003604 <AssmTxMsg_DeviceInfo+0x64>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x08;
 80035b4:	4b4c      	ldr	r3, [pc, #304]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035b6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	b2d1      	uxtb	r1, r2
 80035be:	4a4a      	ldr	r2, [pc, #296]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035c0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b48      	ldr	r3, [pc, #288]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035c8:	4413      	add	r3, r2
 80035ca:	2208      	movs	r2, #8
 80035cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		for( i = 0; i < 8; i++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e012      	b.n	80035fc <AssmTxMsg_DeviceInfo+0x5c>
		{ tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tConfig.prodtype[i]; }
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	4b43      	ldr	r3, [pc, #268]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035da:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80035de:	1c59      	adds	r1, r3, #1
 80035e0:	b2c8      	uxtb	r0, r1
 80035e2:	4941      	ldr	r1, [pc, #260]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035e4:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 80035e8:	4619      	mov	r1, r3
 80035ea:	4b40      	ldr	r3, [pc, #256]	@ (80036ec <AssmTxMsg_DeviceInfo+0x14c>)
 80035ec:	5c9a      	ldrb	r2, [r3, r2]
 80035ee:	4b3e      	ldr	r3, [pc, #248]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035f0:	440b      	add	r3, r1
 80035f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		for( i = 0; i < 8; i++)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	3301      	adds	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b07      	cmp	r3, #7
 8003600:	d9e9      	bls.n	80035d6 <AssmTxMsg_DeviceInfo+0x36>
	{
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x10;
		for( i = 0; i < 16; i++)
		{ tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tConfig.prodSerial[i]; }
	}
}
 8003602:	e06a      	b.n	80036da <AssmTxMsg_DeviceInfo+0x13a>
	else if(DEVICE_INFO_RESERVE1 == nMode)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d11c      	bne.n	8003644 <AssmTxMsg_DeviceInfo+0xa4>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x01;
 800360a:	4b37      	ldr	r3, [pc, #220]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800360c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	b2d1      	uxtb	r1, r2
 8003614:	4a34      	ldr	r2, [pc, #208]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003616:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800361a:	461a      	mov	r2, r3
 800361c:	4b32      	ldr	r3, [pc, #200]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800361e:	4413      	add	r3, r2
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003626:	4b30      	ldr	r3, [pc, #192]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003628:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	b2d1      	uxtb	r1, r2
 8003630:	4a2d      	ldr	r2, [pc, #180]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003632:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003636:	461a      	mov	r2, r3
 8003638:	4b2b      	ldr	r3, [pc, #172]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800363a:	4413      	add	r3, r2
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8003642:	e04a      	b.n	80036da <AssmTxMsg_DeviceInfo+0x13a>
	else if(DEVICE_INFO_RESERVE2 == nMode)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d11c      	bne.n	8003684 <AssmTxMsg_DeviceInfo+0xe4>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x01;
 800364a:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800364c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	b2d1      	uxtb	r1, r2
 8003654:	4a24      	ldr	r2, [pc, #144]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003656:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800365a:	461a      	mov	r2, r3
 800365c:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800365e:	4413      	add	r3, r2
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003666:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003668:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	b2d1      	uxtb	r1, r2
 8003670:	4a1d      	ldr	r2, [pc, #116]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003672:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003676:	461a      	mov	r2, r3
 8003678:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800367a:	4413      	add	r3, r2
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8003682:	e02a      	b.n	80036da <AssmTxMsg_DeviceInfo+0x13a>
	else if(DEVICE_INFO_SERIAL_NUM == nMode)
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d127      	bne.n	80036da <AssmTxMsg_DeviceInfo+0x13a>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x10;
 800368a:	4b17      	ldr	r3, [pc, #92]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800368c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	b2d1      	uxtb	r1, r2
 8003694:	4a14      	ldr	r2, [pc, #80]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003696:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800369a:	461a      	mov	r2, r3
 800369c:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800369e:	4413      	add	r3, r2
 80036a0:	2210      	movs	r2, #16
 80036a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		for( i = 0; i < 16; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	e013      	b.n	80036d4 <AssmTxMsg_DeviceInfo+0x134>
		{ tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tConfig.prodSerial[i]; }
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80036b0:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80036b4:	1c59      	adds	r1, r3, #1
 80036b6:	b2c8      	uxtb	r0, r1
 80036b8:	490b      	ldr	r1, [pc, #44]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80036ba:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 80036be:	4619      	mov	r1, r3
 80036c0:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <AssmTxMsg_DeviceInfo+0x14c>)
 80036c2:	4413      	add	r3, r2
 80036c4:	7a1a      	ldrb	r2, [r3, #8]
 80036c6:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80036c8:	440b      	add	r3, r1
 80036ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		for( i = 0; i < 16; i++)
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	3301      	adds	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b0f      	cmp	r3, #15
 80036d8:	d9e8      	bls.n	80036ac <AssmTxMsg_DeviceInfo+0x10c>
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000570 	.word	0x20000570
 80036ec:	20000030 	.word	0x20000030

080036f0 <DeviceInfo>:

void DeviceInfo(uint8_t nMode)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]

	if(DEVICE_INFO_PRODUCT_TYPE == nMode){
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d113      	bne.n	800372c <DeviceInfo+0x3c>
		for( i = 0; i < 8; i++)
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
 8003708:	e009      	b.n	800371e <DeviceInfo+0x2e>
		{ tConfig.prodtype[i] = tMsgPkt.RxBuff[4+i]; }
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	1d1a      	adds	r2, r3, #4
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	4914      	ldr	r1, [pc, #80]	@ (8003764 <DeviceInfo+0x74>)
 8003712:	5c89      	ldrb	r1, [r1, r2]
 8003714:	4a14      	ldr	r2, [pc, #80]	@ (8003768 <DeviceInfo+0x78>)
 8003716:	54d1      	strb	r1, [r2, r3]
		for( i = 0; i < 8; i++)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	3301      	adds	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b07      	cmp	r3, #7
 8003722:	d9f2      	bls.n	800370a <DeviceInfo+0x1a>

		SetCfg_Device_ProcType(tConfig.prodtype);
 8003724:	4810      	ldr	r0, [pc, #64]	@ (8003768 <DeviceInfo+0x78>)
 8003726:	f7fe fbaf 	bl	8001e88 <SetCfg_Device_ProcType>
		for( i = 0; i < 16; i++)
		{ tConfig.prodSerial[i] = tMsgPkt.RxBuff[4+i]; }
		SetCfg_Device_ProcSerial(tConfig.prodSerial);
	}

}
 800372a:	e017      	b.n	800375c <DeviceInfo+0x6c>
	else if(DEVICE_INFO_SERIAL_NUM == nMode)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d114      	bne.n	800375c <DeviceInfo+0x6c>
		for( i = 0; i < 16; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e00b      	b.n	8003750 <DeviceInfo+0x60>
		{ tConfig.prodSerial[i] = tMsgPkt.RxBuff[4+i]; }
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	1d1a      	adds	r2, r3, #4
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	4909      	ldr	r1, [pc, #36]	@ (8003764 <DeviceInfo+0x74>)
 8003740:	5c89      	ldrb	r1, [r1, r2]
 8003742:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <DeviceInfo+0x78>)
 8003744:	4413      	add	r3, r2
 8003746:	460a      	mov	r2, r1
 8003748:	721a      	strb	r2, [r3, #8]
		for( i = 0; i < 16; i++)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	3301      	adds	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d9f0      	bls.n	8003738 <DeviceInfo+0x48>
		SetCfg_Device_ProcSerial(tConfig.prodSerial);
 8003756:	4805      	ldr	r0, [pc, #20]	@ (800376c <DeviceInfo+0x7c>)
 8003758:	f7fe fbd3 	bl	8001f02 <SetCfg_Device_ProcSerial>
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000570 	.word	0x20000570
 8003768:	20000030 	.word	0x20000030
 800376c:	20000038 	.word	0x20000038

08003770 <DeviceFirmwareVer>:

void DeviceFirmwareVer(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	71fb      	strb	r3, [r7, #7]
	for( i = 0; i < 5; i++)
 800377a:	2300      	movs	r3, #0
 800377c:	71fb      	strb	r3, [r7, #7]
 800377e:	e019      	b.n	80037b4 <DeviceFirmwareVer+0x44>
	{
			 if(0 == i) { tConfig.FirmwareVer[0] = DEFAULT_FIRMWARE_MAJ_VERSION; }
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <DeviceFirmwareVer+0x1e>
 8003786:	4b10      	ldr	r3, [pc, #64]	@ (80037c8 <DeviceFirmwareVer+0x58>)
 8003788:	2200      	movs	r2, #0
 800378a:	761a      	strb	r2, [r3, #24]
 800378c:	e00f      	b.n	80037ae <DeviceFirmwareVer+0x3e>
		else if(1 == i) { tConfig.FirmwareVer[1] = DEFAULT_FIRMWARE_MIN_VERSION; }
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d103      	bne.n	800379c <DeviceFirmwareVer+0x2c>
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <DeviceFirmwareVer+0x58>)
 8003796:	2209      	movs	r2, #9
 8003798:	765a      	strb	r2, [r3, #25]
 800379a:	e008      	b.n	80037ae <DeviceFirmwareVer+0x3e>
		else 			{ tConfig.FirmwareVer[i] = tMsgPkt.RxBuff[4+i]; }
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	490a      	ldr	r1, [pc, #40]	@ (80037cc <DeviceFirmwareVer+0x5c>)
 80037a4:	5c89      	ldrb	r1, [r1, r2]
 80037a6:	4a08      	ldr	r2, [pc, #32]	@ (80037c8 <DeviceFirmwareVer+0x58>)
 80037a8:	4413      	add	r3, r2
 80037aa:	460a      	mov	r2, r1
 80037ac:	761a      	strb	r2, [r3, #24]
	for( i = 0; i < 5; i++)
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	3301      	adds	r3, #1
 80037b2:	71fb      	strb	r3, [r7, #7]
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d9e2      	bls.n	8003780 <DeviceFirmwareVer+0x10>
	}
	SetCfg_Device_ProcVer(tConfig.FirmwareVer);
 80037ba:	4805      	ldr	r0, [pc, #20]	@ (80037d0 <DeviceFirmwareVer+0x60>)
 80037bc:	f7fe fbde 	bl	8001f7c <SetCfg_Device_ProcVer>
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000030 	.word	0x20000030
 80037cc:	20000570 	.word	0x20000570
 80037d0:	20000048 	.word	0x20000048

080037d4 <RspAssamblyTxMsg>:

void RspAssamblyTxMsg(uint8_t nCMD)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
	UART_TxInit();
 80037de:	f001 fe2b 	bl	8005438 <UART_TxInit>
	// HEADER
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;	// STX
 80037e2:	4b9a      	ldr	r3, [pc, #616]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80037e4:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	b2d1      	uxtb	r1, r2
 80037ec:	4a97      	ldr	r2, [pc, #604]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80037ee:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80037f2:	461a      	mov	r2, r3
 80037f4:	4b95      	ldr	r3, [pc, #596]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80037f6:	4413      	add	r3, r2
 80037f8:	22c0      	movs	r2, #192	@ 0xc0
 80037fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; 	// ADDR
 80037fe:	4b93      	ldr	r3, [pc, #588]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003800:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	b2d1      	uxtb	r1, r2
 8003808:	4a90      	ldr	r2, [pc, #576]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800380a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800380e:	461a      	mov	r2, r3
 8003810:	4b8e      	ldr	r3, [pc, #568]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003812:	4413      	add	r3, r2
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCMD;
 800381a:	4b8c      	ldr	r3, [pc, #560]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800381c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	b2d1      	uxtb	r1, r2
 8003824:	4a89      	ldr	r2, [pc, #548]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003826:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800382a:	461a      	mov	r2, r3
 800382c:	4b87      	ldr	r3, [pc, #540]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800382e:	4413      	add	r3, r2
 8003830:	79fa      	ldrb	r2, [r7, #7]
 8003832:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tMsgPkt.MsgState; 	// MSG STATE
 8003836:	4b85      	ldr	r3, [pc, #532]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003838:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	b2d1      	uxtb	r1, r2
 8003840:	4a82      	ldr	r2, [pc, #520]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003842:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003846:	4619      	mov	r1, r3
 8003848:	4b80      	ldr	r3, [pc, #512]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800384a:	f893 210a 	ldrb.w	r2, [r3, #266]	@ 0x10a
 800384e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003850:	440b      	add	r3, r1
 8003852:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	switch (nCMD)
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2b10      	cmp	r3, #16
 800385a:	dc2b      	bgt.n	80038b4 <RspAssamblyTxMsg+0xe0>
 800385c:	2b00      	cmp	r3, #0
 800385e:	f2c0 82f6 	blt.w	8003e4e <RspAssamblyTxMsg+0x67a>
 8003862:	2b10      	cmp	r3, #16
 8003864:	f200 82f3 	bhi.w	8003e4e <RspAssamblyTxMsg+0x67a>
 8003868:	a201      	add	r2, pc, #4	@ (adr r2, 8003870 <RspAssamblyTxMsg+0x9c>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	080038bd 	.word	0x080038bd
 8003874:	0800391f 	.word	0x0800391f
 8003878:	0800393d 	.word	0x0800393d
 800387c:	08003e4f 	.word	0x08003e4f
 8003880:	0800395b 	.word	0x0800395b
 8003884:	08003979 	.word	0x08003979
 8003888:	08003a59 	.word	0x08003a59
 800388c:	08003b2d 	.word	0x08003b2d
 8003890:	08003b85 	.word	0x08003b85
 8003894:	08003bad 	.word	0x08003bad
 8003898:	08003bd5 	.word	0x08003bd5
 800389c:	08003bf3 	.word	0x08003bf3
 80038a0:	08003c11 	.word	0x08003c11
 80038a4:	08003c4d 	.word	0x08003c4d
 80038a8:	08003d3d 	.word	0x08003d3d
 80038ac:	08003df5 	.word	0x08003df5
 80038b0:	08003d9f 	.word	0x08003d9f
 80038b4:	2bf0      	cmp	r3, #240	@ 0xf0
 80038b6:	f000 82ac 	beq.w	8003e12 <RspAssamblyTxMsg+0x63e>
 80038ba:	e2c8      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
	{
		case CMD_BIT_MANUAL_START : { // LENGTH 2 Byte , Device State
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x02;
 80038bc:	4b63      	ldr	r3, [pc, #396]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038be:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	b2d1      	uxtb	r1, r2
 80038c6:	4a61      	ldr	r2, [pc, #388]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038c8:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b5f      	ldr	r3, [pc, #380]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038d0:	4413      	add	r3, r2
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tSysState.DeviceState >> 8) & 0xFF);
 80038d8:	4b5d      	ldr	r3, [pc, #372]	@ (8003a50 <RspAssamblyTxMsg+0x27c>)
 80038da:	8b9b      	ldrh	r3, [r3, #28]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	b298      	uxth	r0, r3
 80038e0:	4b5a      	ldr	r3, [pc, #360]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038e2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	b2d1      	uxtb	r1, r2
 80038ea:	4a58      	ldr	r2, [pc, #352]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038ec:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80038f0:	4619      	mov	r1, r3
 80038f2:	b2c2      	uxtb	r2, r0
 80038f4:	4b55      	ldr	r3, [pc, #340]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)(tSysState.DeviceState & 0xFF);
 80038fc:	4b54      	ldr	r3, [pc, #336]	@ (8003a50 <RspAssamblyTxMsg+0x27c>)
 80038fe:	8b98      	ldrh	r0, [r3, #28]
 8003900:	4b52      	ldr	r3, [pc, #328]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003902:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	b2d1      	uxtb	r1, r2
 800390a:	4a50      	ldr	r2, [pc, #320]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800390c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003910:	4619      	mov	r1, r3
 8003912:	b2c2      	uxtb	r2, r0
 8003914:	4b4d      	ldr	r3, [pc, #308]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003916:	440b      	add	r3, r1
 8003918:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		} break;
 800391c:	e297      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_MEASUER_START	  : { // LENGTH 0, Measurement Start
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 800391e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003920:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	b2d1      	uxtb	r1, r2
 8003928:	4a48      	ldr	r2, [pc, #288]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800392a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800392e:	461a      	mov	r2, r3
 8003930:	4b46      	ldr	r3, [pc, #280]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003932:	4413      	add	r3, r2
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		} break;
 800393a:	e288      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_MEASUER_STOP	  : { // LENGTH 0, Measurement Stop
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 800393c:	4b43      	ldr	r3, [pc, #268]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800393e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	b2d1      	uxtb	r1, r2
 8003946:	4a41      	ldr	r2, [pc, #260]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003948:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800394c:	461a      	mov	r2, r3
 800394e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003950:	4413      	add	r3, r2
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		} break;
 8003958:	e279      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
//			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x34; //52
//			AssmTxMsg_PmMesaureResult();
//		} break;

		case CMD_START_FAN_CLEAN : {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 800395a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800395c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	b2d1      	uxtb	r1, r2
 8003964:	4a39      	ldr	r2, [pc, #228]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003966:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800396a:	461a      	mov	r2, r3
 800396c:	4b37      	ldr	r3, [pc, #220]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800396e:	4413      	add	r3, r2
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003976:	e26a      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_GET_AT_CLEAN_SEC : {
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Auto Cleaning time U32bit
 8003978:	4b35      	ldr	r3, [pc, #212]	@ (8003a50 <RspAssamblyTxMsg+0x27c>)
 800397a:	7c1b      	ldrb	r3, [r3, #16]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d151      	bne.n	8003a24 <RspAssamblyTxMsg+0x250>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x04;
 8003980:	4b32      	ldr	r3, [pc, #200]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003982:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	b2d1      	uxtb	r1, r2
 800398a:	4a30      	ldr	r2, [pc, #192]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800398c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003990:	461a      	mov	r2, r3
 8003992:	4b2e      	ldr	r3, [pc, #184]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003994:	4413      	add	r3, r2
 8003996:	2204      	movs	r2, #4
 8003998:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleWorkTime >> 24) & 0xFF);
 800399c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a54 <RspAssamblyTxMsg+0x280>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	0e18      	lsrs	r0, r3, #24
 80039a2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039a4:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	b2d1      	uxtb	r1, r2
 80039ac:	4a27      	ldr	r2, [pc, #156]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039ae:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80039b2:	4619      	mov	r1, r3
 80039b4:	b2c2      	uxtb	r2, r0
 80039b6:	4b25      	ldr	r3, [pc, #148]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039b8:	440b      	add	r3, r1
 80039ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleWorkTime >> 16) & 0xFF);
 80039be:	4b25      	ldr	r3, [pc, #148]	@ (8003a54 <RspAssamblyTxMsg+0x280>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0c18      	lsrs	r0, r3, #16
 80039c4:	4b21      	ldr	r3, [pc, #132]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039c6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	b2d1      	uxtb	r1, r2
 80039ce:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039d0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80039d4:	4619      	mov	r1, r3
 80039d6:	b2c2      	uxtb	r2, r0
 80039d8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039da:	440b      	add	r3, r1
 80039dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleWorkTime >>  8) & 0xFF);
 80039e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a54 <RspAssamblyTxMsg+0x280>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	0a18      	lsrs	r0, r3, #8
 80039e6:	4b19      	ldr	r3, [pc, #100]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039e8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	b2d1      	uxtb	r1, r2
 80039f0:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039f2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80039f6:	4619      	mov	r1, r3
 80039f8:	b2c2      	uxtb	r2, r0
 80039fa:	4b14      	ldr	r3, [pc, #80]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039fc:	440b      	add	r3, r1
 80039fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleWorkTime      ) & 0xFF);
 8003a02:	4b14      	ldr	r3, [pc, #80]	@ (8003a54 <RspAssamblyTxMsg+0x280>)
 8003a04:	6898      	ldr	r0, [r3, #8]
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a08:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	b2d1      	uxtb	r1, r2
 8003a10:	4a0e      	ldr	r2, [pc, #56]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a12:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003a16:	4619      	mov	r1, r3
 8003a18:	b2c2      	uxtb	r2, r0
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003a22:	e205      	b.n	8003e30 <RspAssamblyTxMsg+0x65c>
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
 8003a24:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <RspAssamblyTxMsg+0x27c>)
 8003a26:	7c1b      	ldrb	r3, [r3, #16]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	f040 8201 	bne.w	8003e30 <RspAssamblyTxMsg+0x65c>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003a2e:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a30:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	b2d1      	uxtb	r1, r2
 8003a38:	4a04      	ldr	r2, [pc, #16]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a3a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4b02      	ldr	r3, [pc, #8]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a42:	4413      	add	r3, r2
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003a4a:	e1f1      	b.n	8003e30 <RspAssamblyTxMsg+0x65c>
 8003a4c:	20000570 	.word	0x20000570
 8003a50:	2000028c 	.word	0x2000028c
 8003a54:	200000b4 	.word	0x200000b4

		case CMD_AT_CLEAN_INTVAL : {
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Auto Cleaning Interval U32bit
 8003a58:	4baa      	ldr	r3, [pc, #680]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003a5a:	7c1b      	ldrb	r3, [r3, #16]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d151      	bne.n	8003b04 <RspAssamblyTxMsg+0x330>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x04;
 8003a60:	4ba9      	ldr	r3, [pc, #676]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a62:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	b2d1      	uxtb	r1, r2
 8003a6a:	4aa7      	ldr	r2, [pc, #668]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a6c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003a70:	461a      	mov	r2, r3
 8003a72:	4ba5      	ldr	r3, [pc, #660]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a74:	4413      	add	r3, r2
 8003a76:	2204      	movs	r2, #4
 8003a78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleInterval >> 24) & 0xFF);
 8003a7c:	4ba3      	ldr	r3, [pc, #652]	@ (8003d0c <RspAssamblyTxMsg+0x538>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	0e18      	lsrs	r0, r3, #24
 8003a82:	4ba1      	ldr	r3, [pc, #644]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a84:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	b2d1      	uxtb	r1, r2
 8003a8c:	4a9e      	ldr	r2, [pc, #632]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a8e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003a92:	4619      	mov	r1, r3
 8003a94:	b2c2      	uxtb	r2, r0
 8003a96:	4b9c      	ldr	r3, [pc, #624]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a98:	440b      	add	r3, r1
 8003a9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleInterval >> 16) & 0xFF);
 8003a9e:	4b9b      	ldr	r3, [pc, #620]	@ (8003d0c <RspAssamblyTxMsg+0x538>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	0c18      	lsrs	r0, r3, #16
 8003aa4:	4b98      	ldr	r3, [pc, #608]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003aa6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	b2d1      	uxtb	r1, r2
 8003aae:	4a96      	ldr	r2, [pc, #600]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ab0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	b2c2      	uxtb	r2, r0
 8003ab8:	4b93      	ldr	r3, [pc, #588]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003aba:	440b      	add	r3, r1
 8003abc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleInterval >>  8) & 0xFF);
 8003ac0:	4b92      	ldr	r3, [pc, #584]	@ (8003d0c <RspAssamblyTxMsg+0x538>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	0a18      	lsrs	r0, r3, #8
 8003ac6:	4b90      	ldr	r3, [pc, #576]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ac8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	b2d1      	uxtb	r1, r2
 8003ad0:	4a8d      	ldr	r2, [pc, #564]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ad2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	b2c2      	uxtb	r2, r0
 8003ada:	4b8b      	ldr	r3, [pc, #556]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003adc:	440b      	add	r3, r1
 8003ade:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleInterval      ) & 0xFF);
 8003ae2:	4b8a      	ldr	r3, [pc, #552]	@ (8003d0c <RspAssamblyTxMsg+0x538>)
 8003ae4:	68d8      	ldr	r0, [r3, #12]
 8003ae6:	4b88      	ldr	r3, [pc, #544]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ae8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	b2d1      	uxtb	r1, r2
 8003af0:	4a85      	ldr	r2, [pc, #532]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003af2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003af6:	4619      	mov	r1, r3
 8003af8:	b2c2      	uxtb	r2, r0
 8003afa:	4b83      	ldr	r3, [pc, #524]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003afc:	440b      	add	r3, r1
 8003afe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003b02:	e197      	b.n	8003e34 <RspAssamblyTxMsg+0x660>
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
 8003b04:	4b7f      	ldr	r3, [pc, #508]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003b06:	7c1b      	ldrb	r3, [r3, #16]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	f040 8193 	bne.w	8003e34 <RspAssamblyTxMsg+0x660>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003b0e:	4b7e      	ldr	r3, [pc, #504]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b10:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	b2d1      	uxtb	r1, r2
 8003b18:	4a7b      	ldr	r2, [pc, #492]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b1a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b79      	ldr	r3, [pc, #484]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b22:	4413      	add	r3, r2
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003b2a:	e183      	b.n	8003e34 <RspAssamblyTxMsg+0x660>

		case CMD_BOUNDARY_VOLT : {
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Boundary Voltage U16bit
 8003b2c:	4b75      	ldr	r3, [pc, #468]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003b2e:	7c1b      	ldrb	r3, [r3, #16]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d113      	bne.n	8003b5c <RspAssamblyTxMsg+0x388>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x04;
 8003b34:	4b74      	ldr	r3, [pc, #464]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b36:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	b2d1      	uxtb	r1, r2
 8003b3e:	4a72      	ldr	r2, [pc, #456]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b40:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b70      	ldr	r3, [pc, #448]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				AssmTxMsg_GetBoundaryVolt(tSysState.ClientReqSelCh);
 8003b50:	4b6c      	ldr	r3, [pc, #432]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003b52:	7bdb      	ldrb	r3, [r3, #15]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fa27 	bl	8002fa8 <AssmTxMsg_GetBoundaryVolt>
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Set Boundary Voltage U16bit
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003b5a:	e16d      	b.n	8003e38 <RspAssamblyTxMsg+0x664>
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Set Boundary Voltage U16bit
 8003b5c:	4b69      	ldr	r3, [pc, #420]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003b5e:	7c1b      	ldrb	r3, [r3, #16]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	f040 8169 	bne.w	8003e38 <RspAssamblyTxMsg+0x664>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003b66:	4b68      	ldr	r3, [pc, #416]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b68:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	b2d1      	uxtb	r1, r2
 8003b70:	4a65      	ldr	r2, [pc, #404]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b72:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003b76:	461a      	mov	r2, r3
 8003b78:	4b63      	ldr	r3, [pc, #396]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b7a:	4413      	add	r3, r2
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003b82:	e159      	b.n	8003e38 <RspAssamblyTxMsg+0x664>

		case CMD_PD_TEST_MODE : {
			if (OFF == tSysState.FlagGetAdcOn) { // LENGTH 0, PD Test Mode OFF
 8003b84:	4b5f      	ldr	r3, [pc, #380]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003b86:	79db      	ldrb	r3, [r3, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 8157 	bne.w	8003e3c <RspAssamblyTxMsg+0x668>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003b8e:	4b5e      	ldr	r3, [pc, #376]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b90:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	b2d1      	uxtb	r1, r2
 8003b98:	4a5b      	ldr	r2, [pc, #364]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b9a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b59      	ldr	r3, [pc, #356]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
		}break;
 8003baa:	e147      	b.n	8003e3c <RspAssamblyTxMsg+0x668>

		case CMD_SIPM_TEST_MODE : {
			if (OFF == tSysState.FlagGetAdcOn) { // LENGTH 0, SiPM Test Mode OFF
 8003bac:	4b55      	ldr	r3, [pc, #340]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003bae:	79db      	ldrb	r3, [r3, #7]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 8145 	bne.w	8003e40 <RspAssamblyTxMsg+0x66c>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003bb6:	4b54      	ldr	r3, [pc, #336]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bb8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	b2d1      	uxtb	r1, r2
 8003bc0:	4a51      	ldr	r2, [pc, #324]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bc2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bca:	4413      	add	r3, r2
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
		}break;
 8003bd2:	e135      	b.n	8003e40 <RspAssamblyTxMsg+0x66c>

		case CMD_SLEEP_MODE : {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // LENGTH 0, Sleep
 8003bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bd6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	b2d1      	uxtb	r1, r2
 8003bde:	4a4a      	ldr	r2, [pc, #296]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003be0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b48      	ldr	r3, [pc, #288]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003be8:	4413      	add	r3, r2
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003bf0:	e12d      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_WAKE_UP : {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // LENGTH 0, Wake up
 8003bf2:	4b45      	ldr	r3, [pc, #276]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bf4:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	b2d1      	uxtb	r1, r2
 8003bfc:	4a42      	ldr	r2, [pc, #264]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bfe:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b40      	ldr	r3, [pc, #256]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c06:	4413      	add	r3, r2
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003c0e:	e11e      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_DEVICE_INFO : {
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Auto Cleaning Interval U32bit
 8003c10:	4b3c      	ldr	r3, [pc, #240]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003c12:	7c1b      	ldrb	r3, [r3, #16]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d105      	bne.n	8003c24 <RspAssamblyTxMsg+0x450>
				AssmTxMsg_DeviceInfo(tSysState.ClientReqDevInfo);
 8003c18:	4b3a      	ldr	r3, [pc, #232]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003c1a:	7b9b      	ldrb	r3, [r3, #14]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fcbf 	bl	80035a0 <AssmTxMsg_DeviceInfo>
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003c22:	e10f      	b.n	8003e44 <RspAssamblyTxMsg+0x670>
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
 8003c24:	4b37      	ldr	r3, [pc, #220]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003c26:	7c1b      	ldrb	r3, [r3, #16]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	f040 810b 	bne.w	8003e44 <RspAssamblyTxMsg+0x670>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003c2e:	4b36      	ldr	r3, [pc, #216]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c30:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	b2d1      	uxtb	r1, r2
 8003c38:	4a33      	ldr	r2, [pc, #204]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c3a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b31      	ldr	r3, [pc, #196]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c42:	4413      	add	r3, r2
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003c4a:	e0fb      	b.n	8003e44 <RspAssamblyTxMsg+0x670>

		case CMD_DEVICE_VER : {
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Auto Cleaning Interval U32bit
 8003c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003c4e:	7c1b      	ldrb	r3, [r3, #16]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d15f      	bne.n	8003d14 <RspAssamblyTxMsg+0x540>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x05;
 8003c54:	4b2c      	ldr	r3, [pc, #176]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c56:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	b2d1      	uxtb	r1, r2
 8003c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c60:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b28      	ldr	r3, [pc, #160]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c68:	4413      	add	r3, r2
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = DEFAULT_FIRMWARE_MAJ_VERSION; //(uint8_t)(tConfig.FirmwareVer[0]);
 8003c70:	4b25      	ldr	r3, [pc, #148]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c72:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	b2d1      	uxtb	r1, r2
 8003c7a:	4a23      	ldr	r2, [pc, #140]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c7c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003c80:	461a      	mov	r2, r3
 8003c82:	4b21      	ldr	r3, [pc, #132]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c84:	4413      	add	r3, r2
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = DEFAULT_FIRMWARE_MIN_VERSION; //(uint8_t)(tConfig.FirmwareVer[1]);
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c8e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	b2d1      	uxtb	r1, r2
 8003c96:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c98:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ca0:	4413      	add	r3, r2
 8003ca2:	2209      	movs	r2, #9
 8003ca4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)(tConfig.FirmwareVer[2]);
 8003ca8:	4b17      	ldr	r3, [pc, #92]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003caa:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	b2d1      	uxtb	r1, r2
 8003cb2:	4a15      	ldr	r2, [pc, #84]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cb4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <RspAssamblyTxMsg+0x53c>)
 8003cbc:	7e9a      	ldrb	r2, [r3, #26]
 8003cbe:	4b12      	ldr	r3, [pc, #72]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cc0:	440b      	add	r3, r1
 8003cc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)(tConfig.FirmwareVer[3]);
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cc8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	b2d1      	uxtb	r1, r2
 8003cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cd2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <RspAssamblyTxMsg+0x53c>)
 8003cda:	7eda      	ldrb	r2, [r3, #27]
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cde:	440b      	add	r3, r1
 8003ce0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)(tConfig.FirmwareVer[4]);
 8003ce4:	4b08      	ldr	r3, [pc, #32]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ce6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	b2d1      	uxtb	r1, r2
 8003cee:	4a06      	ldr	r2, [pc, #24]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cf0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <RspAssamblyTxMsg+0x53c>)
 8003cf8:	7f1a      	ldrb	r2, [r3, #28]
 8003cfa:	4b03      	ldr	r3, [pc, #12]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003d02:	e0a1      	b.n	8003e48 <RspAssamblyTxMsg+0x674>
 8003d04:	2000028c 	.word	0x2000028c
 8003d08:	20000570 	.word	0x20000570
 8003d0c:	200000b4 	.word	0x200000b4
 8003d10:	20000030 	.word	0x20000030
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
 8003d14:	4b65      	ldr	r3, [pc, #404]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003d16:	7c1b      	ldrb	r3, [r3, #16]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	f040 8095 	bne.w	8003e48 <RspAssamblyTxMsg+0x674>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003d1e:	4b64      	ldr	r3, [pc, #400]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d20:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	b2d1      	uxtb	r1, r2
 8003d28:	4a61      	ldr	r2, [pc, #388]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d2a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d32:	4413      	add	r3, r2
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003d3a:	e085      	b.n	8003e48 <RspAssamblyTxMsg+0x674>

		case CMD_DEVICE_STATE : {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x02;
 8003d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d3e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	b2d1      	uxtb	r1, r2
 8003d46:	4a5a      	ldr	r2, [pc, #360]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d48:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b58      	ldr	r3, [pc, #352]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d50:	4413      	add	r3, r2
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tSysState.DeviceState >>  8) & 0xFF);
 8003d58:	4b54      	ldr	r3, [pc, #336]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003d5a:	8b9b      	ldrh	r3, [r3, #28]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b298      	uxth	r0, r3
 8003d60:	4b53      	ldr	r3, [pc, #332]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d62:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	b2d1      	uxtb	r1, r2
 8003d6a:	4a51      	ldr	r2, [pc, #324]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d6c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003d70:	4619      	mov	r1, r3
 8003d72:	b2c2      	uxtb	r2, r0
 8003d74:	4b4e      	ldr	r3, [pc, #312]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d76:	440b      	add	r3, r1
 8003d78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tSysState.DeviceState      ) & 0xFF);
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003d7e:	8b98      	ldrh	r0, [r3, #28]
 8003d80:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d82:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	b2d1      	uxtb	r1, r2
 8003d8a:	4a49      	ldr	r2, [pc, #292]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d8c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003d90:	4619      	mov	r1, r3
 8003d92:	b2c2      	uxtb	r2, r0
 8003d94:	4b46      	ldr	r3, [pc, #280]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d96:	440b      	add	r3, r1
 8003d98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003d9c:	e057      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_SET_CORRECTION_VAL :
		{
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Boundary Voltage U16bit
 8003d9e:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003da0:	7c1b      	ldrb	r3, [r3, #16]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d113      	bne.n	8003dce <RspAssamblyTxMsg+0x5fa>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x05;
 8003da6:	4b42      	ldr	r3, [pc, #264]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003da8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	b2d1      	uxtb	r1, r2
 8003db0:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003db2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003dba:	4413      	add	r3, r2
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

				AssmTxMsg_GetAdjustCal(tSysState.ClientReqSelCh);
 8003dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003dc4:	7bdb      	ldrb	r3, [r3, #15]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff faf0 	bl	80033ac <AssmTxMsg_GetAdjustCal>
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Set Boundary Voltage U16bit
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003dcc:	e03e      	b.n	8003e4c <RspAssamblyTxMsg+0x678>
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Set Boundary Voltage U16bit
 8003dce:	4b37      	ldr	r3, [pc, #220]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003dd0:	7c1b      	ldrb	r3, [r3, #16]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d13a      	bne.n	8003e4c <RspAssamblyTxMsg+0x678>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003dd6:	4b36      	ldr	r3, [pc, #216]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003dd8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	b2d1      	uxtb	r1, r2
 8003de0:	4a33      	ldr	r2, [pc, #204]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003de2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b31      	ldr	r3, [pc, #196]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003dea:	4413      	add	r3, r2
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003df2:	e02b      	b.n	8003e4c <RspAssamblyTxMsg+0x678>

		case CMD_SOFT_RESET: {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003df4:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003df6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	b2d1      	uxtb	r1, r2
 8003dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e00:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003e10:	e01d      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_SET_FIRMWARE_DOWNLOAD: {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003e12:	4b27      	ldr	r3, [pc, #156]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e14:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	b2d1      	uxtb	r1, r2
 8003e1c:	4a24      	ldr	r2, [pc, #144]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e1e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b22      	ldr	r3, [pc, #136]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e26:	4413      	add	r3, r2
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003e2e:	e00e      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e30:	bf00      	nop
 8003e32:	e00c      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e34:	bf00      	nop
 8003e36:	e00a      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e38:	bf00      	nop
 8003e3a:	e008      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e3c:	bf00      	nop
 8003e3e:	e006      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e40:	bf00      	nop
 8003e42:	e004      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e44:	bf00      	nop
 8003e46:	e002      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e4c:	bf00      	nop
	}

	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = UART_Chksum((uint8_t *)tMsgPkt.Txbuff, tMsgPkt.TxMsgCnt); 	// CHECKSUM
 8003e4e:	4b18      	ldr	r3, [pc, #96]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e50:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8003e54:	4b16      	ldr	r3, [pc, #88]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e56:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003e5a:	1c59      	adds	r1, r3, #1
 8003e5c:	b2c8      	uxtb	r0, r1
 8003e5e:	4914      	ldr	r1, [pc, #80]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e60:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 8003e64:	461c      	mov	r4, r3
 8003e66:	4611      	mov	r1, r2
 8003e68:	4812      	ldr	r0, [pc, #72]	@ (8003eb4 <RspAssamblyTxMsg+0x6e0>)
 8003e6a:	f001 fef7 	bl	8005c5c <UART_Chksum>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461a      	mov	r2, r3
 8003e72:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e74:	4423      	add	r3, r4
 8003e76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	UART_StuffAssambly();
 8003e7a:	f001 fe31 	bl	8005ae0 <UART_StuffAssambly>
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX; 	// ETX
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e80:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	b2d1      	uxtb	r1, r2
 8003e88:	4a09      	ldr	r2, [pc, #36]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e8a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e92:	4413      	add	r3, r2
 8003e94:	22c2      	movs	r2, #194	@ 0xc2
 8003e96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	tMsgPkt.FlagTxPktOn = ON;
 8003e9a:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd90      	pop	{r4, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	2000028c 	.word	0x2000028c
 8003eb0:	20000570 	.word	0x20000570
 8003eb4:	200005f0 	.word	0x200005f0

08003eb8 <Manual_GetAdcMsg>:

void Manual_GetAdcMsg(void)
{
 8003eb8:	b598      	push	{r3, r4, r7, lr}
 8003eba:	af00      	add	r7, sp, #0
	if (ON == tSysState.FlagGetAdcOn)
 8003ebc:	4bb9      	ldr	r3, [pc, #740]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003ebe:	79db      	ldrb	r3, [r3, #7]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f040 80ef 	bne.w	80040a4 <Manual_GetAdcMsg+0x1ec>
	{
		if (OFF == tSysState.FlagLoopOn)
 8003ec6:	4bb7      	ldr	r3, [pc, #732]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003ec8:	7a1b      	ldrb	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <Manual_GetAdcMsg+0x24>
		{
			UART_TxInit();
 8003ece:	f001 fab3 	bl	8005438 <UART_TxInit>
			WaitTime_Init();
 8003ed2:	f7fe fb6d 	bl	80025b0 <WaitTime_Init>
			tSysState.FlagLoopOn = ON;
 8003ed6:	4bb3      	ldr	r3, [pc, #716]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	721a      	strb	r2, [r3, #8]
		}

		//if ( TRUE == WaitHoldTime_mSec(ON, UART_MSG_SEND_ADC_TIME) )
		if(ON == m_FlagAdcSendOn)
 8003edc:	4bb2      	ldr	r3, [pc, #712]	@ (80041a8 <Manual_GetAdcMsg+0x2f0>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	f040 80cf 	bne.w	8004084 <Manual_GetAdcMsg+0x1cc>
		{
			//Check Get ADC

			// HEADER
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;
 8003ee6:	4bb1      	ldr	r3, [pc, #708]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003ee8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	b2d1      	uxtb	r1, r2
 8003ef0:	4aae      	ldr	r2, [pc, #696]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003ef2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4bac      	ldr	r3, [pc, #688]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003efa:	4413      	add	r3, r2
 8003efc:	22c0      	movs	r2, #192	@ 0xc0
 8003efe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // ADDR
 8003f02:	4baa      	ldr	r3, [pc, #680]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f04:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	b2d1      	uxtb	r1, r2
 8003f0c:	4aa7      	ldr	r2, [pc, #668]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f0e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003f12:	461a      	mov	r2, r3
 8003f14:	4ba5      	ldr	r3, [pc, #660]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f16:	4413      	add	r3, r2
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tSysState.SelGetAdcCh;
 8003f1e:	4ba3      	ldr	r3, [pc, #652]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f20:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	b2d1      	uxtb	r1, r2
 8003f28:	4aa0      	ldr	r2, [pc, #640]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f2a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4b9c      	ldr	r3, [pc, #624]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003f32:	799a      	ldrb	r2, [r3, #6]
 8003f34:	4b9d      	ldr	r3, [pc, #628]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f36:	440b      	add	r3, r1
 8003f38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // MSG STATE
 8003f3c:	4b9b      	ldr	r3, [pc, #620]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f3e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	b2d1      	uxtb	r1, r2
 8003f46:	4a99      	ldr	r2, [pc, #612]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f48:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b97      	ldr	r3, [pc, #604]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f50:	4413      	add	r3, r2
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x02; // Length
 8003f58:	4b94      	ldr	r3, [pc, #592]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f5a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	b2d1      	uxtb	r1, r2
 8003f62:	4a92      	ldr	r2, [pc, #584]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f64:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b90      	ldr	r3, [pc, #576]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			if(ADC_GET_PD_CH == tSysState.SelGetAdcCh){
 8003f74:	4b8b      	ldr	r3, [pc, #556]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003f76:	799b      	ldrb	r3, [r3, #6]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d125      	bne.n	8003fc8 <Manual_GetAdcMsg+0x110>
				//tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (tPdCtrl.CurrAdcVal >> 8) & 0xFF);
				//tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (tPdCtrl.CurrAdcVal 	) & 0xFF);
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (m_PeckPDAdVal >> 8) & 0xFF);
 8003f7c:	4b8c      	ldr	r3, [pc, #560]	@ (80041b0 <Manual_GetAdcMsg+0x2f8>)
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	0a1b      	lsrs	r3, r3, #8
 8003f82:	b298      	uxth	r0, r3
 8003f84:	4b89      	ldr	r3, [pc, #548]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f86:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	b2d1      	uxtb	r1, r2
 8003f8e:	4a87      	ldr	r2, [pc, #540]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f90:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003f94:	4619      	mov	r1, r3
 8003f96:	b2c2      	uxtb	r2, r0
 8003f98:	4b84      	ldr	r3, [pc, #528]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (m_PeckPDAdVal) 	 & 0xFF);
 8003fa0:	4b83      	ldr	r3, [pc, #524]	@ (80041b0 <Manual_GetAdcMsg+0x2f8>)
 8003fa2:	8818      	ldrh	r0, [r3, #0]
 8003fa4:	4b81      	ldr	r3, [pc, #516]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fa6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	b2d1      	uxtb	r1, r2
 8003fae:	4a7f      	ldr	r2, [pc, #508]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fb0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	b2c2      	uxtb	r2, r0
 8003fb8:	4b7c      	ldr	r3, [pc, #496]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fba:	440b      	add	r3, r1
 8003fbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				m_FlagDectPeckOn = OFF;
 8003fc0:	4b7c      	ldr	r3, [pc, #496]	@ (80041b4 <Manual_GetAdcMsg+0x2fc>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e028      	b.n	800401a <Manual_GetAdcMsg+0x162>
			}
			else if(ADC_GET_SiPM_CH == tSysState.SelGetAdcCh){
 8003fc8:	4b76      	ldr	r3, [pc, #472]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003fca:	799b      	ldrb	r3, [r3, #6]
 8003fcc:	2b09      	cmp	r3, #9
 8003fce:	d124      	bne.n	800401a <Manual_GetAdcMsg+0x162>
				//tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (tSiPmCtrl.CurrAdcVal >> 8) & 0xFF);
				//tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (tSiPmCtrl.CurrAdcVal) 		& 0xFF);
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (m_PeckSiPMAdVal >> 8)  & 0xFF);
 8003fd0:	4b79      	ldr	r3, [pc, #484]	@ (80041b8 <Manual_GetAdcMsg+0x300>)
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	b298      	uxth	r0, r3
 8003fd8:	4b74      	ldr	r3, [pc, #464]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fda:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	b2d1      	uxtb	r1, r2
 8003fe2:	4a72      	ldr	r2, [pc, #456]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fe4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003fe8:	4619      	mov	r1, r3
 8003fea:	b2c2      	uxtb	r2, r0
 8003fec:	4b6f      	ldr	r3, [pc, #444]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fee:	440b      	add	r3, r1
 8003ff0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (m_PeckSiPMAdVal) 	 	& 0xFF);
 8003ff4:	4b70      	ldr	r3, [pc, #448]	@ (80041b8 <Manual_GetAdcMsg+0x300>)
 8003ff6:	8818      	ldrh	r0, [r3, #0]
 8003ff8:	4b6c      	ldr	r3, [pc, #432]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003ffa:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	b2d1      	uxtb	r1, r2
 8004002:	4a6a      	ldr	r2, [pc, #424]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004004:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8004008:	4619      	mov	r1, r3
 800400a:	b2c2      	uxtb	r2, r0
 800400c:	4b67      	ldr	r3, [pc, #412]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800400e:	440b      	add	r3, r1
 8004010:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				m_FlagDectPeckOn2 = OFF;
 8004014:	4b69      	ldr	r3, [pc, #420]	@ (80041bc <Manual_GetAdcMsg+0x304>)
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
			}

			//FOOTER
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = UART_Chksum((uint8_t *)tMsgPkt.Txbuff, tMsgPkt.TxMsgCnt);
 800401a:	4b64      	ldr	r3, [pc, #400]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800401c:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8004020:	4b62      	ldr	r3, [pc, #392]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004022:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004026:	1c59      	adds	r1, r3, #1
 8004028:	b2c8      	uxtb	r0, r1
 800402a:	4960      	ldr	r1, [pc, #384]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800402c:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 8004030:	461c      	mov	r4, r3
 8004032:	4611      	mov	r1, r2
 8004034:	4862      	ldr	r0, [pc, #392]	@ (80041c0 <Manual_GetAdcMsg+0x308>)
 8004036:	f001 fe11 	bl	8005c5c <UART_Chksum>
 800403a:	4603      	mov	r3, r0
 800403c:	461a      	mov	r2, r3
 800403e:	4b5b      	ldr	r3, [pc, #364]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004040:	4423      	add	r3, r4
 8004042:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			UART_StuffAssambly();
 8004046:	f001 fd4b 	bl	8005ae0 <UART_StuffAssambly>
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX;
 800404a:	4b58      	ldr	r3, [pc, #352]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800404c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	b2d1      	uxtb	r1, r2
 8004054:	4a55      	ldr	r2, [pc, #340]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004056:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800405a:	461a      	mov	r2, r3
 800405c:	4b53      	ldr	r3, [pc, #332]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800405e:	4413      	add	r3, r2
 8004060:	22c2      	movs	r2, #194	@ 0xc2
 8004062:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			tMsgPkt.FlagTxPktOn = ON;
 8004066:	4b51      	ldr	r3, [pc, #324]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
			tPdCtrl.ChkCount = 0;
 800406e:	4b55      	ldr	r3, [pc, #340]	@ (80041c4 <Manual_GetAdcMsg+0x30c>)
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
			WaitTime_Init();
 8004074:	f7fe fa9c 	bl	80025b0 <WaitTime_Init>
			Calc_Init();
 8004078:	f7fd fbfe 	bl	8001878 <Calc_Init>


			m_FlagAdcSendOn = OFF;
 800407c:	4b4a      	ldr	r3, [pc, #296]	@ (80041a8 <Manual_GetAdcMsg+0x2f0>)
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
		tMsgPkt.FlagTxPktOn = ON;
		WaitTime_Init();
		tPdCtrl.ChkCount = 0;
		m_SysProcSeq = SYS_SEQ_STANDBY_MODE;
	}
}
 8004082:	e08c      	b.n	800419e <Manual_GetAdcMsg+0x2e6>
			if(ADC_GET_PD_CH == tSysState.SelGetAdcCh){ RngOfPdAdcSamplingVal(tPdCtrl.CurrAdcVal); 	 	 }
 8004084:	4b47      	ldr	r3, [pc, #284]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8004086:	799b      	ldrb	r3, [r3, #6]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d105      	bne.n	8004098 <Manual_GetAdcMsg+0x1e0>
 800408c:	4b4d      	ldr	r3, [pc, #308]	@ (80041c4 <Manual_GetAdcMsg+0x30c>)
 800408e:	88db      	ldrh	r3, [r3, #6]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fa8d 	bl	80045b0 <RngOfPdAdcSamplingVal>
}
 8004096:	e082      	b.n	800419e <Manual_GetAdcMsg+0x2e6>
			else 									  {	RngOfSiPmAdcSamplingVal(tSiPmCtrl.CurrAdcVal);	 }
 8004098:	4b4b      	ldr	r3, [pc, #300]	@ (80041c8 <Manual_GetAdcMsg+0x310>)
 800409a:	88db      	ldrh	r3, [r3, #6]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fb55 	bl	800474c <RngOfSiPmAdcSamplingVal>
}
 80040a2:	e07c      	b.n	800419e <Manual_GetAdcMsg+0x2e6>
		UART_TxInit();
 80040a4:	f001 f9c8 	bl	8005438 <UART_TxInit>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;
 80040a8:	4b40      	ldr	r3, [pc, #256]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040aa:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	b2d1      	uxtb	r1, r2
 80040b2:	4a3e      	ldr	r2, [pc, #248]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040b4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b3c      	ldr	r3, [pc, #240]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040bc:	4413      	add	r3, r2
 80040be:	22c0      	movs	r2, #192	@ 0xc0
 80040c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // ADDR
 80040c4:	4b39      	ldr	r3, [pc, #228]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040c6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	b2d1      	uxtb	r1, r2
 80040ce:	4a37      	ldr	r2, [pc, #220]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040d0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b35      	ldr	r3, [pc, #212]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040d8:	4413      	add	r3, r2
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tSysState.SelGetAdcCh;
 80040e0:	4b32      	ldr	r3, [pc, #200]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040e2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	b2d1      	uxtb	r1, r2
 80040ea:	4a30      	ldr	r2, [pc, #192]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040ec:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80040f0:	4619      	mov	r1, r3
 80040f2:	4b2c      	ldr	r3, [pc, #176]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 80040f4:	799a      	ldrb	r2, [r3, #6]
 80040f6:	4b2d      	ldr	r3, [pc, #180]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040f8:	440b      	add	r3, r1
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tMsgPkt.MsgState; // MSG STATE
 80040fe:	4b2b      	ldr	r3, [pc, #172]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004100:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	b2d1      	uxtb	r1, r2
 8004108:	4a28      	ldr	r2, [pc, #160]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800410a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800410e:	4619      	mov	r1, r3
 8004110:	4b26      	ldr	r3, [pc, #152]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004112:	f893 210a 	ldrb.w	r2, [r3, #266]	@ 0x10a
 8004116:	4b25      	ldr	r3, [pc, #148]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004118:	440b      	add	r3, r1
 800411a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // Length
 800411e:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004120:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	b2d1      	uxtb	r1, r2
 8004128:	4a20      	ldr	r2, [pc, #128]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800412a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800412e:	461a      	mov	r2, r3
 8004130:	4b1e      	ldr	r3, [pc, #120]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004132:	4413      	add	r3, r2
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = UART_Chksum((uint8_t *)tMsgPkt.Txbuff, tMsgPkt.TxMsgCnt);
 800413a:	4b1c      	ldr	r3, [pc, #112]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800413c:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8004140:	4b1a      	ldr	r3, [pc, #104]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004142:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004146:	1c59      	adds	r1, r3, #1
 8004148:	b2c8      	uxtb	r0, r1
 800414a:	4918      	ldr	r1, [pc, #96]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800414c:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 8004150:	461c      	mov	r4, r3
 8004152:	4611      	mov	r1, r2
 8004154:	481a      	ldr	r0, [pc, #104]	@ (80041c0 <Manual_GetAdcMsg+0x308>)
 8004156:	f001 fd81 	bl	8005c5c <UART_Chksum>
 800415a:	4603      	mov	r3, r0
 800415c:	461a      	mov	r2, r3
 800415e:	4b13      	ldr	r3, [pc, #76]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004160:	4423      	add	r3, r4
 8004162:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		UART_StuffAssambly();
 8004166:	f001 fcbb 	bl	8005ae0 <UART_StuffAssambly>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX;
 800416a:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800416c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	b2d1      	uxtb	r1, r2
 8004174:	4a0d      	ldr	r2, [pc, #52]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004176:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800417a:	461a      	mov	r2, r3
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800417e:	4413      	add	r3, r2
 8004180:	22c2      	movs	r2, #194	@ 0xc2
 8004182:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.FlagTxPktOn = ON;
 8004186:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
		WaitTime_Init();
 800418e:	f7fe fa0f 	bl	80025b0 <WaitTime_Init>
		tPdCtrl.ChkCount = 0;
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <Manual_GetAdcMsg+0x30c>)
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]
		m_SysProcSeq = SYS_SEQ_STANDBY_MODE;
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <Manual_GetAdcMsg+0x314>)
 800419a:	2240      	movs	r2, #64	@ 0x40
 800419c:	701a      	strb	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	bd98      	pop	{r3, r4, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	2000028c 	.word	0x2000028c
 80041a8:	200002e0 	.word	0x200002e0
 80041ac:	20000570 	.word	0x20000570
 80041b0:	200002da 	.word	0x200002da
 80041b4:	200002de 	.word	0x200002de
 80041b8:	200002dc 	.word	0x200002dc
 80041bc:	200002df 	.word	0x200002df
 80041c0:	200005f0 	.word	0x200005f0
 80041c4:	20000074 	.word	0x20000074
 80041c8:	200000a4 	.word	0x200000a4
 80041cc:	200002d5 	.word	0x200002d5

080041d0 <PostMessage_Proc>:

void PostMessage_Proc(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
	if(ON == tMsgPkt.FlagRxPktOn)
 80041d4:	4bb3      	ldr	r3, [pc, #716]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80041d6:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80041da:	2b01      	cmp	r3, #1
 80041dc:	f040 81c4 	bne.w	8004568 <PostMessage_Proc+0x398>
	{
		switch(tMsgPkt.Cmd)
 80041e0:	4bb0      	ldr	r3, [pc, #704]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80041e2:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	dc2a      	bgt.n	8004240 <PostMessage_Proc+0x70>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f2c0 81b6 	blt.w	800455c <PostMessage_Proc+0x38c>
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	f200 81b3 	bhi.w	800455c <PostMessage_Proc+0x38c>
 80041f6:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <PostMessage_Proc+0x2c>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004249 	.word	0x08004249
 8004200:	08004257 	.word	0x08004257
 8004204:	08004275 	.word	0x08004275
 8004208:	0800429d 	.word	0x0800429d
 800420c:	080042af 	.word	0x080042af
 8004210:	080042b7 	.word	0x080042b7
 8004214:	080042cb 	.word	0x080042cb
 8004218:	0800433b 	.word	0x0800433b
 800421c:	08004383 	.word	0x08004383
 8004220:	080043bd 	.word	0x080043bd
 8004224:	080043f7 	.word	0x080043f7
 8004228:	0800440b 	.word	0x0800440b
 800422c:	0800441f 	.word	0x0800441f
 8004230:	08004471 	.word	0x08004471
 8004234:	080044b5 	.word	0x080044b5
 8004238:	08004533 	.word	0x08004533
 800423c:	080044d3 	.word	0x080044d3
 8004240:	2bf0      	cmp	r3, #240	@ 0xf0
 8004242:	f000 816a 	beq.w	800451a <PostMessage_Proc+0x34a>
 8004246:	e189      	b.n	800455c <PostMessage_Proc+0x38c>
		{
			case CMD_BIT_MANUAL_START :
			{
				tSysState.FlagBitChkOn = ON;
 8004248:	4b97      	ldr	r3, [pc, #604]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800424a:	2201      	movs	r2, #1
 800424c:	749a      	strb	r2, [r3, #18]
				m_SysProcSeq = SYS_SEQ_IDLE;
 800424e:	4b97      	ldr	r3, [pc, #604]	@ (80044ac <PostMessage_Proc+0x2dc>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
			}break;
 8004254:	e182      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_MEASUER_START :
			{
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004256:	4b93      	ldr	r3, [pc, #588]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004258:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fab9 	bl	80037d4 <RspAssamblyTxMsg>
				Measure_Start();
 8004262:	f7fe fe2d 	bl	8002ec0 <Measure_Start>
				tSysState.FlagOperModeOn = ON;
 8004266:	4b90      	ldr	r3, [pc, #576]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004268:	2201      	movs	r2, #1
 800426a:	72da      	strb	r2, [r3, #11]
				m_SysProcSeq = SYS_SEQ_OPRATION_MODE;
 800426c:	4b8f      	ldr	r3, [pc, #572]	@ (80044ac <PostMessage_Proc+0x2dc>)
 800426e:	2250      	movs	r2, #80	@ 0x50
 8004270:	701a      	strb	r2, [r3, #0]
 			}break;
 8004272:	e173      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_MEASUER_STOP :
			{
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004274:	4b8b      	ldr	r3, [pc, #556]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004276:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff faaa 	bl	80037d4 <RspAssamblyTxMsg>
				Measure_Stop();
 8004280:	f7fe fe58 	bl	8002f34 <Measure_Stop>
				tSysState.FlagOperModeOn = OFF;
 8004284:	4b88      	ldr	r3, [pc, #544]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004286:	2200      	movs	r2, #0
 8004288:	72da      	strb	r2, [r3, #11]
				SetCfg_CurrentFanUseTime(tFan.CleWorkTime);
 800428a:	4b89      	ldr	r3, [pc, #548]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd fdd2 	bl	8001e38 <SetCfg_CurrentFanUseTime>
				m_SysProcSeq = SYS_SEQ_STANDBY_MODE;
 8004294:	4b85      	ldr	r3, [pc, #532]	@ (80044ac <PostMessage_Proc+0x2dc>)
 8004296:	2240      	movs	r2, #64	@ 0x40
 8004298:	701a      	strb	r2, [r3, #0]
 			}break;
 800429a:	e15f      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_MEASUER_READ_VAL :
			{
				Measure_Start();
 800429c:	f7fe fe10 	bl	8002ec0 <Measure_Start>
				tSysState.FlagSendPmResultOn = ON;
 80042a0:	4b81      	ldr	r3, [pc, #516]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	729a      	strb	r2, [r3, #10]
				m_SysProcSeq = SYS_SEQ_OPRATION_MODE;
 80042a6:	4b81      	ldr	r3, [pc, #516]	@ (80044ac <PostMessage_Proc+0x2dc>)
 80042a8:	2250      	movs	r2, #80	@ 0x50
 80042aa:	701a      	strb	r2, [r3, #0]
			}break;
 80042ac:	e156      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_START_FAN_CLEAN :
			{
				m_SysProcSeq = SYS_SEQ_MANUAL_FAN_CLEAN_MODE;
 80042ae:	4b7f      	ldr	r3, [pc, #508]	@ (80044ac <PostMessage_Proc+0x2dc>)
 80042b0:	2264      	movs	r2, #100	@ 0x64
 80042b2:	701a      	strb	r2, [r3, #0]
			}break;
 80042b4:	e152      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_GET_AT_CLEAN_SEC :
			{
				tSysState.ClientReqType = CLIENT_REQ_GET;
 80042b6:	4b7c      	ldr	r3, [pc, #496]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	741a      	strb	r2, [r3, #16]
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 80042bc:	4b79      	ldr	r3, [pc, #484]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80042be:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fa86 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 80042c8:	e148      	b.n	800455c <PostMessage_Proc+0x38c>


			case CMD_AT_CLEAN_INTVAL :
			{
				if (0x01 == tMsgPkt.Leng) {tSysState.ClientReqType = CLIENT_REQ_GET;}
 80042ca:	4b76      	ldr	r3, [pc, #472]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80042cc:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <PostMessage_Proc+0x10a>
 80042d4:	4b74      	ldr	r3, [pc, #464]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	741a      	strb	r2, [r3, #16]
				if (0x05 == tMsgPkt.Leng)
 80042da:	4b72      	ldr	r3, [pc, #456]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80042dc:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d123      	bne.n	800432c <PostMessage_Proc+0x15c>
				{
					tSysState.ClientReqType = CLIENT_REQ_SET;
 80042e4:	4b70      	ldr	r3, [pc, #448]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80042e6:	2202      	movs	r2, #2
 80042e8:	741a      	strb	r2, [r3, #16]

					tFan.CleInterval  = (uint32_t)( tMsgPkt.RxBuff[5] << 24);
 80042ea:	4b6e      	ldr	r3, [pc, #440]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80042ec:	795b      	ldrb	r3, [r3, #5]
 80042ee:	061b      	lsls	r3, r3, #24
 80042f0:	4a6f      	ldr	r2, [pc, #444]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 80042f2:	60d3      	str	r3, [r2, #12]
					tFan.CleInterval |= (uint32_t)( tMsgPkt.RxBuff[6] << 16);
 80042f4:	4b6e      	ldr	r3, [pc, #440]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	4b6a      	ldr	r3, [pc, #424]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80042fa:	799b      	ldrb	r3, [r3, #6]
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	4313      	orrs	r3, r2
 8004300:	4a6b      	ldr	r2, [pc, #428]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004302:	60d3      	str	r3, [r2, #12]
					tFan.CleInterval |= (uint32_t)( tMsgPkt.RxBuff[7] << 8);
 8004304:	4b6a      	ldr	r3, [pc, #424]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	4b66      	ldr	r3, [pc, #408]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800430a:	79db      	ldrb	r3, [r3, #7]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	4313      	orrs	r3, r2
 8004310:	4a67      	ldr	r2, [pc, #412]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004312:	60d3      	str	r3, [r2, #12]
					tFan.CleInterval |= (uint32_t)( tMsgPkt.RxBuff[8] );
 8004314:	4b66      	ldr	r3, [pc, #408]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a62      	ldr	r2, [pc, #392]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800431a:	7a12      	ldrb	r2, [r2, #8]
 800431c:	4313      	orrs	r3, r2
 800431e:	4a64      	ldr	r2, [pc, #400]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004320:	60d3      	str	r3, [r2, #12]

					SetCfg_CurrentFanInterValTime(tFan.CleInterval);
 8004322:	4b63      	ldr	r3, [pc, #396]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd fd9a 	bl	8001e60 <SetCfg_CurrentFanInterValTime>
				}

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 800432c:	4b5d      	ldr	r3, [pc, #372]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800432e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fa4e 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 8004338:	e110      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_BOUNDARY_VOLT :
			{
				if (0x02 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET; tSysState.ClientReqSelCh = tMsgPkt.RxBuff[5]; }
 800433a:	4b5a      	ldr	r3, [pc, #360]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800433c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004340:	2b02      	cmp	r3, #2
 8004342:	d106      	bne.n	8004352 <PostMessage_Proc+0x182>
 8004344:	4b58      	ldr	r3, [pc, #352]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004346:	2201      	movs	r2, #1
 8004348:	741a      	strb	r2, [r3, #16]
 800434a:	4b56      	ldr	r3, [pc, #344]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800434c:	795a      	ldrb	r2, [r3, #5]
 800434e:	4b56      	ldr	r3, [pc, #344]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004350:	73da      	strb	r2, [r3, #15]
				if (0x04 == tMsgPkt.Leng)
 8004352:	4b54      	ldr	r3, [pc, #336]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004354:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004358:	2b04      	cmp	r3, #4
 800435a:	d10b      	bne.n	8004374 <PostMessage_Proc+0x1a4>
				{
					tSysState.ClientReqType = CLIENT_REQ_SET;
 800435c:	4b52      	ldr	r3, [pc, #328]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800435e:	2202      	movs	r2, #2
 8004360:	741a      	strb	r2, [r3, #16]
					tSysState.ClientReqSelCh = tMsgPkt.RxBuff[5];
 8004362:	4b50      	ldr	r3, [pc, #320]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004364:	795a      	ldrb	r2, [r3, #5]
 8004366:	4b50      	ldr	r3, [pc, #320]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004368:	73da      	strb	r2, [r3, #15]

					SetBoundaryVolt(tSysState.ClientReqSelCh);
 800436a:	4b4f      	ldr	r3, [pc, #316]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800436c:	7bdb      	ldrb	r3, [r3, #15]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe ff52 	bl	8003218 <SetBoundaryVolt>
				}

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004374:	4b4b      	ldr	r3, [pc, #300]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004376:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fa2a 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 8004380:	e0ec      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_PD_TEST_MODE :
			{
				if(SYS_SEQ_OPRATION_MODE != m_SysProcSeq)
 8004382:	4b4a      	ldr	r3, [pc, #296]	@ (80044ac <PostMessage_Proc+0x2dc>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b50      	cmp	r3, #80	@ 0x50
 8004388:	f000 80e5 	beq.w	8004556 <PostMessage_Proc+0x386>
				{
					if(ON == tMsgPkt.RxBuff[5]) 	{ Measure_Start(); FAN_Ctrl(LO, ON);  }
 800438c:	4b45      	ldr	r3, [pc, #276]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800438e:	795b      	ldrb	r3, [r3, #5]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d106      	bne.n	80043a2 <PostMessage_Proc+0x1d2>
 8004394:	f7fe fd94 	bl	8002ec0 <Measure_Start>
 8004398:	2101      	movs	r1, #1
 800439a:	2000      	movs	r0, #0
 800439c:	f7fd f9d6 	bl	800174c <FAN_Ctrl>
 80043a0:	e005      	b.n	80043ae <PostMessage_Proc+0x1de>
					else							{ Measure_Stop();  FAN_Ctrl(LO, OFF); }
 80043a2:	f7fe fdc7 	bl	8002f34 <Measure_Stop>
 80043a6:	2100      	movs	r1, #0
 80043a8:	2000      	movs	r0, #0
 80043aa:	f7fd f9cf 	bl	800174c <FAN_Ctrl>

					tSysState.SelGetAdcCh = ADC_GET_PD_CH;
 80043ae:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80043b0:	2208      	movs	r2, #8
 80043b2:	719a      	strb	r2, [r3, #6]
					m_SysProcSeq = SYS_SEQ_GET_ADC_TEST_MODE;
 80043b4:	4b3d      	ldr	r3, [pc, #244]	@ (80044ac <PostMessage_Proc+0x2dc>)
 80043b6:	2270      	movs	r2, #112	@ 0x70
 80043b8:	701a      	strb	r2, [r3, #0]
				}
			}break;
 80043ba:	e0cc      	b.n	8004556 <PostMessage_Proc+0x386>

			case CMD_SIPM_TEST_MODE :
			{
				if(SYS_SEQ_OPRATION_MODE != m_SysProcSeq)
 80043bc:	4b3b      	ldr	r3, [pc, #236]	@ (80044ac <PostMessage_Proc+0x2dc>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b50      	cmp	r3, #80	@ 0x50
 80043c2:	f000 80ca 	beq.w	800455a <PostMessage_Proc+0x38a>
				{
					if(ON == tMsgPkt.RxBuff[5])  	{ Measure_Start();  FAN_Ctrl(LO, ON);  }
 80043c6:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80043c8:	795b      	ldrb	r3, [r3, #5]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d106      	bne.n	80043dc <PostMessage_Proc+0x20c>
 80043ce:	f7fe fd77 	bl	8002ec0 <Measure_Start>
 80043d2:	2101      	movs	r1, #1
 80043d4:	2000      	movs	r0, #0
 80043d6:	f7fd f9b9 	bl	800174c <FAN_Ctrl>
 80043da:	e005      	b.n	80043e8 <PostMessage_Proc+0x218>
					else							{ Measure_Stop();   FAN_Ctrl(LO, OFF); }
 80043dc:	f7fe fdaa 	bl	8002f34 <Measure_Stop>
 80043e0:	2100      	movs	r1, #0
 80043e2:	2000      	movs	r0, #0
 80043e4:	f7fd f9b2 	bl	800174c <FAN_Ctrl>

					tSysState.SelGetAdcCh = ADC_GET_SiPM_CH;
 80043e8:	4b2f      	ldr	r3, [pc, #188]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80043ea:	2209      	movs	r2, #9
 80043ec:	719a      	strb	r2, [r3, #6]
					m_SysProcSeq = SYS_SEQ_GET_ADC_TEST_MODE;
 80043ee:	4b2f      	ldr	r3, [pc, #188]	@ (80044ac <PostMessage_Proc+0x2dc>)
 80043f0:	2270      	movs	r2, #112	@ 0x70
 80043f2:	701a      	strb	r2, [r3, #0]
				}
			}break;
 80043f4:	e0b1      	b.n	800455a <PostMessage_Proc+0x38a>


			case CMD_SLEEP_MODE :
			{
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 80043f6:	4b2b      	ldr	r3, [pc, #172]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80043f8:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff f9e9 	bl	80037d4 <RspAssamblyTxMsg>
				m_SysProcSeq = SYS_SEQ_POWER_DOWN_MODE;
 8004402:	4b2a      	ldr	r3, [pc, #168]	@ (80044ac <PostMessage_Proc+0x2dc>)
 8004404:	2260      	movs	r2, #96	@ 0x60
 8004406:	701a      	strb	r2, [r3, #0]
			}break;
 8004408:	e0a8      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_WAKE_UP :
			{
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 800440a:	4b26      	ldr	r3, [pc, #152]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800440c:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff f9df 	bl	80037d4 <RspAssamblyTxMsg>
				m_SysProcSeq = SYS_SEQ_STANDBY_MODE;
 8004416:	4b25      	ldr	r3, [pc, #148]	@ (80044ac <PostMessage_Proc+0x2dc>)
 8004418:	2240      	movs	r2, #64	@ 0x40
 800441a:	701a      	strb	r2, [r3, #0]
			}break;
 800441c:	e09e      	b.n	800455c <PostMessage_Proc+0x38c>

			// Error
			case CMD_DEVICE_INFO :
			{
				if (0x01 == tMsgPkt.Leng) { tSysState.ClientReqDevInfo = tMsgPkt.RxBuff[4];  tSysState.ClientReqType = CLIENT_REQ_GET;}
 800441e:	4b21      	ldr	r3, [pc, #132]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004420:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004424:	2b01      	cmp	r3, #1
 8004426:	d106      	bne.n	8004436 <PostMessage_Proc+0x266>
 8004428:	4b1e      	ldr	r3, [pc, #120]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800442a:	791a      	ldrb	r2, [r3, #4]
 800442c:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800442e:	739a      	strb	r2, [r3, #14]
 8004430:	4b1d      	ldr	r3, [pc, #116]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004432:	2201      	movs	r2, #1
 8004434:	741a      	strb	r2, [r3, #16]
				if (0x08 == tMsgPkt.Leng) { DeviceInfo(DEVICE_INFO_PRODUCT_TYPE); tSysState.ClientReqType = CLIENT_REQ_SET;}
 8004436:	4b1b      	ldr	r3, [pc, #108]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004438:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800443c:	2b08      	cmp	r3, #8
 800443e:	d105      	bne.n	800444c <PostMessage_Proc+0x27c>
 8004440:	2000      	movs	r0, #0
 8004442:	f7ff f955 	bl	80036f0 <DeviceInfo>
 8004446:	4b18      	ldr	r3, [pc, #96]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004448:	2202      	movs	r2, #2
 800444a:	741a      	strb	r2, [r3, #16]
				if (0x10 == tMsgPkt.Leng) { DeviceInfo(DEVICE_INFO_SERIAL_NUM); tSysState.ClientReqType = CLIENT_REQ_SET;}
 800444c:	4b15      	ldr	r3, [pc, #84]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800444e:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004452:	2b10      	cmp	r3, #16
 8004454:	d105      	bne.n	8004462 <PostMessage_Proc+0x292>
 8004456:	2003      	movs	r0, #3
 8004458:	f7ff f94a 	bl	80036f0 <DeviceInfo>
 800445c:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800445e:	2202      	movs	r2, #2
 8004460:	741a      	strb	r2, [r3, #16]

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004462:	4b10      	ldr	r3, [pc, #64]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004464:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff f9b3 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 800446e:	e075      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_DEVICE_VER :
			{
				if (0x01 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET;}
 8004470:	4b0c      	ldr	r3, [pc, #48]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004472:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004476:	2b01      	cmp	r3, #1
 8004478:	d102      	bne.n	8004480 <PostMessage_Proc+0x2b0>
 800447a:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800447c:	2201      	movs	r2, #1
 800447e:	741a      	strb	r2, [r3, #16]
				if (0x05 == tMsgPkt.Leng) { DeviceFirmwareVer(); tSysState.ClientReqType = CLIENT_REQ_SET;}
 8004480:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004482:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004486:	2b05      	cmp	r3, #5
 8004488:	d104      	bne.n	8004494 <PostMessage_Proc+0x2c4>
 800448a:	f7ff f971 	bl	8003770 <DeviceFirmwareVer>
 800448e:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004490:	2202      	movs	r2, #2
 8004492:	741a      	strb	r2, [r3, #16]

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004494:	4b03      	ldr	r3, [pc, #12]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004496:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff f99a 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 80044a0:	e05c      	b.n	800455c <PostMessage_Proc+0x38c>
 80044a2:	bf00      	nop
 80044a4:	20000570 	.word	0x20000570
 80044a8:	2000028c 	.word	0x2000028c
 80044ac:	200002d5 	.word	0x200002d5
 80044b0:	200000b4 	.word	0x200000b4

			case CMD_DEVICE_STATE :
			{
				if (0x00 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET;}
 80044b4:	4b2d      	ldr	r3, [pc, #180]	@ (800456c <PostMessage_Proc+0x39c>)
 80044b6:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <PostMessage_Proc+0x2f4>
 80044be:	4b2c      	ldr	r3, [pc, #176]	@ (8004570 <PostMessage_Proc+0x3a0>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	741a      	strb	r2, [r3, #16]

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 80044c4:	4b29      	ldr	r3, [pc, #164]	@ (800456c <PostMessage_Proc+0x39c>)
 80044c6:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff f982 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 80044d0:	e044      	b.n	800455c <PostMessage_Proc+0x38c>


			case CMD_SET_CORRECTION_VAL :
			{
				if (0x02 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET; tSysState.ClientReqSelCh = tMsgPkt.RxBuff[5]; }
 80044d2:	4b26      	ldr	r3, [pc, #152]	@ (800456c <PostMessage_Proc+0x39c>)
 80044d4:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d106      	bne.n	80044ea <PostMessage_Proc+0x31a>
 80044dc:	4b24      	ldr	r3, [pc, #144]	@ (8004570 <PostMessage_Proc+0x3a0>)
 80044de:	2201      	movs	r2, #1
 80044e0:	741a      	strb	r2, [r3, #16]
 80044e2:	4b22      	ldr	r3, [pc, #136]	@ (800456c <PostMessage_Proc+0x39c>)
 80044e4:	795a      	ldrb	r2, [r3, #5]
 80044e6:	4b22      	ldr	r3, [pc, #136]	@ (8004570 <PostMessage_Proc+0x3a0>)
 80044e8:	73da      	strb	r2, [r3, #15]
				if (0x06 == tMsgPkt.Leng)
 80044ea:	4b20      	ldr	r3, [pc, #128]	@ (800456c <PostMessage_Proc+0x39c>)
 80044ec:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d10b      	bne.n	800450c <PostMessage_Proc+0x33c>
				{
					tSysState.ClientReqType = CLIENT_REQ_SET;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004570 <PostMessage_Proc+0x3a0>)
 80044f6:	2202      	movs	r2, #2
 80044f8:	741a      	strb	r2, [r3, #16]
					tSysState.ClientReqSelCh = tMsgPkt.RxBuff[5];
 80044fa:	4b1c      	ldr	r3, [pc, #112]	@ (800456c <PostMessage_Proc+0x39c>)
 80044fc:	795a      	ldrb	r2, [r3, #5]
 80044fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004570 <PostMessage_Proc+0x3a0>)
 8004500:	73da      	strb	r2, [r3, #15]

					SetAdjustCal(tSysState.ClientReqSelCh);
 8004502:	4b1b      	ldr	r3, [pc, #108]	@ (8004570 <PostMessage_Proc+0x3a0>)
 8004504:	7bdb      	ldrb	r3, [r3, #15]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe ffce 	bl	80034a8 <SetAdjustCal>
				}

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 800450c:	4b17      	ldr	r3, [pc, #92]	@ (800456c <PostMessage_Proc+0x39c>)
 800450e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff f95e 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 8004518:	e020      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_SET_FIRMWARE_DOWNLOAD :
			{
				//if (0x00 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET;}
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 800451a:	4b14      	ldr	r3, [pc, #80]	@ (800456c <PostMessage_Proc+0x39c>)
 800451c:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff f957 	bl	80037d4 <RspAssamblyTxMsg>
				SetCfg_Flash_Firmware_Write();
 8004526:	f7fd fdb1 	bl	800208c <SetCfg_Flash_Firmware_Write>
				m_SysProcSeq = SYS_SEQ_RESET;
 800452a:	4b12      	ldr	r3, [pc, #72]	@ (8004574 <PostMessage_Proc+0x3a4>)
 800452c:	22a0      	movs	r2, #160	@ 0xa0
 800452e:	701a      	strb	r2, [r3, #0]
			}break;
 8004530:	e014      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_SOFT_RESET :
			{
				if (0x00 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET;}
 8004532:	4b0e      	ldr	r3, [pc, #56]	@ (800456c <PostMessage_Proc+0x39c>)
 8004534:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <PostMessage_Proc+0x372>
 800453c:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <PostMessage_Proc+0x3a0>)
 800453e:	2201      	movs	r2, #1
 8004540:	741a      	strb	r2, [r3, #16]

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <PostMessage_Proc+0x39c>)
 8004544:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff f943 	bl	80037d4 <RspAssamblyTxMsg>
				m_SysProcSeq = SYS_SEQ_RESET;
 800454e:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <PostMessage_Proc+0x3a4>)
 8004550:	22a0      	movs	r2, #160	@ 0xa0
 8004552:	701a      	strb	r2, [r3, #0]
			}break;
 8004554:	e002      	b.n	800455c <PostMessage_Proc+0x38c>
			}break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <PostMessage_Proc+0x38c>
			}break;
 800455a:	bf00      	nop
		}

		UART_RxInit();
 800455c:	f000 ff52 	bl	8005404 <UART_RxInit>
		tMsgPkt.FlagRxPktOn = OFF;
 8004560:	4b02      	ldr	r3, [pc, #8]	@ (800456c <PostMessage_Proc+0x39c>)
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
	}
}
 8004568:	bf00      	nop
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000570 	.word	0x20000570
 8004570:	2000028c 	.word	0x2000028c
 8004574:	200002d5 	.word	0x200002d5

08004578 <Operating_Process>:


void Operating_Process(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
	if(OFF == tSysState.FlagStatClenaOn)
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <Operating_Process+0x34>)
 800457e:	7b5b      	ldrb	r3, [r3, #13]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10f      	bne.n	80045a4 <Operating_Process+0x2c>
	{
		if(ON == tSysState.FlagOperModeOn)
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <Operating_Process+0x34>)
 8004586:	7adb      	ldrb	r3, [r3, #11]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10d      	bne.n	80045a8 <Operating_Process+0x30>
		{
			EXT_HV_Ctrl(ON);
 800458c:	2001      	movs	r0, #1
 800458e:	f7fc fe6d 	bl	800126c <EXT_HV_Ctrl>
			EXT_PD_Ctrl(ON);
 8004592:	2001      	movs	r0, #1
 8004594:	f7fc fe8e 	bl	80012b4 <EXT_PD_Ctrl>
			EXT_LD_Ctrl(ON);
 8004598:	2001      	movs	r0, #1
 800459a:	f7fc fe43 	bl	8001224 <EXT_LD_Ctrl>

			ReadMeasuredVal();
 800459e:	f7fe f905 	bl	80027ac <ReadMeasuredVal>
	}
	else
	{
		FanCleanCtrl();
	}
}
 80045a2:	e001      	b.n	80045a8 <Operating_Process+0x30>
		FanCleanCtrl();
 80045a4:	f7fe fbc4 	bl	8002d30 <FanCleanCtrl>
}
 80045a8:	bf00      	nop
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	2000028c 	.word	0x2000028c

080045b0 <RngOfPdAdcSamplingVal>:


void RngOfPdAdcSamplingVal(uint16_t nAdcVal)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	80fb      	strh	r3, [r7, #6]
	//volatile uint16_t Tmp = nAdcVal;

	uint8_t m_SelCurrPdAdcRng = 99;
 80045ba:	2363      	movs	r3, #99	@ 0x63
 80045bc:	73fb      	strb	r3, [r7, #15]
	uint8_t FlagGetOn = OFF;
 80045be:	2300      	movs	r3, #0
 80045c0:	73bb      	strb	r3, [r7, #14]

//	if ( (250 < nAdcVal) && (m_MaxPeckAdVal < nAdcVal) )
	if ( (tParam[PM_CH1].LB < nAdcVal) && (m_MaxPeckAdVal < nAdcVal) )
 80045c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d20a      	bcs.n	80045e2 <RngOfPdAdcSamplingVal+0x32>
 80045cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	88fa      	ldrh	r2, [r7, #6]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d905      	bls.n	80045e2 <RngOfPdAdcSamplingVal+0x32>
	{
		m_MaxPeckAdVal = nAdcVal;
 80045d6:	4a58      	ldr	r2, [pc, #352]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	8013      	strh	r3, [r2, #0]
		m_FlagDectPeckOn = ON;
 80045dc:	4b57      	ldr	r3, [pc, #348]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
	}

	//if (0 >= nAdcVal) {m_FlagDectPeckOn = OFF; }

//	if  ( (250 > nAdcVal) && (ON == m_FlagDectPeckOn) )
	if  ( (tParam[PM_CH1].LB > nAdcVal) && (ON == m_FlagDectPeckOn) )
 80045e2:	4b54      	ldr	r3, [pc, #336]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d970      	bls.n	80046ce <RngOfPdAdcSamplingVal+0x11e>
 80045ec:	4b53      	ldr	r3, [pc, #332]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d16c      	bne.n	80046ce <RngOfPdAdcSamplingVal+0x11e>
	{

	    if ( (tParam[PM_CH1].LB <= m_MaxPeckAdVal) && (tParam[PM_CH1].UB >= m_MaxPeckAdVal) ) { m_SelCurrPdAdcRng = PM0_5; tPmResult1[PM_CH1].nPdChAdc = nAdcVal;}
 80045f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a4f      	ldr	r2, [pc, #316]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 80045fa:	8812      	ldrh	r2, [r2, #0]
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d80a      	bhi.n	8004616 <RngOfPdAdcSamplingVal+0x66>
 8004600:	4b4c      	ldr	r3, [pc, #304]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	4a4c      	ldr	r2, [pc, #304]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 8004606:	8812      	ldrh	r2, [r2, #0]
 8004608:	4293      	cmp	r3, r2
 800460a:	d304      	bcc.n	8004616 <RngOfPdAdcSamplingVal+0x66>
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	4a4b      	ldr	r2, [pc, #300]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	8393      	strh	r3, [r2, #28]
		if ( (tParam[PM_CH2].LB <= m_MaxPeckAdVal) && (tParam[PM_CH2].UB >= m_MaxPeckAdVal) ) { m_SelCurrPdAdcRng = PM1_0; tPmResult1[PM_CH2].nPdChAdc = nAdcVal;}
 8004616:	4b47      	ldr	r3, [pc, #284]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 8004618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461a:	4a47      	ldr	r2, [pc, #284]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 800461c:	8812      	ldrh	r2, [r2, #0]
 800461e:	4293      	cmp	r3, r2
 8004620:	d80a      	bhi.n	8004638 <RngOfPdAdcSamplingVal+0x88>
 8004622:	4b44      	ldr	r3, [pc, #272]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 8004624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004626:	4a44      	ldr	r2, [pc, #272]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 8004628:	8812      	ldrh	r2, [r2, #0]
 800462a:	4293      	cmp	r3, r2
 800462c:	d304      	bcc.n	8004638 <RngOfPdAdcSamplingVal+0x88>
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	4a43      	ldr	r2, [pc, #268]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	8793      	strh	r3, [r2, #60]	@ 0x3c
		if ( (tParam[PM_CH3].LB <= m_MaxPeckAdVal) && (tParam[PM_CH3].UB >= m_MaxPeckAdVal) ) { m_SelCurrPdAdcRng = PM2_5; tPmResult1[PM_CH3].nPdChAdc = nAdcVal;}
 8004638:	4b3e      	ldr	r3, [pc, #248]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 800463a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463c:	4a3e      	ldr	r2, [pc, #248]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 800463e:	8812      	ldrh	r2, [r2, #0]
 8004640:	4293      	cmp	r3, r2
 8004642:	d80b      	bhi.n	800465c <RngOfPdAdcSamplingVal+0xac>
 8004644:	4b3b      	ldr	r3, [pc, #236]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 8004646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004648:	4a3b      	ldr	r2, [pc, #236]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 800464a:	8812      	ldrh	r2, [r2, #0]
 800464c:	4293      	cmp	r3, r2
 800464e:	d305      	bcc.n	800465c <RngOfPdAdcSamplingVal+0xac>
 8004650:	2302      	movs	r3, #2
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	4a3a      	ldr	r2, [pc, #232]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	f8a2 305c 	strh.w	r3, [r2, #92]	@ 0x5c
		if ( (tParam[PM_CH4].LB <= m_MaxPeckAdVal) && (tParam[PM_CH4].UB >= m_MaxPeckAdVal) ) { m_SelCurrPdAdcRng = PM4_0; tPmResult1[PM_CH4].nPdChAdc = nAdcVal;}
 800465c:	4b35      	ldr	r3, [pc, #212]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 800465e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004662:	4a35      	ldr	r2, [pc, #212]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 8004664:	8812      	ldrh	r2, [r2, #0]
 8004666:	4293      	cmp	r3, r2
 8004668:	d80c      	bhi.n	8004684 <RngOfPdAdcSamplingVal+0xd4>
 800466a:	4b32      	ldr	r3, [pc, #200]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004670:	4a31      	ldr	r2, [pc, #196]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 8004672:	8812      	ldrh	r2, [r2, #0]
 8004674:	4293      	cmp	r3, r2
 8004676:	d305      	bcc.n	8004684 <RngOfPdAdcSamplingVal+0xd4>
 8004678:	2303      	movs	r3, #3
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	4a30      	ldr	r2, [pc, #192]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	f8a2 307c 	strh.w	r3, [r2, #124]	@ 0x7c
		if ( (tParam[PM_CH5].LB <= m_MaxPeckAdVal) && (tParam[PM_CH5].UB >= m_MaxPeckAdVal) ) { m_SelCurrPdAdcRng = PM_10; tPmResult1[PM_CH5].nPdChAdc = nAdcVal;}
 8004684:	4b2b      	ldr	r3, [pc, #172]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 8004686:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800468a:	4a2b      	ldr	r2, [pc, #172]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 800468c:	8812      	ldrh	r2, [r2, #0]
 800468e:	4293      	cmp	r3, r2
 8004690:	d80c      	bhi.n	80046ac <RngOfPdAdcSamplingVal+0xfc>
 8004692:	4b28      	ldr	r3, [pc, #160]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 8004694:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004698:	4a27      	ldr	r2, [pc, #156]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 800469a:	8812      	ldrh	r2, [r2, #0]
 800469c:	4293      	cmp	r3, r2
 800469e:	d305      	bcc.n	80046ac <RngOfPdAdcSamplingVal+0xfc>
 80046a0:	2304      	movs	r3, #4
 80046a2:	73fb      	strb	r3, [r7, #15]
 80046a4:	4a26      	ldr	r2, [pc, #152]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	f8a2 309c 	strh.w	r3, [r2, #156]	@ 0x9c


		m_PeckPDAdVal = m_MaxPeckAdVal;
 80046ac:	4b22      	ldr	r3, [pc, #136]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 80046ae:	881a      	ldrh	r2, [r3, #0]
 80046b0:	4b24      	ldr	r3, [pc, #144]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 80046b2:	801a      	strh	r2, [r3, #0]

		//m_MaxPeckAdVal = tParam[PM_CH1].LB + 1;
		m_MaxPeckAdVal = tParam[PM_CH1].LB;
 80046b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004734 <RngOfPdAdcSamplingVal+0x184>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 80046bc:	801a      	strh	r2, [r3, #0]
		m_FlagDectPeckOn = OFF;
 80046be:	4b1f      	ldr	r3, [pc, #124]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
		m_FlagAdcSendOn = ON;
 80046c4:	4b20      	ldr	r3, [pc, #128]	@ (8004748 <RngOfPdAdcSamplingVal+0x198>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
		FlagGetOn = ON;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73bb      	strb	r3, [r7, #14]

	}

	if( ON == FlagGetOn)
 80046ce:	7bbb      	ldrb	r3, [r7, #14]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d129      	bne.n	8004728 <RngOfPdAdcSamplingVal+0x178>
	{
	    if(PM0_5 == m_SelCurrPdAdcRng) tPmResult1[PM_CH1].nTmpNumConcet++;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <RngOfPdAdcSamplingVal+0x134>
 80046da:	4b19      	ldr	r3, [pc, #100]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	3301      	adds	r3, #1
 80046e0:	4a17      	ldr	r2, [pc, #92]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 80046e2:	6153      	str	r3, [r2, #20]
	    if(PM1_0 == m_SelCurrPdAdcRng) tPmResult1[PM_CH2].nTmpNumConcet++;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d104      	bne.n	80046f4 <RngOfPdAdcSamplingVal+0x144>
 80046ea:	4b15      	ldr	r3, [pc, #84]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 80046ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ee:	3301      	adds	r3, #1
 80046f0:	4a13      	ldr	r2, [pc, #76]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 80046f2:	6353      	str	r3, [r2, #52]	@ 0x34
		if(PM2_5 == m_SelCurrPdAdcRng) tPmResult1[PM_CH3].nTmpNumConcet++;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d104      	bne.n	8004704 <RngOfPdAdcSamplingVal+0x154>
 80046fa:	4b11      	ldr	r3, [pc, #68]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 80046fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fe:	3301      	adds	r3, #1
 8004700:	4a0f      	ldr	r2, [pc, #60]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 8004702:	6553      	str	r3, [r2, #84]	@ 0x54
		if(PM4_0 == m_SelCurrPdAdcRng) tPmResult1[PM_CH4].nTmpNumConcet++;
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b03      	cmp	r3, #3
 8004708:	d104      	bne.n	8004714 <RngOfPdAdcSamplingVal+0x164>
 800470a:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 800470c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470e:	3301      	adds	r3, #1
 8004710:	4a0b      	ldr	r2, [pc, #44]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 8004712:	6753      	str	r3, [r2, #116]	@ 0x74
		if(PM_10 == m_SelCurrPdAdcRng) tPmResult1[PM_CH5].nTmpNumConcet++;
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b04      	cmp	r3, #4
 8004718:	d106      	bne.n	8004728 <RngOfPdAdcSamplingVal+0x178>
 800471a:	4b09      	ldr	r3, [pc, #36]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 800471c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004720:	3301      	adds	r3, #1
 8004722:	4a07      	ldr	r2, [pc, #28]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 8004724:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
//        }
//        // 피크 종료 후 초기화
//        maxVal = 0;
//        detecting = 0;
//    }
}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	200000cc 	.word	0x200000cc
 8004738:	200002d6 	.word	0x200002d6
 800473c:	200002de 	.word	0x200002de
 8004740:	200001bc 	.word	0x200001bc
 8004744:	200002da 	.word	0x200002da
 8004748:	200002e0 	.word	0x200002e0

0800474c <RngOfSiPmAdcSamplingVal>:

void RngOfSiPmAdcSamplingVal(uint16_t nAdcVal)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	80fb      	strh	r3, [r7, #6]
	//volatile uint16_t Tmp = nAdcVal;

	if( (tParam[PM_SiPM].LB < nAdcVal) && (tParam[PM_SiPM].UB > nAdcVal) )
 8004756:	4b20      	ldr	r3, [pc, #128]	@ (80047d8 <RngOfSiPmAdcSamplingVal+0x8c>)
 8004758:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	429a      	cmp	r2, r3
 8004760:	d210      	bcs.n	8004784 <RngOfSiPmAdcSamplingVal+0x38>
 8004762:	4b1d      	ldr	r3, [pc, #116]	@ (80047d8 <RngOfSiPmAdcSamplingVal+0x8c>)
 8004764:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	429a      	cmp	r2, r3
 800476c:	d90a      	bls.n	8004784 <RngOfSiPmAdcSamplingVal+0x38>
	{
		if(m_MaxPeckAdVal2 < nAdcVal)
 800476e:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <RngOfSiPmAdcSamplingVal+0x90>)
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	429a      	cmp	r2, r3
 8004776:	d905      	bls.n	8004784 <RngOfSiPmAdcSamplingVal+0x38>
		{
			m_MaxPeckAdVal2 = nAdcVal;
 8004778:	4a18      	ldr	r2, [pc, #96]	@ (80047dc <RngOfSiPmAdcSamplingVal+0x90>)
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	8013      	strh	r3, [r2, #0]
			m_FlagDectPeckOn2 = ON;
 800477e:	4b18      	ldr	r3, [pc, #96]	@ (80047e0 <RngOfSiPmAdcSamplingVal+0x94>)
 8004780:	2201      	movs	r2, #1
 8004782:	701a      	strb	r2, [r3, #0]
		}
	}

	if( (tParam[PM_SiPM].LB > nAdcVal) && (ON == m_FlagDectPeckOn2) )
 8004784:	4b14      	ldr	r3, [pc, #80]	@ (80047d8 <RngOfSiPmAdcSamplingVal+0x8c>)
 8004786:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	429a      	cmp	r2, r3
 800478e:	d91c      	bls.n	80047ca <RngOfSiPmAdcSamplingVal+0x7e>
 8004790:	4b13      	ldr	r3, [pc, #76]	@ (80047e0 <RngOfSiPmAdcSamplingVal+0x94>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d118      	bne.n	80047ca <RngOfSiPmAdcSamplingVal+0x7e>
	{
		tPmResult1[PM_SiPM].nTmpNumConcet++;
 8004798:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <RngOfSiPmAdcSamplingVal+0x98>)
 800479a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800479e:	3301      	adds	r3, #1
 80047a0:	4a10      	ldr	r2, [pc, #64]	@ (80047e4 <RngOfSiPmAdcSamplingVal+0x98>)
 80047a2:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4

		m_PeckSiPMAdVal = m_MaxPeckAdVal2;
 80047a6:	4b0d      	ldr	r3, [pc, #52]	@ (80047dc <RngOfSiPmAdcSamplingVal+0x90>)
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	4b0f      	ldr	r3, [pc, #60]	@ (80047e8 <RngOfSiPmAdcSamplingVal+0x9c>)
 80047ac:	801a      	strh	r2, [r3, #0]
		m_MaxPeckAdVal2 = tParam[PM_SiPM].LB + 1;
 80047ae:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <RngOfSiPmAdcSamplingVal+0x8c>)
 80047b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3301      	adds	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	4b08      	ldr	r3, [pc, #32]	@ (80047dc <RngOfSiPmAdcSamplingVal+0x90>)
 80047bc:	801a      	strh	r2, [r3, #0]
		m_FlagAdcSendOn = ON;
 80047be:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <RngOfSiPmAdcSamplingVal+0xa0>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]
		m_FlagDectPeckOn2 = OFF;
 80047c4:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <RngOfSiPmAdcSamplingVal+0x94>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	701a      	strb	r2, [r3, #0]
	}
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	200000cc 	.word	0x200000cc
 80047dc:	200002d8 	.word	0x200002d8
 80047e0:	200002df 	.word	0x200002df
 80047e4:	200001bc 	.word	0x200001bc
 80047e8:	200002dc 	.word	0x200002dc
 80047ec:	200002e0 	.word	0x200002e0

080047f0 <Built_In_Test_Proc>:

void Built_In_Test_Proc(void)
{
 80047f0:	b598      	push	{r3, r4, r7, lr}
 80047f2:	af00      	add	r7, sp, #0
	switch(m_BITProcSeq)
 80047f4:	4bd8      	ldr	r3, [pc, #864]	@ (8004b58 <Built_In_Test_Proc+0x368>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2bef      	cmp	r3, #239	@ 0xef
 80047fa:	f000 845b 	beq.w	80050b4 <Built_In_Test_Proc+0x8c4>
 80047fe:	2bef      	cmp	r3, #239	@ 0xef
 8004800:	f300 846d 	bgt.w	80050de <Built_In_Test_Proc+0x8ee>
 8004804:	2b90      	cmp	r3, #144	@ 0x90
 8004806:	f300 812b 	bgt.w	8004a60 <Built_In_Test_Proc+0x270>
 800480a:	2b00      	cmp	r3, #0
 800480c:	f2c0 8467 	blt.w	80050de <Built_In_Test_Proc+0x8ee>
 8004810:	2b90      	cmp	r3, #144	@ 0x90
 8004812:	f200 8464 	bhi.w	80050de <Built_In_Test_Proc+0x8ee>
 8004816:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <Built_In_Test_Proc+0x2c>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	080050b9 	.word	0x080050b9
 8004820:	080050df 	.word	0x080050df
 8004824:	080050df 	.word	0x080050df
 8004828:	080050df 	.word	0x080050df
 800482c:	080050df 	.word	0x080050df
 8004830:	080050df 	.word	0x080050df
 8004834:	080050df 	.word	0x080050df
 8004838:	080050df 	.word	0x080050df
 800483c:	080050df 	.word	0x080050df
 8004840:	080050df 	.word	0x080050df
 8004844:	080050df 	.word	0x080050df
 8004848:	080050df 	.word	0x080050df
 800484c:	080050df 	.word	0x080050df
 8004850:	080050df 	.word	0x080050df
 8004854:	080050df 	.word	0x080050df
 8004858:	080050df 	.word	0x080050df
 800485c:	08004a69 	.word	0x08004a69
 8004860:	080050df 	.word	0x080050df
 8004864:	080050df 	.word	0x080050df
 8004868:	080050df 	.word	0x080050df
 800486c:	080050df 	.word	0x080050df
 8004870:	080050df 	.word	0x080050df
 8004874:	080050df 	.word	0x080050df
 8004878:	080050df 	.word	0x080050df
 800487c:	080050df 	.word	0x080050df
 8004880:	080050df 	.word	0x080050df
 8004884:	080050df 	.word	0x080050df
 8004888:	080050df 	.word	0x080050df
 800488c:	080050df 	.word	0x080050df
 8004890:	080050df 	.word	0x080050df
 8004894:	080050df 	.word	0x080050df
 8004898:	080050df 	.word	0x080050df
 800489c:	08004a95 	.word	0x08004a95
 80048a0:	080050df 	.word	0x080050df
 80048a4:	08004aa7 	.word	0x08004aa7
 80048a8:	080050df 	.word	0x080050df
 80048ac:	08004acb 	.word	0x08004acb
 80048b0:	080050df 	.word	0x080050df
 80048b4:	080050df 	.word	0x080050df
 80048b8:	080050df 	.word	0x080050df
 80048bc:	080050df 	.word	0x080050df
 80048c0:	080050df 	.word	0x080050df
 80048c4:	080050df 	.word	0x080050df
 80048c8:	080050df 	.word	0x080050df
 80048cc:	080050df 	.word	0x080050df
 80048d0:	080050df 	.word	0x080050df
 80048d4:	080050df 	.word	0x080050df
 80048d8:	080050df 	.word	0x080050df
 80048dc:	08004b13 	.word	0x08004b13
 80048e0:	080050df 	.word	0x080050df
 80048e4:	08004b2f 	.word	0x08004b2f
 80048e8:	080050df 	.word	0x080050df
 80048ec:	08004b69 	.word	0x08004b69
 80048f0:	08004c09 	.word	0x08004c09
 80048f4:	080050df 	.word	0x080050df
 80048f8:	08004c25 	.word	0x08004c25
 80048fc:	080050df 	.word	0x080050df
 8004900:	08004c4d 	.word	0x08004c4d
 8004904:	080050df 	.word	0x080050df
 8004908:	080050df 	.word	0x080050df
 800490c:	080050df 	.word	0x080050df
 8004910:	080050df 	.word	0x080050df
 8004914:	080050df 	.word	0x080050df
 8004918:	080050df 	.word	0x080050df
 800491c:	08004ce9 	.word	0x08004ce9
 8004920:	080050df 	.word	0x080050df
 8004924:	08004d07 	.word	0x08004d07
 8004928:	080050df 	.word	0x080050df
 800492c:	08004d29 	.word	0x08004d29
 8004930:	080050df 	.word	0x080050df
 8004934:	080050df 	.word	0x080050df
 8004938:	080050df 	.word	0x080050df
 800493c:	080050df 	.word	0x080050df
 8004940:	080050df 	.word	0x080050df
 8004944:	080050df 	.word	0x080050df
 8004948:	080050df 	.word	0x080050df
 800494c:	080050df 	.word	0x080050df
 8004950:	080050df 	.word	0x080050df
 8004954:	080050df 	.word	0x080050df
 8004958:	080050df 	.word	0x080050df
 800495c:	08004dc9 	.word	0x08004dc9
 8004960:	080050df 	.word	0x080050df
 8004964:	08004de1 	.word	0x08004de1
 8004968:	080050df 	.word	0x080050df
 800496c:	08004e03 	.word	0x08004e03
 8004970:	080050df 	.word	0x080050df
 8004974:	080050df 	.word	0x080050df
 8004978:	080050df 	.word	0x080050df
 800497c:	080050df 	.word	0x080050df
 8004980:	080050df 	.word	0x080050df
 8004984:	080050df 	.word	0x080050df
 8004988:	080050df 	.word	0x080050df
 800498c:	080050df 	.word	0x080050df
 8004990:	080050df 	.word	0x080050df
 8004994:	080050df 	.word	0x080050df
 8004998:	080050df 	.word	0x080050df
 800499c:	08004eb7 	.word	0x08004eb7
 80049a0:	080050df 	.word	0x080050df
 80049a4:	08004ed5 	.word	0x08004ed5
 80049a8:	080050df 	.word	0x080050df
 80049ac:	08004ef7 	.word	0x08004ef7
 80049b0:	080050df 	.word	0x080050df
 80049b4:	080050df 	.word	0x080050df
 80049b8:	080050df 	.word	0x080050df
 80049bc:	080050df 	.word	0x080050df
 80049c0:	080050df 	.word	0x080050df
 80049c4:	080050df 	.word	0x080050df
 80049c8:	080050df 	.word	0x080050df
 80049cc:	080050df 	.word	0x080050df
 80049d0:	080050df 	.word	0x080050df
 80049d4:	080050df 	.word	0x080050df
 80049d8:	080050df 	.word	0x080050df
 80049dc:	08004f93 	.word	0x08004f93
 80049e0:	080050df 	.word	0x080050df
 80049e4:	08004fab 	.word	0x08004fab
 80049e8:	080050df 	.word	0x080050df
 80049ec:	08004fcd 	.word	0x08004fcd
 80049f0:	080050df 	.word	0x080050df
 80049f4:	080050df 	.word	0x080050df
 80049f8:	080050df 	.word	0x080050df
 80049fc:	080050df 	.word	0x080050df
 8004a00:	080050df 	.word	0x080050df
 8004a04:	080050df 	.word	0x080050df
 8004a08:	080050df 	.word	0x080050df
 8004a0c:	080050df 	.word	0x080050df
 8004a10:	080050df 	.word	0x080050df
 8004a14:	080050df 	.word	0x080050df
 8004a18:	080050df 	.word	0x080050df
 8004a1c:	080050df 	.word	0x080050df
 8004a20:	080050df 	.word	0x080050df
 8004a24:	080050df 	.word	0x080050df
 8004a28:	080050df 	.word	0x080050df
 8004a2c:	080050df 	.word	0x080050df
 8004a30:	080050df 	.word	0x080050df
 8004a34:	080050df 	.word	0x080050df
 8004a38:	080050df 	.word	0x080050df
 8004a3c:	080050df 	.word	0x080050df
 8004a40:	080050df 	.word	0x080050df
 8004a44:	080050df 	.word	0x080050df
 8004a48:	080050df 	.word	0x080050df
 8004a4c:	080050df 	.word	0x080050df
 8004a50:	080050df 	.word	0x080050df
 8004a54:	080050df 	.word	0x080050df
 8004a58:	080050df 	.word	0x080050df
 8004a5c:	08005069 	.word	0x08005069
 8004a60:	2be0      	cmp	r3, #224	@ 0xe0
 8004a62:	f000 8317 	beq.w	8005094 <Built_In_Test_Proc+0x8a4>


			RspAssamblyTxMsg(CMD_DEVICE_STATE);
		}break;
	}
}
 8004a66:	e33a      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			FAN_Ctrl(LO, OFF);
 8004a68:	2100      	movs	r1, #0
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f7fc fe6e 	bl	800174c <FAN_Ctrl>
			EXT_SiPM_Ctrl(OFF);
 8004a70:	2000      	movs	r0, #0
 8004a72:	f7fc fc43 	bl	80012fc <EXT_SiPM_Ctrl>
			EXT_PD_Ctrl(OFF);
 8004a76:	2000      	movs	r0, #0
 8004a78:	f7fc fc1c 	bl	80012b4 <EXT_PD_Ctrl>
			EXT_HV_Ctrl(OFF);
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f7fc fbf5 	bl	800126c <EXT_HV_Ctrl>
			EXT_LD_Ctrl(OFF);
 8004a82:	2000      	movs	r0, #0
 8004a84:	f7fc fbce 	bl	8001224 <EXT_LD_Ctrl>
			WaitTime_Init();
 8004a88:	f7fd fd92 	bl	80025b0 <WaitTime_Init>
			m_BITProcSeq = BIT_SEQ_EEPROM_WRITE_READ;
 8004a8c:	4b32      	ldr	r3, [pc, #200]	@ (8004b58 <Built_In_Test_Proc+0x368>)
 8004a8e:	2220      	movs	r2, #32
 8004a90:	701a      	strb	r2, [r3, #0]
		}break;
 8004a92:	e324      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			tConfig.DeviceUseCount = GetCfg_DeviceUseCount();
 8004a94:	f7fd fad2 	bl	800203c <GetCfg_DeviceUseCount>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4a30      	ldr	r2, [pc, #192]	@ (8004b5c <Built_In_Test_Proc+0x36c>)
 8004a9c:	6253      	str	r3, [r2, #36]	@ 0x24
			m_BITProcSeq = BIT_SEQ_EEPROM_WRITE_TIME_CHK;
 8004a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8004b58 <Built_In_Test_Proc+0x368>)
 8004aa0:	2222      	movs	r2, #34	@ 0x22
 8004aa2:	701a      	strb	r2, [r3, #0]
		}break;
 8004aa4:	e31b      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			if ( TRUE == WaitHoldTime_Sec(ON, EEP_EEPROM_CHK_TIME) )
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7fd fd9f 	bl	80025ec <WaitHoldTime_Sec>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f040 8303 	bne.w	80050bc <Built_In_Test_Proc+0x8cc>
				SetCfg_DeviceUseCount(tConfig.DeviceUseCount+1);
 8004ab6:	4b29      	ldr	r3, [pc, #164]	@ (8004b5c <Built_In_Test_Proc+0x36c>)
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	3301      	adds	r3, #1
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fd fa9a 	bl	8001ff6 <SetCfg_DeviceUseCount>
				m_BITProcSeq = BIT_SEQ_EEPROM_WRITE_VERIFY_CHK;
 8004ac2:	4b25      	ldr	r3, [pc, #148]	@ (8004b58 <Built_In_Test_Proc+0x368>)
 8004ac4:	2224      	movs	r2, #36	@ 0x24
 8004ac6:	701a      	strb	r2, [r3, #0]
		}break;
 8004ac8:	e2f8      	b.n	80050bc <Built_In_Test_Proc+0x8cc>
			if((tConfig.DeviceUseCount+1) == GetCfg_DeviceUseCount())
 8004aca:	4b24      	ldr	r3, [pc, #144]	@ (8004b5c <Built_In_Test_Proc+0x36c>)
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	1c5c      	adds	r4, r3, #1
 8004ad0:	f7fd fab4 	bl	800203c <GetCfg_DeviceUseCount>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	429c      	cmp	r4, r3
 8004ad8:	d10f      	bne.n	8004afa <Built_In_Test_Proc+0x30a>
				WaitHoldTime_Sec(OFF, CHK_TIME_OFF);
 8004ada:	2163      	movs	r1, #99	@ 0x63
 8004adc:	2000      	movs	r0, #0
 8004ade:	f7fd fd85 	bl	80025ec <WaitHoldTime_Sec>
				tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_EEPROM_OK, OFF);
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	2004      	movs	r0, #4
 8004ae6:	f7fd fdd5 	bl	8002694 <DeviceSetState>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b1c      	ldr	r3, [pc, #112]	@ (8004b60 <Built_In_Test_Proc+0x370>)
 8004af0:	839a      	strh	r2, [r3, #28]
				m_BITProcSeq = BIT_SEQ_FAN_CON_LO_SPD_CTRL_ON;
 8004af2:	4b19      	ldr	r3, [pc, #100]	@ (8004b58 <Built_In_Test_Proc+0x368>)
 8004af4:	2230      	movs	r2, #48	@ 0x30
 8004af6:	701a      	strb	r2, [r3, #0]
		}break;
 8004af8:	e2f1      	b.n	80050de <Built_In_Test_Proc+0x8ee>
				tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_EEPROM_OK, ON);
 8004afa:	2101      	movs	r1, #1
 8004afc:	2004      	movs	r0, #4
 8004afe:	f7fd fdc9 	bl	8002694 <DeviceSetState>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	4b16      	ldr	r3, [pc, #88]	@ (8004b60 <Built_In_Test_Proc+0x370>)
 8004b08:	839a      	strh	r2, [r3, #28]
				m_BITProcSeq = BIT_SEQ_ERROR;
 8004b0a:	4b13      	ldr	r3, [pc, #76]	@ (8004b58 <Built_In_Test_Proc+0x368>)
 8004b0c:	22e0      	movs	r2, #224	@ 0xe0
 8004b0e:	701a      	strb	r2, [r3, #0]
		}break;
 8004b10:	e2e5      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			FAN_Ctrl(LO, ON);
 8004b12:	2101      	movs	r1, #1
 8004b14:	2000      	movs	r0, #0
 8004b16:	f7fc fe19 	bl	800174c <FAN_Ctrl>
			WaitTime_Init();
 8004b1a:	f7fd fd49 	bl	80025b0 <WaitTime_Init>
			WaitHoldTime_Sec(OFF, CHK_TIME_OFF);
 8004b1e:	2163      	movs	r1, #99	@ 0x63
 8004b20:	2000      	movs	r0, #0
 8004b22:	f7fd fd63 	bl	80025ec <WaitHoldTime_Sec>
			m_BITProcSeq = BIT_SEQ_FAN_CON_LO_SPD_STAB_TIME;
 8004b26:	4b0c      	ldr	r3, [pc, #48]	@ (8004b58 <Built_In_Test_Proc+0x368>)
 8004b28:	2232      	movs	r2, #50	@ 0x32
 8004b2a:	701a      	strb	r2, [r3, #0]
		}break;
 8004b2c:	e2d7      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			if ( TRUE == WaitHoldTime_Sec(ON, FAN_CON_ON_TIME) )
 8004b2e:	2103      	movs	r1, #3
 8004b30:	2001      	movs	r0, #1
 8004b32:	f7fd fd5b 	bl	80025ec <WaitHoldTime_Sec>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	f040 82c1 	bne.w	80050c0 <Built_In_Test_Proc+0x8d0>
				tFan.RpmCurrCnt = 0;
 8004b3e:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <Built_In_Test_Proc+0x374>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	611a      	str	r2, [r3, #16]
				FAN_RpmMeasuerment(ON);
 8004b44:	2001      	movs	r0, #1
 8004b46:	f7fc fe21 	bl	800178c <FAN_RpmMeasuerment>
				WaitTime_Init();
 8004b4a:	f7fd fd31 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_FAN_CON_LO_SPD_CHK;
 8004b4e:	4b02      	ldr	r3, [pc, #8]	@ (8004b58 <Built_In_Test_Proc+0x368>)
 8004b50:	2234      	movs	r2, #52	@ 0x34
 8004b52:	701a      	strb	r2, [r3, #0]
		}break;
 8004b54:	e2b4      	b.n	80050c0 <Built_In_Test_Proc+0x8d0>
 8004b56:	bf00      	nop
 8004b58:	200002d4 	.word	0x200002d4
 8004b5c:	20000030 	.word	0x20000030
 8004b60:	2000028c 	.word	0x2000028c
 8004b64:	200000b4 	.word	0x200000b4
			if ( TRUE == WaitHoldTime_Sec(ON, FAN_MEASURE_TIME) )
 8004b68:	2101      	movs	r1, #1
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	f7fd fd3e 	bl	80025ec <WaitHoldTime_Sec>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	f040 82a6 	bne.w	80050c4 <Built_In_Test_Proc+0x8d4>
				if (ON == FAN_ChkCondition(DEFAULT_FAN_RPM_LOW_SPD_COUNT, tFan.RpmCurrCnt))
 8004b78:	4bbc      	ldr	r3, [pc, #752]	@ (8004e6c <Built_In_Test_Proc+0x67c>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	20ac      	movs	r0, #172	@ 0xac
 8004b80:	f7fc fe26 	bl	80017d0 <FAN_ChkCondition>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d11b      	bne.n	8004bc2 <Built_In_Test_Proc+0x3d2>
					tFan.RpmCurrCnt = 0;
 8004b8a:	4bb8      	ldr	r3, [pc, #736]	@ (8004e6c <Built_In_Test_Proc+0x67c>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	611a      	str	r2, [r3, #16]
					FAN_RpmMeasuerment(OFF);
 8004b90:	2000      	movs	r0, #0
 8004b92:	f7fc fdfb 	bl	800178c <FAN_RpmMeasuerment>
					FAN_Ctrl(HI, ON);
 8004b96:	2101      	movs	r1, #1
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f7fc fdd7 	bl	800174c <FAN_Ctrl>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SPD_N, OFF);
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	f7fd fd77 	bl	8002694 <DeviceSetState>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4bb1      	ldr	r3, [pc, #708]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004bac:	839a      	strh	r2, [r3, #28]
					tFan.FlagErrOn = ON;
 8004bae:	4baf      	ldr	r3, [pc, #700]	@ (8004e6c <Built_In_Test_Proc+0x67c>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	711a      	strb	r2, [r3, #4]
					m_BITProcSeq = BIT_SEQ_FAN_CON_HI_SPD_CTRL_ON;
 8004bb4:	4baf      	ldr	r3, [pc, #700]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004bb6:	2235      	movs	r2, #53	@ 0x35
 8004bb8:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8004bba:	4bad      	ldr	r3, [pc, #692]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	779a      	strb	r2, [r3, #30]
 8004bc0:	e01f      	b.n	8004c02 <Built_In_Test_Proc+0x412>
					tFan.RpmCurrCnt = 0;
 8004bc2:	4baa      	ldr	r3, [pc, #680]	@ (8004e6c <Built_In_Test_Proc+0x67c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	611a      	str	r2, [r3, #16]
					if(3 >= tSysState.ErrRetry++) { m_BITProcSeq = BIT_SEQ_FAN_CON_LO_SPD_CTRL_ON; }
 8004bc8:	4ba9      	ldr	r3, [pc, #676]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004bca:	7f9b      	ldrb	r3, [r3, #30]
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	b2d1      	uxtb	r1, r2
 8004bd0:	4aa7      	ldr	r2, [pc, #668]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004bd2:	7791      	strb	r1, [r2, #30]
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d803      	bhi.n	8004be0 <Built_In_Test_Proc+0x3f0>
 8004bd8:	4ba6      	ldr	r3, [pc, #664]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004bda:	2230      	movs	r2, #48	@ 0x30
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e010      	b.n	8004c02 <Built_In_Test_Proc+0x412>
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SPD_N, ON);
 8004be0:	2101      	movs	r1, #1
 8004be2:	2001      	movs	r0, #1
 8004be4:	f7fd fd56 	bl	8002694 <DeviceSetState>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	4ba0      	ldr	r3, [pc, #640]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004bee:	839a      	strh	r2, [r3, #28]
						tFan.FlagErrOn = ON;
 8004bf0:	4b9e      	ldr	r3, [pc, #632]	@ (8004e6c <Built_In_Test_Proc+0x67c>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	711a      	strb	r2, [r3, #4]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8004bf6:	4b9f      	ldr	r3, [pc, #636]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004bf8:	22e0      	movs	r2, #224	@ 0xe0
 8004bfa:	701a      	strb	r2, [r3, #0]
						tSysState.ErrRetry = 0;
 8004bfc:	4b9c      	ldr	r3, [pc, #624]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	779a      	strb	r2, [r3, #30]
				WaitTime_Init();
 8004c02:	f7fd fcd5 	bl	80025b0 <WaitTime_Init>
		}break;
 8004c06:	e25d      	b.n	80050c4 <Built_In_Test_Proc+0x8d4>
			FAN_Ctrl(HI, ON);
 8004c08:	2101      	movs	r1, #1
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f7fc fd9e 	bl	800174c <FAN_Ctrl>
			WaitTime_Init();
 8004c10:	f7fd fcce 	bl	80025b0 <WaitTime_Init>
			WaitHoldTime_Sec(OFF, CHK_TIME_OFF);
 8004c14:	2163      	movs	r1, #99	@ 0x63
 8004c16:	2000      	movs	r0, #0
 8004c18:	f7fd fce8 	bl	80025ec <WaitHoldTime_Sec>
			m_BITProcSeq = BIT_SEQ_FAN_CON_HI_SPD_STAB_TIME;
 8004c1c:	4b95      	ldr	r3, [pc, #596]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004c1e:	2237      	movs	r2, #55	@ 0x37
 8004c20:	701a      	strb	r2, [r3, #0]
		}break;
 8004c22:	e25c      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			if ( TRUE == WaitHoldTime_Sec(ON, FAN_CON_ON_TIME) )
 8004c24:	2103      	movs	r1, #3
 8004c26:	2001      	movs	r0, #1
 8004c28:	f7fd fce0 	bl	80025ec <WaitHoldTime_Sec>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	f040 824a 	bne.w	80050c8 <Built_In_Test_Proc+0x8d8>
				tFan.RpmCurrCnt = 0;
 8004c34:	4b8d      	ldr	r3, [pc, #564]	@ (8004e6c <Built_In_Test_Proc+0x67c>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
				FAN_RpmMeasuerment(ON);
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	f7fc fda6 	bl	800178c <FAN_RpmMeasuerment>
				WaitTime_Init();
 8004c40:	f7fd fcb6 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_FAN_CON_HI_SPD_CHK;
 8004c44:	4b8b      	ldr	r3, [pc, #556]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004c46:	2239      	movs	r2, #57	@ 0x39
 8004c48:	701a      	strb	r2, [r3, #0]
		}break;
 8004c4a:	e23d      	b.n	80050c8 <Built_In_Test_Proc+0x8d8>
			if ( TRUE == WaitHoldTime_Sec(ON, FAN_MEASURE_TIME) )
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	2001      	movs	r0, #1
 8004c50:	f7fd fccc 	bl	80025ec <WaitHoldTime_Sec>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	f040 8238 	bne.w	80050cc <Built_In_Test_Proc+0x8dc>
				if (ON == FAN_ChkCondition(DEFAULT_FAN_RPM_HIGH_SPD_COUNT, tFan.RpmCurrCnt))
 8004c5c:	4b83      	ldr	r3, [pc, #524]	@ (8004e6c <Built_In_Test_Proc+0x67c>)
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	4619      	mov	r1, r3
 8004c62:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8004c66:	f7fc fdb3 	bl	80017d0 <FAN_ChkCondition>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d118      	bne.n	8004ca2 <Built_In_Test_Proc+0x4b2>
					FAN_RpmMeasuerment(OFF);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7fc fd8b 	bl	800178c <FAN_RpmMeasuerment>
					FAN_Ctrl(LO, ON);
 8004c76:	2101      	movs	r1, #1
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f7fc fd67 	bl	800174c <FAN_Ctrl>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SPD_H, OFF);
 8004c7e:	2100      	movs	r1, #0
 8004c80:	2000      	movs	r0, #0
 8004c82:	f7fd fd07 	bl	8002694 <DeviceSetState>
 8004c86:	4603      	mov	r3, r0
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4b79      	ldr	r3, [pc, #484]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004c8c:	839a      	strh	r2, [r3, #28]
					tFan.FlagErrOn = OFF;
 8004c8e:	4b77      	ldr	r3, [pc, #476]	@ (8004e6c <Built_In_Test_Proc+0x67c>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	711a      	strb	r2, [r3, #4]
					m_BITProcSeq = BIT_SEQ_LD_MON_ADC_CTRL_ON;
 8004c94:	4b77      	ldr	r3, [pc, #476]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004c96:	2240      	movs	r2, #64	@ 0x40
 8004c98:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8004c9a:	4b75      	ldr	r3, [pc, #468]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	779a      	strb	r2, [r3, #30]
 8004ca0:	e01f      	b.n	8004ce2 <Built_In_Test_Proc+0x4f2>
					tFan.RpmCurrCnt = 0;
 8004ca2:	4b72      	ldr	r3, [pc, #456]	@ (8004e6c <Built_In_Test_Proc+0x67c>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	611a      	str	r2, [r3, #16]
					if(3 >= tSysState.ErrRetry++) { m_BITProcSeq = BIT_SEQ_FAN_CON_HI_SPD_CTRL_ON; }
 8004ca8:	4b71      	ldr	r3, [pc, #452]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004caa:	7f9b      	ldrb	r3, [r3, #30]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	b2d1      	uxtb	r1, r2
 8004cb0:	4a6f      	ldr	r2, [pc, #444]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004cb2:	7791      	strb	r1, [r2, #30]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d803      	bhi.n	8004cc0 <Built_In_Test_Proc+0x4d0>
 8004cb8:	4b6e      	ldr	r3, [pc, #440]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004cba:	2235      	movs	r2, #53	@ 0x35
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e010      	b.n	8004ce2 <Built_In_Test_Proc+0x4f2>
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SPD_H, ON);
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7fd fce6 	bl	8002694 <DeviceSetState>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	461a      	mov	r2, r3
 8004ccc:	4b68      	ldr	r3, [pc, #416]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004cce:	839a      	strh	r2, [r3, #28]
						tFan.FlagErrOn = ON;
 8004cd0:	4b66      	ldr	r3, [pc, #408]	@ (8004e6c <Built_In_Test_Proc+0x67c>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	711a      	strb	r2, [r3, #4]
						tSysState.ErrRetry = 0;
 8004cd6:	4b66      	ldr	r3, [pc, #408]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	779a      	strb	r2, [r3, #30]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8004cdc:	4b65      	ldr	r3, [pc, #404]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004cde:	22e0      	movs	r2, #224	@ 0xe0
 8004ce0:	701a      	strb	r2, [r3, #0]
				WaitTime_Init();
 8004ce2:	f7fd fc65 	bl	80025b0 <WaitTime_Init>
		}break;
 8004ce6:	e1f1      	b.n	80050cc <Built_In_Test_Proc+0x8dc>
			EXT_LD_Ctrl(ON);
 8004ce8:	2001      	movs	r0, #1
 8004cea:	f7fc fa9b 	bl	8001224 <EXT_LD_Ctrl>
			ADC_LD_Measuerment(OFF); // Initial
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fc fb7e 	bl	80013f0 <ADC_LD_Measuerment>
			WaitTime_Init();
 8004cf4:	f7fd fc5c 	bl	80025b0 <WaitTime_Init>
			m_BITProcSeq = BIT_SEQ_LD_MON_ADC_STAB_TIME;
 8004cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004cfa:	2242      	movs	r2, #66	@ 0x42
 8004cfc:	701a      	strb	r2, [r3, #0]
			tSysState.FlagGetAdcOn = OFF;
 8004cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	71da      	strb	r2, [r3, #7]
		}break;
 8004d04:	e1eb      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			tSysState.FlagGetAdcOn = ON;
 8004d06:	4b5a      	ldr	r3, [pc, #360]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	71da      	strb	r2, [r3, #7]
			if ( TRUE == WaitHoldTime_Sec(ON, LD_CTRL_ON_TIME) )
 8004d0c:	2103      	movs	r1, #3
 8004d0e:	2001      	movs	r0, #1
 8004d10:	f7fd fc6c 	bl	80025ec <WaitHoldTime_Sec>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	f040 81da 	bne.w	80050d0 <Built_In_Test_Proc+0x8e0>
				WaitTime_Init();
 8004d1c:	f7fd fc48 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_LD_MON_ADC_CHK_ON;
 8004d20:	4b54      	ldr	r3, [pc, #336]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004d22:	2244      	movs	r2, #68	@ 0x44
 8004d24:	701a      	strb	r2, [r3, #0]
		}break;
 8004d26:	e1d3      	b.n	80050d0 <Built_In_Test_Proc+0x8e0>
			if ( TRUE == WaitHoldTime_mSec(ON, LD_ADC_MEASURE_TIME) )
 8004d28:	210a      	movs	r1, #10
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	f7fd fc88 	bl	8002640 <WaitHoldTime_mSec>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d144      	bne.n	8004dc0 <Built_In_Test_Proc+0x5d0>
				tSysState.FlagGetAdcOn = OFF;
 8004d36:	4b4e      	ldr	r3, [pc, #312]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	71da      	strb	r2, [r3, #7]
				if(TRUE == ADC_ChkCondition(DEFAULT_ADC_LD_NORMAL_VAL, tLdCtrl.AvgAdcVal))
 8004d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8004e78 <Built_In_Test_Proc+0x688>)
 8004d3e:	889b      	ldrh	r3, [r3, #4]
 8004d40:	4619      	mov	r1, r3
 8004d42:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8004d46:	f7fc fc5f 	bl	8001608 <ADC_ChkCondition>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d114      	bne.n	8004d7a <Built_In_Test_Proc+0x58a>
					ADC_LD_Measuerment(OFF);
 8004d50:	2000      	movs	r0, #0
 8004d52:	f7fc fb4d 	bl	80013f0 <ADC_LD_Measuerment>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_LD_OK, OFF);
 8004d56:	2100      	movs	r1, #0
 8004d58:	2003      	movs	r0, #3
 8004d5a:	f7fd fc9b 	bl	8002694 <DeviceSetState>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	4b43      	ldr	r3, [pc, #268]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004d64:	839a      	strh	r2, [r3, #28]
					tLdCtrl.FlagErrOn = OFF;
 8004d66:	4b44      	ldr	r3, [pc, #272]	@ (8004e78 <Built_In_Test_Proc+0x688>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	70da      	strb	r2, [r3, #3]
					m_BITProcSeq = BIT_SEQ_HV_CHK_ADC_CTRL_ON;
 8004d6c:	4b41      	ldr	r3, [pc, #260]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004d6e:	2250      	movs	r2, #80	@ 0x50
 8004d70:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8004d72:	4b3f      	ldr	r3, [pc, #252]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	779a      	strb	r2, [r3, #30]
 8004d78:	e01f      	b.n	8004dba <Built_In_Test_Proc+0x5ca>
					if(3 >= tSysState.ErrRetry++) { m_BITProcSeq = BIT_SEQ_LD_MON_ADC_CTRL_ON; }
 8004d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004d7c:	7f9b      	ldrb	r3, [r3, #30]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	b2d1      	uxtb	r1, r2
 8004d82:	4a3b      	ldr	r2, [pc, #236]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004d84:	7791      	strb	r1, [r2, #30]
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d803      	bhi.n	8004d92 <Built_In_Test_Proc+0x5a2>
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004d8c:	2240      	movs	r2, #64	@ 0x40
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e010      	b.n	8004db4 <Built_In_Test_Proc+0x5c4>
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_LD_OK, ON);
 8004d92:	2101      	movs	r1, #1
 8004d94:	2003      	movs	r0, #3
 8004d96:	f7fd fc7d 	bl	8002694 <DeviceSetState>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b34      	ldr	r3, [pc, #208]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004da0:	839a      	strh	r2, [r3, #28]
						tLdCtrl.FlagErrOn = ON;
 8004da2:	4b35      	ldr	r3, [pc, #212]	@ (8004e78 <Built_In_Test_Proc+0x688>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	70da      	strb	r2, [r3, #3]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8004da8:	4b32      	ldr	r3, [pc, #200]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004daa:	22e0      	movs	r2, #224	@ 0xe0
 8004dac:	701a      	strb	r2, [r3, #0]
						tSysState.ErrRetry = 0;
 8004dae:	4b30      	ldr	r3, [pc, #192]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	779a      	strb	r2, [r3, #30]
					tSysState.FlagGetAdcOn  = ON;
 8004db4:	4b2e      	ldr	r3, [pc, #184]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	71da      	strb	r2, [r3, #7]
				WaitTime_Init();
 8004dba:	f7fd fbf9 	bl	80025b0 <WaitTime_Init>
		}break;
 8004dbe:	e18e      	b.n	80050de <Built_In_Test_Proc+0x8ee>
				ADC_LD_Measuerment(ON);
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	f7fc fb15 	bl	80013f0 <ADC_LD_Measuerment>
		}break;
 8004dc6:	e18a      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			EXT_HV_Ctrl(ON);
 8004dc8:	2001      	movs	r0, #1
 8004dca:	f7fc fa4f 	bl	800126c <EXT_HV_Ctrl>
			ADC_HV_Measuerment(OFF);
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f7fc fb6a 	bl	80014a8 <ADC_HV_Measuerment>
			WaitTime_Init();
 8004dd4:	f7fd fbec 	bl	80025b0 <WaitTime_Init>
			m_BITProcSeq = BIT_SEQ_HV_CHK_ADC_STAB_TIME;
 8004dd8:	4b26      	ldr	r3, [pc, #152]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004dda:	2252      	movs	r2, #82	@ 0x52
 8004ddc:	701a      	strb	r2, [r3, #0]
		} break;
 8004dde:	e17e      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			tSysState.FlagGetAdcOn = ON;
 8004de0:	4b23      	ldr	r3, [pc, #140]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	71da      	strb	r2, [r3, #7]
			if ( TRUE == WaitHoldTime_Sec(ON, HV_CTRL_ON_TIME) )
 8004de6:	2103      	movs	r1, #3
 8004de8:	2001      	movs	r0, #1
 8004dea:	f7fd fbff 	bl	80025ec <WaitHoldTime_Sec>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	f040 816f 	bne.w	80050d4 <Built_In_Test_Proc+0x8e4>
				WaitTime_Init();
 8004df6:	f7fd fbdb 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_HV_CHK_ADC_CHK_ON;
 8004dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004dfc:	2254      	movs	r2, #84	@ 0x54
 8004dfe:	701a      	strb	r2, [r3, #0]
		}break;
 8004e00:	e168      	b.n	80050d4 <Built_In_Test_Proc+0x8e4>
			if ( true == WaitHoldTime_mSec(ON, HV_ADC_MEASURE_TIME) )
 8004e02:	2132      	movs	r1, #50	@ 0x32
 8004e04:	2001      	movs	r0, #1
 8004e06:	f7fd fc1b 	bl	8002640 <WaitHoldTime_mSec>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d14e      	bne.n	8004eae <Built_In_Test_Proc+0x6be>
				tSysState.FlagGetAdcOn = OFF;
 8004e10:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	71da      	strb	r2, [r3, #7]
				if(TRUE == ADC_ChkCondition(DEFAULT_ADC_HV_NORMAL_VAL, tHvCtrl.AvgAdcVal) )
 8004e16:	4b19      	ldr	r3, [pc, #100]	@ (8004e7c <Built_In_Test_Proc+0x68c>)
 8004e18:	889b      	ldrh	r3, [r3, #4]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f240 30b6 	movw	r0, #950	@ 0x3b6
 8004e20:	f7fc fbf2 	bl	8001608 <ADC_ChkCondition>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d114      	bne.n	8004e54 <Built_In_Test_Proc+0x664>
					ADC_HV_Measuerment(OFF);
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f7fc fb3c 	bl	80014a8 <ADC_HV_Measuerment>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_HV_OK, OFF);
 8004e30:	2100      	movs	r1, #0
 8004e32:	2005      	movs	r0, #5
 8004e34:	f7fd fc2e 	bl	8002694 <DeviceSetState>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004e3e:	839a      	strh	r2, [r3, #28]
					tHvCtrl.FlagErrOn = OFF;
 8004e40:	4b0e      	ldr	r3, [pc, #56]	@ (8004e7c <Built_In_Test_Proc+0x68c>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	70da      	strb	r2, [r3, #3]
					m_BITProcSeq = BIT_SEQ_PD_SIG_ADC_CTRL_ON;
 8004e46:	4b0b      	ldr	r3, [pc, #44]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004e48:	2260      	movs	r2, #96	@ 0x60
 8004e4a:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8004e4c:	4b08      	ldr	r3, [pc, #32]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	779a      	strb	r2, [r3, #30]
 8004e52:	e029      	b.n	8004ea8 <Built_In_Test_Proc+0x6b8>
					if(3 >= tSysState.ErrRetry++) { m_BITProcSeq = BIT_SEQ_HV_CHK_ADC_CTRL_ON; }
 8004e54:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004e56:	7f9b      	ldrb	r3, [r3, #30]
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	b2d1      	uxtb	r1, r2
 8004e5c:	4a04      	ldr	r2, [pc, #16]	@ (8004e70 <Built_In_Test_Proc+0x680>)
 8004e5e:	7791      	strb	r1, [r2, #30]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d80d      	bhi.n	8004e80 <Built_In_Test_Proc+0x690>
 8004e64:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <Built_In_Test_Proc+0x684>)
 8004e66:	2250      	movs	r2, #80	@ 0x50
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e01a      	b.n	8004ea2 <Built_In_Test_Proc+0x6b2>
 8004e6c:	200000b4 	.word	0x200000b4
 8004e70:	2000028c 	.word	0x2000028c
 8004e74:	200002d4 	.word	0x200002d4
 8004e78:	20000084 	.word	0x20000084
 8004e7c:	20000094 	.word	0x20000094
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_HV_OK, ON);
 8004e80:	2101      	movs	r1, #1
 8004e82:	2005      	movs	r0, #5
 8004e84:	f7fd fc06 	bl	8002694 <DeviceSetState>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	4b95      	ldr	r3, [pc, #596]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004e8e:	839a      	strh	r2, [r3, #28]
						tHvCtrl.FlagErrOn = ON;
 8004e90:	4b95      	ldr	r3, [pc, #596]	@ (80050e8 <Built_In_Test_Proc+0x8f8>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	70da      	strb	r2, [r3, #3]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8004e96:	4b95      	ldr	r3, [pc, #596]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 8004e98:	22e0      	movs	r2, #224	@ 0xe0
 8004e9a:	701a      	strb	r2, [r3, #0]
						tSysState.ErrRetry = 0;
 8004e9c:	4b91      	ldr	r3, [pc, #580]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	779a      	strb	r2, [r3, #30]
					tSysState.FlagGetAdcOn  = ON;
 8004ea2:	4b90      	ldr	r3, [pc, #576]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	71da      	strb	r2, [r3, #7]
				WaitTime_Init();
 8004ea8:	f7fd fb82 	bl	80025b0 <WaitTime_Init>
		}break;
 8004eac:	e117      	b.n	80050de <Built_In_Test_Proc+0x8ee>
				ADC_HV_Measuerment(ON);
 8004eae:	2001      	movs	r0, #1
 8004eb0:	f7fc fafa 	bl	80014a8 <ADC_HV_Measuerment>
		}break;
 8004eb4:	e113      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			EXT_LD_Ctrl(ON);
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f7fc f9b4 	bl	8001224 <EXT_LD_Ctrl>
			EXT_PD_Ctrl(ON);
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	f7fc f9f9 	bl	80012b4 <EXT_PD_Ctrl>
			ADC_PD_Measuerment(OFF);
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f7fc fa3e 	bl	8001344 <ADC_PD_Measuerment>
			WaitTime_Init();
 8004ec8:	f7fd fb72 	bl	80025b0 <WaitTime_Init>
			m_BITProcSeq = BIT_SEQ_PD_SIG_ADC_STAB_TIME;
 8004ecc:	4b87      	ldr	r3, [pc, #540]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 8004ece:	2262      	movs	r2, #98	@ 0x62
 8004ed0:	701a      	strb	r2, [r3, #0]
		}break;
 8004ed2:	e104      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			tSysState.FlagGetAdcOn = ON;
 8004ed4:	4b83      	ldr	r3, [pc, #524]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	71da      	strb	r2, [r3, #7]
			if ( TRUE == WaitHoldTime_Sec(ON, PD_CTRL_ON_TIME) )
 8004eda:	2103      	movs	r1, #3
 8004edc:	2001      	movs	r0, #1
 8004ede:	f7fd fb85 	bl	80025ec <WaitHoldTime_Sec>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 80f7 	bne.w	80050d8 <Built_In_Test_Proc+0x8e8>
				WaitTime_Init();
 8004eea:	f7fd fb61 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_PD_SIG_ADC_CHK_ON;
 8004eee:	4b7f      	ldr	r3, [pc, #508]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 8004ef0:	2264      	movs	r2, #100	@ 0x64
 8004ef2:	701a      	strb	r2, [r3, #0]
		}break;
 8004ef4:	e0f0      	b.n	80050d8 <Built_In_Test_Proc+0x8e8>
			if ( true == WaitHoldTime_mSec(ON, PD_ADC_MEASURE_TIME) )
 8004ef6:	211e      	movs	r1, #30
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f7fd fba1 	bl	8002640 <WaitHoldTime_mSec>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d142      	bne.n	8004f8a <Built_In_Test_Proc+0x79a>
				tSysState.FlagGetAdcOn = OFF;
 8004f04:	4b77      	ldr	r3, [pc, #476]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	71da      	strb	r2, [r3, #7]
				if(DEFAULT_ADC_PD_ERROR_CNT > tPdCtrl.ErrorCount)
 8004f0a:	4b79      	ldr	r3, [pc, #484]	@ (80050f0 <Built_In_Test_Proc+0x900>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d814      	bhi.n	8004f40 <Built_In_Test_Proc+0x750>
					ADC_PD_Measuerment(OFF);
 8004f16:	2000      	movs	r0, #0
 8004f18:	f7fc fa14 	bl	8001344 <ADC_PD_Measuerment>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_PD_OK, OFF);
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	2006      	movs	r0, #6
 8004f20:	f7fd fbb8 	bl	8002694 <DeviceSetState>
 8004f24:	4603      	mov	r3, r0
 8004f26:	461a      	mov	r2, r3
 8004f28:	4b6e      	ldr	r3, [pc, #440]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004f2a:	839a      	strh	r2, [r3, #28]
					tHvCtrl.FlagErrOn = OFF;
 8004f2c:	4b6e      	ldr	r3, [pc, #440]	@ (80050e8 <Built_In_Test_Proc+0x8f8>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	70da      	strb	r2, [r3, #3]
					m_BITProcSeq = BIT_SEQ_SiPM_SIG_ADC_CTRL_ON;
 8004f32:	4b6e      	ldr	r3, [pc, #440]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 8004f34:	2270      	movs	r2, #112	@ 0x70
 8004f36:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8004f38:	4b6a      	ldr	r3, [pc, #424]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	779a      	strb	r2, [r3, #30]
 8004f3e:	e021      	b.n	8004f84 <Built_In_Test_Proc+0x794>
					tSysState.ErrRetry++;
 8004f40:	4b68      	ldr	r3, [pc, #416]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004f42:	7f9b      	ldrb	r3, [r3, #30]
 8004f44:	3301      	adds	r3, #1
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	4b66      	ldr	r3, [pc, #408]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004f4a:	779a      	strb	r2, [r3, #30]
					if(3 >= tSysState.ErrRetry) { m_BITProcSeq = BIT_SEQ_PD_SIG_ADC_CTRL_ON; }
 8004f4c:	4b65      	ldr	r3, [pc, #404]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004f4e:	7f9b      	ldrb	r3, [r3, #30]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d803      	bhi.n	8004f5c <Built_In_Test_Proc+0x76c>
 8004f54:	4b65      	ldr	r3, [pc, #404]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 8004f56:	2260      	movs	r2, #96	@ 0x60
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e010      	b.n	8004f7e <Built_In_Test_Proc+0x78e>
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_PD_OK, OFF);
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	2006      	movs	r0, #6
 8004f60:	f7fd fb98 	bl	8002694 <DeviceSetState>
 8004f64:	4603      	mov	r3, r0
 8004f66:	461a      	mov	r2, r3
 8004f68:	4b5e      	ldr	r3, [pc, #376]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004f6a:	839a      	strh	r2, [r3, #28]
						tPdCtrl.FlagErrOn = ON;
 8004f6c:	4b60      	ldr	r3, [pc, #384]	@ (80050f0 <Built_In_Test_Proc+0x900>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	70da      	strb	r2, [r3, #3]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8004f72:	4b5e      	ldr	r3, [pc, #376]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 8004f74:	22e0      	movs	r2, #224	@ 0xe0
 8004f76:	701a      	strb	r2, [r3, #0]
						tSysState.ErrRetry = 0;
 8004f78:	4b5a      	ldr	r3, [pc, #360]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	779a      	strb	r2, [r3, #30]
					tSysState.FlagGetAdcOn  = ON;
 8004f7e:	4b59      	ldr	r3, [pc, #356]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	71da      	strb	r2, [r3, #7]
				WaitTime_Init();
 8004f84:	f7fd fb14 	bl	80025b0 <WaitTime_Init>
		}break;
 8004f88:	e0a9      	b.n	80050de <Built_In_Test_Proc+0x8ee>
				ADC_PD_Measuerment(ON);
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	f7fc f9da 	bl	8001344 <ADC_PD_Measuerment>
		}break;
 8004f90:	e0a5      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			ADC_SiPM_Measuerment(OFF);
 8004f92:	2000      	movs	r0, #0
 8004f94:	f7fc fae0 	bl	8001558 <ADC_SiPM_Measuerment>
			EXT_SiPM_Ctrl(ON);
 8004f98:	2001      	movs	r0, #1
 8004f9a:	f7fc f9af 	bl	80012fc <EXT_SiPM_Ctrl>
			WaitTime_Init();
 8004f9e:	f7fd fb07 	bl	80025b0 <WaitTime_Init>
			m_BITProcSeq = BIT_SEQ_SiPM_SIG_ADC_STAB_TIME;
 8004fa2:	4b52      	ldr	r3, [pc, #328]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 8004fa4:	2272      	movs	r2, #114	@ 0x72
 8004fa6:	701a      	strb	r2, [r3, #0]
		}break;
 8004fa8:	e099      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			tSysState.FlagGetAdcOn = ON;
 8004faa:	4b4e      	ldr	r3, [pc, #312]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	71da      	strb	r2, [r3, #7]
			if ( TRUE == WaitHoldTime_Sec(ON, SiPM_CTRL_ON_TIME) )
 8004fb0:	2103      	movs	r1, #3
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	f7fd fb1a 	bl	80025ec <WaitHoldTime_Sec>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	f040 808e 	bne.w	80050dc <Built_In_Test_Proc+0x8ec>
				WaitTime_Init();
 8004fc0:	f7fd faf6 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_SiPM_SIG_ADC_CHK_ON;
 8004fc4:	4b49      	ldr	r3, [pc, #292]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 8004fc6:	2274      	movs	r2, #116	@ 0x74
 8004fc8:	701a      	strb	r2, [r3, #0]
		}break;
 8004fca:	e087      	b.n	80050dc <Built_In_Test_Proc+0x8ec>
			if ( true == WaitHoldTime_mSec(ON, PD_ADC_MEASURE_TIME) )
 8004fcc:	211e      	movs	r1, #30
 8004fce:	2001      	movs	r0, #1
 8004fd0:	f7fd fb36 	bl	8002640 <WaitHoldTime_mSec>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d142      	bne.n	8005060 <Built_In_Test_Proc+0x870>
				tSysState.FlagGetAdcOn = OFF;
 8004fda:	4b42      	ldr	r3, [pc, #264]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	71da      	strb	r2, [r3, #7]
				if(DEFAULT_ADC_SiPM_ERROR_CNT > tSiPmCtrl.ErrorCount)
 8004fe0:	4b44      	ldr	r3, [pc, #272]	@ (80050f4 <Built_In_Test_Proc+0x904>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d814      	bhi.n	8005016 <Built_In_Test_Proc+0x826>
					ADC_SiPM_Measuerment(OFF);
 8004fec:	2000      	movs	r0, #0
 8004fee:	f7fc fab3 	bl	8001558 <ADC_SiPM_Measuerment>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SiPM_OK, OFF);
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	2007      	movs	r0, #7
 8004ff6:	f7fd fb4d 	bl	8002694 <DeviceSetState>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4b39      	ldr	r3, [pc, #228]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005000:	839a      	strh	r2, [r3, #28]
					tSiPmCtrl.FlagErrOn = OFF;
 8005002:	4b3c      	ldr	r3, [pc, #240]	@ (80050f4 <Built_In_Test_Proc+0x904>)
 8005004:	2200      	movs	r2, #0
 8005006:	70da      	strb	r2, [r3, #3]
					m_BITProcSeq = BIT_SEQ_COMPLETE;
 8005008:	4b38      	ldr	r3, [pc, #224]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 800500a:	2290      	movs	r2, #144	@ 0x90
 800500c:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 800500e:	4b35      	ldr	r3, [pc, #212]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005010:	2200      	movs	r2, #0
 8005012:	779a      	strb	r2, [r3, #30]
 8005014:	e021      	b.n	800505a <Built_In_Test_Proc+0x86a>
					tSysState.ErrRetry++;
 8005016:	4b33      	ldr	r3, [pc, #204]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005018:	7f9b      	ldrb	r3, [r3, #30]
 800501a:	3301      	adds	r3, #1
 800501c:	b2da      	uxtb	r2, r3
 800501e:	4b31      	ldr	r3, [pc, #196]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005020:	779a      	strb	r2, [r3, #30]
					if(3 >= tSysState.ErrRetry) { m_BITProcSeq = BIT_SEQ_SiPM_SIG_ADC_CTRL_ON; }
 8005022:	4b30      	ldr	r3, [pc, #192]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005024:	7f9b      	ldrb	r3, [r3, #30]
 8005026:	2b03      	cmp	r3, #3
 8005028:	d803      	bhi.n	8005032 <Built_In_Test_Proc+0x842>
 800502a:	4b30      	ldr	r3, [pc, #192]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 800502c:	2270      	movs	r2, #112	@ 0x70
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e010      	b.n	8005054 <Built_In_Test_Proc+0x864>
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SiPM_OK, ON);
 8005032:	2101      	movs	r1, #1
 8005034:	2007      	movs	r0, #7
 8005036:	f7fd fb2d 	bl	8002694 <DeviceSetState>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	4b29      	ldr	r3, [pc, #164]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005040:	839a      	strh	r2, [r3, #28]
						tSiPmCtrl.FlagErrOn = ON;
 8005042:	4b2c      	ldr	r3, [pc, #176]	@ (80050f4 <Built_In_Test_Proc+0x904>)
 8005044:	2201      	movs	r2, #1
 8005046:	70da      	strb	r2, [r3, #3]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8005048:	4b28      	ldr	r3, [pc, #160]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 800504a:	22e0      	movs	r2, #224	@ 0xe0
 800504c:	701a      	strb	r2, [r3, #0]
						tSysState.ErrRetry = 0;
 800504e:	4b25      	ldr	r3, [pc, #148]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005050:	2200      	movs	r2, #0
 8005052:	779a      	strb	r2, [r3, #30]
					tSysState.FlagGetAdcOn  = ON;
 8005054:	4b23      	ldr	r3, [pc, #140]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005056:	2201      	movs	r2, #1
 8005058:	71da      	strb	r2, [r3, #7]
				WaitTime_Init();
 800505a:	f7fd faa9 	bl	80025b0 <WaitTime_Init>
		}break;
 800505e:	e03e      	b.n	80050de <Built_In_Test_Proc+0x8ee>
				ADC_SiPM_Measuerment(ON);
 8005060:	2001      	movs	r0, #1
 8005062:	f7fc fa79 	bl	8001558 <ADC_SiPM_Measuerment>
		}break;
 8005066:	e03a      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			WaitTime_Init();
 8005068:	f7fd faa2 	bl	80025b0 <WaitTime_Init>
			tSysState.BitChkOn = ON;
 800506c:	4b1d      	ldr	r3, [pc, #116]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 800506e:	2201      	movs	r2, #1
 8005070:	711a      	strb	r2, [r3, #4]
			tSysState.flagBitErrOn = OFF;
 8005072:	4b1c      	ldr	r3, [pc, #112]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005074:	2200      	movs	r2, #0
 8005076:	715a      	strb	r2, [r3, #5]
			RspAssamblyTxMsg(CMD_BIT_MANUAL_START);
 8005078:	2000      	movs	r0, #0
 800507a:	f7fe fbab 	bl	80037d4 <RspAssamblyTxMsg>
			if(ON == tSysState.FlagBitChkOn)
 800507e:	4b19      	ldr	r3, [pc, #100]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005080:	7c9b      	ldrb	r3, [r3, #18]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d102      	bne.n	800508c <Built_In_Test_Proc+0x89c>
				tSysState.FlagBitChkOn = OFF;
 8005086:	4b17      	ldr	r3, [pc, #92]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005088:	2200      	movs	r2, #0
 800508a:	749a      	strb	r2, [r3, #18]
			m_BITProcSeq = BIT_SEQ_IDLE;
 800508c:	4b17      	ldr	r3, [pc, #92]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]
		}break;
 8005092:	e024      	b.n	80050de <Built_In_Test_Proc+0x8ee>
			tSysState.BitChkOn = OFF;
 8005094:	4b13      	ldr	r3, [pc, #76]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 8005096:	2200      	movs	r2, #0
 8005098:	711a      	strb	r2, [r3, #4]
			tSysState.flagBitErrOn = ON;
 800509a:	4b12      	ldr	r3, [pc, #72]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 800509c:	2201      	movs	r2, #1
 800509e:	715a      	strb	r2, [r3, #5]
			tSysState.FlagBitChkOn = OFF;
 80050a0:	4b10      	ldr	r3, [pc, #64]	@ (80050e4 <Built_In_Test_Proc+0x8f4>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	749a      	strb	r2, [r3, #18]
			m_BITProcSeq = BIT_SEQ_FAIL;
 80050a6:	4b11      	ldr	r3, [pc, #68]	@ (80050ec <Built_In_Test_Proc+0x8fc>)
 80050a8:	22ef      	movs	r2, #239	@ 0xef
 80050aa:	701a      	strb	r2, [r3, #0]
			RspAssamblyTxMsg(CMD_DEVICE_STATE);
 80050ac:	200e      	movs	r0, #14
 80050ae:	f7fe fb91 	bl	80037d4 <RspAssamblyTxMsg>
		}break;
 80050b2:	e014      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050b4:	bf00      	nop
 80050b6:	e012      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050b8:	bf00      	nop
 80050ba:	e010      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050bc:	bf00      	nop
 80050be:	e00e      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050c0:	bf00      	nop
 80050c2:	e00c      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050c4:	bf00      	nop
 80050c6:	e00a      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050c8:	bf00      	nop
 80050ca:	e008      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050cc:	bf00      	nop
 80050ce:	e006      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050d0:	bf00      	nop
 80050d2:	e004      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <Built_In_Test_Proc+0x8ee>
		}break;
 80050dc:	bf00      	nop
}
 80050de:	bf00      	nop
 80050e0:	bd98      	pop	{r3, r4, r7, pc}
 80050e2:	bf00      	nop
 80050e4:	2000028c 	.word	0x2000028c
 80050e8:	20000094 	.word	0x20000094
 80050ec:	200002d4 	.word	0x200002d4
 80050f0:	20000074 	.word	0x20000074
 80050f4:	200000a4 	.word	0x200000a4

080050f8 <SYSTEM_SEQ>:
void SYSTEM_SEQ(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
	switch(m_SysProcSeq)
 80050fc:	4b87      	ldr	r3, [pc, #540]	@ (800531c <SYSTEM_SEQ+0x224>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2bee      	cmp	r3, #238	@ 0xee
 8005102:	f000 80fb 	beq.w	80052fc <SYSTEM_SEQ+0x204>
 8005106:	2bee      	cmp	r3, #238	@ 0xee
 8005108:	f300 8105 	bgt.w	8005316 <SYSTEM_SEQ+0x21e>
 800510c:	2be0      	cmp	r3, #224	@ 0xe0
 800510e:	f000 80f7 	beq.w	8005300 <SYSTEM_SEQ+0x208>
 8005112:	2be0      	cmp	r3, #224	@ 0xe0
 8005114:	f300 80ff 	bgt.w	8005316 <SYSTEM_SEQ+0x21e>
 8005118:	2ba0      	cmp	r3, #160	@ 0xa0
 800511a:	f000 80eb 	beq.w	80052f4 <SYSTEM_SEQ+0x1fc>
 800511e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005120:	f300 80f9 	bgt.w	8005316 <SYSTEM_SEQ+0x21e>
 8005124:	2b90      	cmp	r3, #144	@ 0x90
 8005126:	f000 80ed 	beq.w	8005304 <SYSTEM_SEQ+0x20c>
 800512a:	2b90      	cmp	r3, #144	@ 0x90
 800512c:	f300 80f3 	bgt.w	8005316 <SYSTEM_SEQ+0x21e>
 8005130:	2b80      	cmp	r3, #128	@ 0x80
 8005132:	f000 80e9 	beq.w	8005308 <SYSTEM_SEQ+0x210>
 8005136:	2b80      	cmp	r3, #128	@ 0x80
 8005138:	f300 80ed 	bgt.w	8005316 <SYSTEM_SEQ+0x21e>
 800513c:	2b70      	cmp	r3, #112	@ 0x70
 800513e:	f000 80d3 	beq.w	80052e8 <SYSTEM_SEQ+0x1f0>
 8005142:	2b70      	cmp	r3, #112	@ 0x70
 8005144:	f300 80e7 	bgt.w	8005316 <SYSTEM_SEQ+0x21e>
 8005148:	2b64      	cmp	r3, #100	@ 0x64
 800514a:	f000 80c4 	beq.w	80052d6 <SYSTEM_SEQ+0x1de>
 800514e:	2b64      	cmp	r3, #100	@ 0x64
 8005150:	f300 80e1 	bgt.w	8005316 <SYSTEM_SEQ+0x21e>
 8005154:	2b60      	cmp	r3, #96	@ 0x60
 8005156:	f000 80ca 	beq.w	80052ee <SYSTEM_SEQ+0x1f6>
 800515a:	2b60      	cmp	r3, #96	@ 0x60
 800515c:	f300 80db 	bgt.w	8005316 <SYSTEM_SEQ+0x21e>
 8005160:	2b50      	cmp	r3, #80	@ 0x50
 8005162:	f000 80b5 	beq.w	80052d0 <SYSTEM_SEQ+0x1d8>
 8005166:	2b50      	cmp	r3, #80	@ 0x50
 8005168:	f300 80d5 	bgt.w	8005316 <SYSTEM_SEQ+0x21e>
 800516c:	2b35      	cmp	r3, #53	@ 0x35
 800516e:	dc75      	bgt.n	800525c <SYSTEM_SEQ+0x164>
 8005170:	2b00      	cmp	r3, #0
 8005172:	f2c0 80d0 	blt.w	8005316 <SYSTEM_SEQ+0x21e>
 8005176:	2b35      	cmp	r3, #53	@ 0x35
 8005178:	f200 80cd 	bhi.w	8005316 <SYSTEM_SEQ+0x21e>
 800517c:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <SYSTEM_SEQ+0x8c>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	08005263 	.word	0x08005263
 8005188:	08005317 	.word	0x08005317
 800518c:	08005317 	.word	0x08005317
 8005190:	08005317 	.word	0x08005317
 8005194:	08005317 	.word	0x08005317
 8005198:	0800530d 	.word	0x0800530d
 800519c:	08005317 	.word	0x08005317
 80051a0:	08005317 	.word	0x08005317
 80051a4:	08005317 	.word	0x08005317
 80051a8:	08005317 	.word	0x08005317
 80051ac:	08005317 	.word	0x08005317
 80051b0:	08005317 	.word	0x08005317
 80051b4:	08005317 	.word	0x08005317
 80051b8:	08005317 	.word	0x08005317
 80051bc:	08005317 	.word	0x08005317
 80051c0:	08005317 	.word	0x08005317
 80051c4:	0800526b 	.word	0x0800526b
 80051c8:	08005317 	.word	0x08005317
 80051cc:	08005317 	.word	0x08005317
 80051d0:	08005317 	.word	0x08005317
 80051d4:	08005317 	.word	0x08005317
 80051d8:	08005317 	.word	0x08005317
 80051dc:	08005317 	.word	0x08005317
 80051e0:	08005317 	.word	0x08005317
 80051e4:	08005317 	.word	0x08005317
 80051e8:	08005317 	.word	0x08005317
 80051ec:	08005317 	.word	0x08005317
 80051f0:	08005317 	.word	0x08005317
 80051f4:	08005317 	.word	0x08005317
 80051f8:	08005317 	.word	0x08005317
 80051fc:	08005317 	.word	0x08005317
 8005200:	08005317 	.word	0x08005317
 8005204:	0800530d 	.word	0x0800530d
 8005208:	08005317 	.word	0x08005317
 800520c:	08005317 	.word	0x08005317
 8005210:	08005317 	.word	0x08005317
 8005214:	08005317 	.word	0x08005317
 8005218:	0800530d 	.word	0x0800530d
 800521c:	08005317 	.word	0x08005317
 8005220:	08005317 	.word	0x08005317
 8005224:	08005317 	.word	0x08005317
 8005228:	08005317 	.word	0x08005317
 800522c:	08005317 	.word	0x08005317
 8005230:	08005317 	.word	0x08005317
 8005234:	08005317 	.word	0x08005317
 8005238:	08005317 	.word	0x08005317
 800523c:	08005317 	.word	0x08005317
 8005240:	08005317 	.word	0x08005317
 8005244:	0800528d 	.word	0x0800528d
 8005248:	08005317 	.word	0x08005317
 800524c:	08005317 	.word	0x08005317
 8005250:	08005317 	.word	0x08005317
 8005254:	08005317 	.word	0x08005317
 8005258:	0800529b 	.word	0x0800529b
 800525c:	2b40      	cmp	r3, #64	@ 0x40
 800525e:	d031      	beq.n	80052c4 <SYSTEM_SEQ+0x1cc>
		case SYS_SEQ_RESET :
		{
			SCB->AIRCR = AIRCR_VECTKEY_MASK | 0x04;
		}break;
	}
}
 8005260:	e059      	b.n	8005316 <SYSTEM_SEQ+0x21e>
			m_SysProcSeq = SYS_SEQ_INIT;
 8005262:	4b2e      	ldr	r3, [pc, #184]	@ (800531c <SYSTEM_SEQ+0x224>)
 8005264:	2210      	movs	r2, #16
 8005266:	701a      	strb	r2, [r3, #0]
		}break;
 8005268:	e055      	b.n	8005316 <SYSTEM_SEQ+0x21e>
			FAN_Init();
 800526a:	f7fc fa61 	bl	8001730 <FAN_Init>
			m_SysProcSeq = SYS_SEQ_READY; 				//Debug_ None BIT Check
 800526e:	4b2b      	ldr	r3, [pc, #172]	@ (800531c <SYSTEM_SEQ+0x224>)
 8005270:	2205      	movs	r2, #5
 8005272:	701a      	strb	r2, [r3, #0]
			m_MaxPeckAdVal =  tParam[PM_CH1].LB;
 8005274:	4b2a      	ldr	r3, [pc, #168]	@ (8005320 <SYSTEM_SEQ+0x228>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	b29a      	uxth	r2, r3
 800527a:	4b2a      	ldr	r3, [pc, #168]	@ (8005324 <SYSTEM_SEQ+0x22c>)
 800527c:	801a      	strh	r2, [r3, #0]
			m_MaxPeckAdVal2 = tParam[PM_SiPM].LB;
 800527e:	4b28      	ldr	r3, [pc, #160]	@ (8005320 <SYSTEM_SEQ+0x228>)
 8005280:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005284:	b29a      	uxth	r2, r3
 8005286:	4b28      	ldr	r3, [pc, #160]	@ (8005328 <SYSTEM_SEQ+0x230>)
 8005288:	801a      	strh	r2, [r3, #0]
		}break;
 800528a:	e044      	b.n	8005316 <SYSTEM_SEQ+0x21e>
			m_BITProcSeq = BIT_SEQ_START; //Debug
 800528c:	4b27      	ldr	r3, [pc, #156]	@ (800532c <SYSTEM_SEQ+0x234>)
 800528e:	2210      	movs	r2, #16
 8005290:	701a      	strb	r2, [r3, #0]
			m_SysProcSeq = SYS_SEQ_BIT_WAIT;
 8005292:	4b22      	ldr	r3, [pc, #136]	@ (800531c <SYSTEM_SEQ+0x224>)
 8005294:	2235      	movs	r2, #53	@ 0x35
 8005296:	701a      	strb	r2, [r3, #0]
		}break;
 8005298:	e03d      	b.n	8005316 <SYSTEM_SEQ+0x21e>
			Built_In_Test_Proc();
 800529a:	f7ff faa9 	bl	80047f0 <Built_In_Test_Proc>
			if(BIT_SEQ_IDLE == m_BITProcSeq )
 800529e:	4b23      	ldr	r3, [pc, #140]	@ (800532c <SYSTEM_SEQ+0x234>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d134      	bne.n	8005310 <SYSTEM_SEQ+0x218>
				if(ON == tSysState.flagBitErrOn ) 	{ m_SysProcSeq = SYS_SEQ_FAULT; }
 80052a6:	4b22      	ldr	r3, [pc, #136]	@ (8005330 <SYSTEM_SEQ+0x238>)
 80052a8:	795b      	ldrb	r3, [r3, #5]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d102      	bne.n	80052b4 <SYSTEM_SEQ+0x1bc>
 80052ae:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <SYSTEM_SEQ+0x224>)
 80052b0:	22ee      	movs	r2, #238	@ 0xee
 80052b2:	701a      	strb	r2, [r3, #0]
				if(ON == tSysState.BitChkOn)
 80052b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005330 <SYSTEM_SEQ+0x238>)
 80052b6:	791b      	ldrb	r3, [r3, #4]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d129      	bne.n	8005310 <SYSTEM_SEQ+0x218>
					m_SysProcSeq = SYS_SEQ_STANDBY_MODE;
 80052bc:	4b17      	ldr	r3, [pc, #92]	@ (800531c <SYSTEM_SEQ+0x224>)
 80052be:	2240      	movs	r2, #64	@ 0x40
 80052c0:	701a      	strb	r2, [r3, #0]
		}break;
 80052c2:	e025      	b.n	8005310 <SYSTEM_SEQ+0x218>
			Measure_Stop();
 80052c4:	f7fd fe36 	bl	8002f34 <Measure_Stop>
			m_SysProcSeq = SYS_SEQ_READY;
 80052c8:	4b14      	ldr	r3, [pc, #80]	@ (800531c <SYSTEM_SEQ+0x224>)
 80052ca:	2205      	movs	r2, #5
 80052cc:	701a      	strb	r2, [r3, #0]
		}break;
 80052ce:	e022      	b.n	8005316 <SYSTEM_SEQ+0x21e>
			Operating_Process();
 80052d0:	f7ff f952 	bl	8004578 <Operating_Process>
		}break;
 80052d4:	e01f      	b.n	8005316 <SYSTEM_SEQ+0x21e>
			if(TRUE == FanCleanCtrl()) {
 80052d6:	f7fd fd2b 	bl	8002d30 <FanCleanCtrl>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d119      	bne.n	8005314 <SYSTEM_SEQ+0x21c>
				m_SysProcSeq = SYS_SEQ_READY;
 80052e0:	4b0e      	ldr	r3, [pc, #56]	@ (800531c <SYSTEM_SEQ+0x224>)
 80052e2:	2205      	movs	r2, #5
 80052e4:	701a      	strb	r2, [r3, #0]
		}break;
 80052e6:	e015      	b.n	8005314 <SYSTEM_SEQ+0x21c>
			Manual_GetAdcMsg();
 80052e8:	f7fe fde6 	bl	8003eb8 <Manual_GetAdcMsg>
		}break;
 80052ec:	e013      	b.n	8005316 <SYSTEM_SEQ+0x21e>
			Measure_Stop();
 80052ee:	f7fd fe21 	bl	8002f34 <Measure_Stop>
		}break;
 80052f2:	e010      	b.n	8005316 <SYSTEM_SEQ+0x21e>
			SCB->AIRCR = AIRCR_VECTKEY_MASK | 0x04;
 80052f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005334 <SYSTEM_SEQ+0x23c>)
 80052f6:	4a10      	ldr	r2, [pc, #64]	@ (8005338 <SYSTEM_SEQ+0x240>)
 80052f8:	60da      	str	r2, [r3, #12]
		}break;
 80052fa:	e00c      	b.n	8005316 <SYSTEM_SEQ+0x21e>
		}break;
 80052fc:	bf00      	nop
 80052fe:	e00a      	b.n	8005316 <SYSTEM_SEQ+0x21e>
		}break;
 8005300:	bf00      	nop
 8005302:	e008      	b.n	8005316 <SYSTEM_SEQ+0x21e>
		}break;
 8005304:	bf00      	nop
 8005306:	e006      	b.n	8005316 <SYSTEM_SEQ+0x21e>
		}break;
 8005308:	bf00      	nop
 800530a:	e004      	b.n	8005316 <SYSTEM_SEQ+0x21e>
		}break;
 800530c:	bf00      	nop
 800530e:	e002      	b.n	8005316 <SYSTEM_SEQ+0x21e>
		}break;
 8005310:	bf00      	nop
 8005312:	e000      	b.n	8005316 <SYSTEM_SEQ+0x21e>
		}break;
 8005314:	bf00      	nop
}
 8005316:	bf00      	nop
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200002d5 	.word	0x200002d5
 8005320:	200000cc 	.word	0x200000cc
 8005324:	200002d6 	.word	0x200002d6
 8005328:	200002d8 	.word	0x200002d8
 800532c:	200002d4 	.word	0x200002d4
 8005330:	2000028c 	.word	0x2000028c
 8005334:	e000ed00 	.word	0xe000ed00
 8005338:	05fa0004 	.word	0x05fa0004

0800533c <SYSTEM_Process>:

void SYSTEM_Process(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
	UART_MsgProc();
 8005340:	f000 fb5c 	bl	80059fc <UART_MsgProc>
	PostMessage_Proc();
 8005344:	f7fe ff44 	bl	80041d0 <PostMessage_Proc>

	SYSTEM_SEQ();
 8005348:	f7ff fed6 	bl	80050f8 <SYSTEM_SEQ>
	SystemTimeCtrl();
 800534c:	f000 f802 	bl	8005354 <SystemTimeCtrl>
}
 8005350:	bf00      	nop
 8005352:	bd80      	pop	{r7, pc}

08005354 <SystemTimeCtrl>:

void SystemTimeCtrl(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
	if(ON == tSysTime.FlagSysTickOn)
 8005358:	4b27      	ldr	r3, [pc, #156]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d111      	bne.n	8005384 <SystemTimeCtrl+0x30>
	{
		tSysTime.Sys10mSecTick++;
 8005360:	4b25      	ldr	r3, [pc, #148]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 8005362:	7b9b      	ldrb	r3, [r3, #14]
 8005364:	3301      	adds	r3, #1
 8005366:	b2da      	uxtb	r2, r3
 8005368:	4b23      	ldr	r3, [pc, #140]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 800536a:	739a      	strb	r2, [r3, #14]

		if(ON == tSysTime.FlagWaitmSecTimeOn) { tSysTime.WaitmSecTime++; }
 800536c:	4b22      	ldr	r3, [pc, #136]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 800536e:	7f1b      	ldrb	r3, [r3, #28]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d104      	bne.n	800537e <SystemTimeCtrl+0x2a>
 8005374:	4b20      	ldr	r3, [pc, #128]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	3301      	adds	r3, #1
 800537a:	4a1f      	ldr	r2, [pc, #124]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 800537c:	6213      	str	r3, [r2, #32]
		tSysTime.FlagSysTickOn = OFF;
 800537e:	4b1e      	ldr	r3, [pc, #120]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]


	}

	if (TICK_100mSEC <= tSysTime.Sys10mSecTick)
 8005384:	4b1c      	ldr	r3, [pc, #112]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 8005386:	7b9b      	ldrb	r3, [r3, #14]
 8005388:	2b09      	cmp	r3, #9
 800538a:	d908      	bls.n	800539e <SystemTimeCtrl+0x4a>
	{
		tSysTime.Sys10mSecTick = 0;
 800538c:	4b1a      	ldr	r3, [pc, #104]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 800538e:	2200      	movs	r2, #0
 8005390:	739a      	strb	r2, [r3, #14]
		tSysTime.Sys100mSecTick++;
 8005392:	4b19      	ldr	r3, [pc, #100]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 8005394:	8a1b      	ldrh	r3, [r3, #16]
 8005396:	3301      	adds	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	4b17      	ldr	r3, [pc, #92]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 800539c:	821a      	strh	r2, [r3, #16]
	}

	if (TICK_1SEC <= tSysTime.Sys100mSecTick)
 800539e:	4b16      	ldr	r3, [pc, #88]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 80053a0:	8a1b      	ldrh	r3, [r3, #16]
 80053a2:	2b09      	cmp	r3, #9
 80053a4:	d926      	bls.n	80053f4 <SystemTimeCtrl+0xa0>
	{
		tSysTime.Sys100mSecTick = 0;
 80053a6:	4b14      	ldr	r3, [pc, #80]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	821a      	strh	r2, [r3, #16]
		if(ON == tSysState.FlagOperModeOn)
 80053ac:	4b13      	ldr	r3, [pc, #76]	@ (80053fc <SystemTimeCtrl+0xa8>)
 80053ae:	7adb      	ldrb	r3, [r3, #11]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d111      	bne.n	80053d8 <SystemTimeCtrl+0x84>
		{
			if(ON == tFan.FlagCleanModeOn)
 80053b4:	4b12      	ldr	r3, [pc, #72]	@ (8005400 <SystemTimeCtrl+0xac>)
 80053b6:	799b      	ldrb	r3, [r3, #6]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d10d      	bne.n	80053d8 <SystemTimeCtrl+0x84>
			{
				tFan.CleWorkTime++;
 80053bc:	4b10      	ldr	r3, [pc, #64]	@ (8005400 <SystemTimeCtrl+0xac>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	3301      	adds	r3, #1
 80053c2:	4a0f      	ldr	r2, [pc, #60]	@ (8005400 <SystemTimeCtrl+0xac>)
 80053c4:	6093      	str	r3, [r2, #8]

				if(tFan.CleInterval <= tFan.CleWorkTime)
 80053c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <SystemTimeCtrl+0xac>)
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <SystemTimeCtrl+0xac>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d802      	bhi.n	80053d8 <SystemTimeCtrl+0x84>
				{
					tSysState.FlagStatClenaOn = ON;
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <SystemTimeCtrl+0xa8>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	735a      	strb	r2, [r3, #13]
		  memcpy(tUartMsg.RingTxTemp, temp, 14);
		  tUartMsg.TxTempCnt = 13;
		  tMsgPkt.FlagTxPktOn = ON;
*/

		MCU_AlarmTempMonitor(tSysState.Temp);
 80053d8:	4b08      	ldr	r3, [pc, #32]	@ (80053fc <SystemTimeCtrl+0xa8>)
 80053da:	8b1b      	ldrh	r3, [r3, #24]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fd f985 	bl	80026ec <MCU_AlarmTempMonitor>
		if(ON == tSysTime.FlagWaitSecTimeOn) { tSysTime.WaitSecTime++; }
 80053e2:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 80053e4:	7d1b      	ldrb	r3, [r3, #20]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d104      	bne.n	80053f4 <SystemTimeCtrl+0xa0>
 80053ea:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	3301      	adds	r3, #1
 80053f0:	4a01      	ldr	r2, [pc, #4]	@ (80053f8 <SystemTimeCtrl+0xa4>)
 80053f2:	6193      	str	r3, [r2, #24]
	}
}
 80053f4:	bf00      	nop
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	200002ac 	.word	0x200002ac
 80053fc:	2000028c 	.word	0x2000028c
 8005400:	200000b4 	.word	0x200000b4

08005404 <UART_RxInit>:
struct _tUART_MSG 		tUartMsg;
struct _tMSG_PACKET		tMsgPkt;


void UART_RxInit()
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
	tMsgPkt.RxMsgCnt = 0;
 8005408:	4b09      	ldr	r3, [pc, #36]	@ (8005430 <UART_RxInit+0x2c>)
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
	tUartMsg.RxTempCnt = 0;
 8005410:	4b08      	ldr	r3, [pc, #32]	@ (8005434 <UART_RxInit+0x30>)
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2281 	strb.w	r2, [r3, #641]	@ 0x281
	//tUartMsg.uNewPos = 0;
	//tUartMsg.uOldPos = 0;
	tUartMsg.FlagMsgRcvOn = OFF;
 8005418:	4b06      	ldr	r3, [pc, #24]	@ (8005434 <UART_RxInit+0x30>)
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286

	//memset(tUartMsg.RingRxTemp, 0, sizeof(tUartMsg.RingRxTemp));
	memset(tMsgPkt.RxBuff, 0, sizeof(tMsgPkt.RxBuff));
 8005420:	2280      	movs	r2, #128	@ 0x80
 8005422:	2100      	movs	r1, #0
 8005424:	4802      	ldr	r0, [pc, #8]	@ (8005430 <UART_RxInit+0x2c>)
 8005426:	f007 f981 	bl	800c72c <memset>
}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000570 	.word	0x20000570
 8005434:	200002e4 	.word	0x200002e4

08005438 <UART_TxInit>:

void UART_TxInit()
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
	tMsgPkt.TxMsgCnt = 0;
 800543c:	4b16      	ldr	r3, [pc, #88]	@ (8005498 <UART_TxInit+0x60>)
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	tMsgPkt.FlagTxPktOn = OFF;
 8005444:	4b14      	ldr	r3, [pc, #80]	@ (8005498 <UART_TxInit+0x60>)
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

	tMsgPkt.Cmd = 0;
 800544c:	4b12      	ldr	r3, [pc, #72]	@ (8005498 <UART_TxInit+0x60>)
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	tMsgPkt.Chksum = 0;
 8005454:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <UART_TxInit+0x60>)
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
	tMsgPkt.Set = 0;
 800545c:	4b0e      	ldr	r3, [pc, #56]	@ (8005498 <UART_TxInit+0x60>)
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
	tMsgPkt.Leng = 0;
 8005464:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <UART_TxInit+0x60>)
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

	tUartMsg.TxTempCnt = 0;
 800546c:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <UART_TxInit+0x64>)
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2282 	strb.w	r2, [r3, #642]	@ 0x282
	tMsgPkt.MsgState = MSG_STAT_NO_ERR;
 8005474:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <UART_TxInit+0x60>)
 8005476:	2200      	movs	r2, #0
 8005478:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	memset(tMsgPkt.Txbuff, 0, sizeof(tMsgPkt.Txbuff));
 800547c:	2280      	movs	r2, #128	@ 0x80
 800547e:	2100      	movs	r1, #0
 8005480:	4807      	ldr	r0, [pc, #28]	@ (80054a0 <UART_TxInit+0x68>)
 8005482:	f007 f953 	bl	800c72c <memset>
	memset(tUartMsg.RingTxTemp, 0, sizeof(tUartMsg.RingTxTemp));
 8005486:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800548a:	2100      	movs	r1, #0
 800548c:	4805      	ldr	r0, [pc, #20]	@ (80054a4 <UART_TxInit+0x6c>)
 800548e:	f007 f94d 	bl	800c72c <memset>
}
 8005492:	bf00      	nop
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000570 	.word	0x20000570
 800549c:	200002e4 	.word	0x200002e4
 80054a0:	200005f0 	.word	0x200005f0
 80054a4:	200003e4 	.word	0x200003e4

080054a8 <UART_CMD_CHK>:

uint8_t UART_CMD_CHK(uint8_t nCmd, uint8_t nLeng)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	460a      	mov	r2, r1
 80054b2:	71fb      	strb	r3, [r7, #7]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71bb      	strb	r3, [r7, #6]
	uint8_t Result = FALSE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	73fb      	strb	r3, [r7, #15]

	switch (nCmd)
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	2b10      	cmp	r3, #16
 80054c0:	dc2a      	bgt.n	8005518 <UART_CMD_CHK+0x70>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f2c0 80cf 	blt.w	8005666 <UART_CMD_CHK+0x1be>
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	f200 80cc 	bhi.w	8005666 <UART_CMD_CHK+0x1be>
 80054ce:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <UART_CMD_CHK+0x2c>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	0800551f 	.word	0x0800551f
 80054d8:	0800552b 	.word	0x0800552b
 80054dc:	08005537 	.word	0x08005537
 80054e0:	08005543 	.word	0x08005543
 80054e4:	0800554f 	.word	0x0800554f
 80054e8:	0800555b 	.word	0x0800555b
 80054ec:	0800556d 	.word	0x0800556d
 80054f0:	0800557f 	.word	0x0800557f
 80054f4:	08005591 	.word	0x08005591
 80054f8:	0800559d 	.word	0x0800559d
 80054fc:	080055a9 	.word	0x080055a9
 8005500:	080055b5 	.word	0x080055b5
 8005504:	080055c1 	.word	0x080055c1
 8005508:	080055d9 	.word	0x080055d9
 800550c:	080055eb 	.word	0x080055eb
 8005510:	080055f7 	.word	0x080055f7
 8005514:	08005603 	.word	0x08005603
 8005518:	2bf0      	cmp	r3, #240	@ 0xf0
 800551a:	d07b      	beq.n	8005614 <UART_CMD_CHK+0x16c>
 800551c:	e0a3      	b.n	8005666 <UART_CMD_CHK+0x1be>
	{
		case CMD_BIT_MANUAL_START : 	{ if (0 == nLeng) { Result = TRUE; } } break;
 800551e:	79bb      	ldrb	r3, [r7, #6]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d17d      	bne.n	8005620 <UART_CMD_CHK+0x178>
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
 8005528:	e07a      	b.n	8005620 <UART_CMD_CHK+0x178>
		case CMD_MEASUER_START : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 800552a:	79bb      	ldrb	r3, [r7, #6]
 800552c:	2b02      	cmp	r3, #2
 800552e:	d179      	bne.n	8005624 <UART_CMD_CHK+0x17c>
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
 8005534:	e076      	b.n	8005624 <UART_CMD_CHK+0x17c>
		case CMD_MEASUER_STOP : 		{ if (0 == nLeng) { Result = TRUE; } } break;
 8005536:	79bb      	ldrb	r3, [r7, #6]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d175      	bne.n	8005628 <UART_CMD_CHK+0x180>
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
 8005540:	e072      	b.n	8005628 <UART_CMD_CHK+0x180>
		case CMD_MEASUER_READ_VAL : 	{ if (0 == nLeng) { Result = TRUE; } } break;
 8005542:	79bb      	ldrb	r3, [r7, #6]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d171      	bne.n	800562c <UART_CMD_CHK+0x184>
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
 800554c:	e06e      	b.n	800562c <UART_CMD_CHK+0x184>
		case CMD_START_FAN_CLEAN : 		{ if (0 == nLeng) { Result = TRUE; } } break;
 800554e:	79bb      	ldrb	r3, [r7, #6]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d16d      	bne.n	8005630 <UART_CMD_CHK+0x188>
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
 8005558:	e06a      	b.n	8005630 <UART_CMD_CHK+0x188>
		case CMD_GET_AT_CLEAN_SEC : 	{ if ((1 == nLeng) || (2 == nLeng)) { Result = TRUE; } } break;
 800555a:	79bb      	ldrb	r3, [r7, #6]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d002      	beq.n	8005566 <UART_CMD_CHK+0xbe>
 8005560:	79bb      	ldrb	r3, [r7, #6]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d166      	bne.n	8005634 <UART_CMD_CHK+0x18c>
 8005566:	2301      	movs	r3, #1
 8005568:	73fb      	strb	r3, [r7, #15]
 800556a:	e063      	b.n	8005634 <UART_CMD_CHK+0x18c>
		case CMD_AT_CLEAN_INTVAL : 		{ if ((1 == nLeng) || (5 == nLeng)) { Result = TRUE; } } break;
 800556c:	79bb      	ldrb	r3, [r7, #6]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d002      	beq.n	8005578 <UART_CMD_CHK+0xd0>
 8005572:	79bb      	ldrb	r3, [r7, #6]
 8005574:	2b05      	cmp	r3, #5
 8005576:	d15f      	bne.n	8005638 <UART_CMD_CHK+0x190>
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
 800557c:	e05c      	b.n	8005638 <UART_CMD_CHK+0x190>
		case CMD_BOUNDARY_VOLT : 		{ if ((2 == nLeng) || (4 == nLeng)) { Result = TRUE; } } break;
 800557e:	79bb      	ldrb	r3, [r7, #6]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d002      	beq.n	800558a <UART_CMD_CHK+0xe2>
 8005584:	79bb      	ldrb	r3, [r7, #6]
 8005586:	2b04      	cmp	r3, #4
 8005588:	d158      	bne.n	800563c <UART_CMD_CHK+0x194>
 800558a:	2301      	movs	r3, #1
 800558c:	73fb      	strb	r3, [r7, #15]
 800558e:	e055      	b.n	800563c <UART_CMD_CHK+0x194>
		case CMD_PD_TEST_MODE : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 8005590:	79bb      	ldrb	r3, [r7, #6]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d154      	bne.n	8005640 <UART_CMD_CHK+0x198>
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
 800559a:	e051      	b.n	8005640 <UART_CMD_CHK+0x198>
		case CMD_SIPM_TEST_MODE : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 800559c:	79bb      	ldrb	r3, [r7, #6]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d150      	bne.n	8005644 <UART_CMD_CHK+0x19c>
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
 80055a6:	e04d      	b.n	8005644 <UART_CMD_CHK+0x19c>
		case CMD_SLEEP_MODE	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 80055a8:	79bb      	ldrb	r3, [r7, #6]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d14c      	bne.n	8005648 <UART_CMD_CHK+0x1a0>
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
 80055b2:	e049      	b.n	8005648 <UART_CMD_CHK+0x1a0>
		case CMD_WAKE_UP	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 80055b4:	79bb      	ldrb	r3, [r7, #6]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d148      	bne.n	800564c <UART_CMD_CHK+0x1a4>
 80055ba:	2301      	movs	r3, #1
 80055bc:	73fb      	strb	r3, [r7, #15]
 80055be:	e045      	b.n	800564c <UART_CMD_CHK+0x1a4>
		case CMD_DEVICE_INFO	:		{ if ((1 == nLeng) || (8 == nLeng) || (16 == nLeng)) { Result = TRUE; } } break;
 80055c0:	79bb      	ldrb	r3, [r7, #6]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d005      	beq.n	80055d2 <UART_CMD_CHK+0x12a>
 80055c6:	79bb      	ldrb	r3, [r7, #6]
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d002      	beq.n	80055d2 <UART_CMD_CHK+0x12a>
 80055cc:	79bb      	ldrb	r3, [r7, #6]
 80055ce:	2b10      	cmp	r3, #16
 80055d0:	d13e      	bne.n	8005650 <UART_CMD_CHK+0x1a8>
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
 80055d6:	e03b      	b.n	8005650 <UART_CMD_CHK+0x1a8>
		case CMD_DEVICE_VER	:			{ if ((1 == nLeng) || (5 == nLeng)) 				 { Result = TRUE; } } break;
 80055d8:	79bb      	ldrb	r3, [r7, #6]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d002      	beq.n	80055e4 <UART_CMD_CHK+0x13c>
 80055de:	79bb      	ldrb	r3, [r7, #6]
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d137      	bne.n	8005654 <UART_CMD_CHK+0x1ac>
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
 80055e8:	e034      	b.n	8005654 <UART_CMD_CHK+0x1ac>
		case CMD_DEVICE_STATE	:		{ if (1 == nLeng) { Result = TRUE; } } break;
 80055ea:	79bb      	ldrb	r3, [r7, #6]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d133      	bne.n	8005658 <UART_CMD_CHK+0x1b0>
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
 80055f4:	e030      	b.n	8005658 <UART_CMD_CHK+0x1b0>
		case CMD_SOFT_RESET	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 80055f6:	79bb      	ldrb	r3, [r7, #6]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d12f      	bne.n	800565c <UART_CMD_CHK+0x1b4>
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
 8005600:	e02c      	b.n	800565c <UART_CMD_CHK+0x1b4>
		case CMD_SET_CORRECTION_VAL :	{ if ((2 == nLeng) || (6 == nLeng)) { Result = TRUE; }  } break;
 8005602:	79bb      	ldrb	r3, [r7, #6]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d002      	beq.n	800560e <UART_CMD_CHK+0x166>
 8005608:	79bb      	ldrb	r3, [r7, #6]
 800560a:	2b06      	cmp	r3, #6
 800560c:	d128      	bne.n	8005660 <UART_CMD_CHK+0x1b8>
 800560e:	2301      	movs	r3, #1
 8005610:	73fb      	strb	r3, [r7, #15]
 8005612:	e025      	b.n	8005660 <UART_CMD_CHK+0x1b8>
		case CMD_SET_FIRMWARE_DOWNLOAD:	{ if (0 == nLeng) { Result = TRUE; }  } break;
 8005614:	79bb      	ldrb	r3, [r7, #6]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d124      	bne.n	8005664 <UART_CMD_CHK+0x1bc>
 800561a:	2301      	movs	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
 800561e:	e021      	b.n	8005664 <UART_CMD_CHK+0x1bc>
		case CMD_BIT_MANUAL_START : 	{ if (0 == nLeng) { Result = TRUE; } } break;
 8005620:	bf00      	nop
 8005622:	e020      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_MEASUER_START : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 8005624:	bf00      	nop
 8005626:	e01e      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_MEASUER_STOP : 		{ if (0 == nLeng) { Result = TRUE; } } break;
 8005628:	bf00      	nop
 800562a:	e01c      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_MEASUER_READ_VAL : 	{ if (0 == nLeng) { Result = TRUE; } } break;
 800562c:	bf00      	nop
 800562e:	e01a      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_START_FAN_CLEAN : 		{ if (0 == nLeng) { Result = TRUE; } } break;
 8005630:	bf00      	nop
 8005632:	e018      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_GET_AT_CLEAN_SEC : 	{ if ((1 == nLeng) || (2 == nLeng)) { Result = TRUE; } } break;
 8005634:	bf00      	nop
 8005636:	e016      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_AT_CLEAN_INTVAL : 		{ if ((1 == nLeng) || (5 == nLeng)) { Result = TRUE; } } break;
 8005638:	bf00      	nop
 800563a:	e014      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_BOUNDARY_VOLT : 		{ if ((2 == nLeng) || (4 == nLeng)) { Result = TRUE; } } break;
 800563c:	bf00      	nop
 800563e:	e012      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_PD_TEST_MODE : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 8005640:	bf00      	nop
 8005642:	e010      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_SIPM_TEST_MODE : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 8005644:	bf00      	nop
 8005646:	e00e      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_SLEEP_MODE	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 8005648:	bf00      	nop
 800564a:	e00c      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_WAKE_UP	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 800564c:	bf00      	nop
 800564e:	e00a      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_DEVICE_INFO	:		{ if ((1 == nLeng) || (8 == nLeng) || (16 == nLeng)) { Result = TRUE; } } break;
 8005650:	bf00      	nop
 8005652:	e008      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_DEVICE_VER	:			{ if ((1 == nLeng) || (5 == nLeng)) 				 { Result = TRUE; } } break;
 8005654:	bf00      	nop
 8005656:	e006      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_DEVICE_STATE	:		{ if (1 == nLeng) { Result = TRUE; } } break;
 8005658:	bf00      	nop
 800565a:	e004      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_SOFT_RESET	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 800565c:	bf00      	nop
 800565e:	e002      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_SET_CORRECTION_VAL :	{ if ((2 == nLeng) || (6 == nLeng)) { Result = TRUE; }  } break;
 8005660:	bf00      	nop
 8005662:	e000      	b.n	8005666 <UART_CMD_CHK+0x1be>
		case CMD_SET_FIRMWARE_DOWNLOAD:	{ if (0 == nLeng) { Result = TRUE; }  } break;
 8005664:	bf00      	nop
	}

	return Result;
 8005666:	7bfb      	ldrb	r3, [r7, #15]

}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <FindRcvMsgToPacket>:

uint8_t FindRcvMsgToPacket(uint8_t* nRcvMsg, uint8_t nRcvCnt)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	73fb      	strb	r3, [r7, #15]
	uint8_t ChkSum = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	73bb      	strb	r3, [r7, #14]
	uint8_t ChksCnt = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	737b      	strb	r3, [r7, #13]

	uint8_t MsgCnt = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	733b      	strb	r3, [r7, #12]
	uint8_t flagPacktOn = OFF;
 8005690:	2300      	movs	r3, #0
 8005692:	72fb      	strb	r3, [r7, #11]

	uint8_t Result = TRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	72bb      	strb	r3, [r7, #10]
	uint8_t FlagstuffOn = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	727b      	strb	r3, [r7, #9]
	uint8_t stuffSkipCnt = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	723b      	strb	r3, [r7, #8]

	tMsgPkt.MsgState = 0x00;
 80056a0:	4b8b      	ldr	r3, [pc, #556]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a

	for (i = 0; i < nRcvCnt; i++)
 80056a8:	2300      	movs	r3, #0
 80056aa:	73fb      	strb	r3, [r7, #15]
 80056ac:	e0ae      	b.n	800580c <FindRcvMsgToPacket+0x198>
	{
		if ((FALSE==flagPacktOn) && (STX == nRcvMsg[i]))
 80056ae:	7afb      	ldrb	r3, [r7, #11]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d116      	bne.n	80056e2 <FindRcvMsgToPacket+0x6e>
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	4413      	add	r3, r2
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80056be:	d110      	bne.n	80056e2 <FindRcvMsgToPacket+0x6e>
		{
			tMsgPkt.RxBuff[MsgCnt] = nRcvMsg[i];
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	441a      	add	r2, r3
 80056c6:	7b3b      	ldrb	r3, [r7, #12]
 80056c8:	7811      	ldrb	r1, [r2, #0]
 80056ca:	4a81      	ldr	r2, [pc, #516]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80056cc:	54d1      	strb	r1, [r2, r3]
			flagPacktOn = ON;
 80056ce:	2301      	movs	r3, #1
 80056d0:	72fb      	strb	r3, [r7, #11]
			ChkSum = ChkSum + tMsgPkt.RxBuff[MsgCnt];
 80056d2:	7b3b      	ldrb	r3, [r7, #12]
 80056d4:	4a7e      	ldr	r2, [pc, #504]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80056d6:	5cd2      	ldrb	r2, [r2, r3]
 80056d8:	7bbb      	ldrb	r3, [r7, #14]
 80056da:	4413      	add	r3, r2
 80056dc:	73bb      	strb	r3, [r7, #14]
			ChksCnt = i;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	737b      	strb	r3, [r7, #13]
		}

		if ( (ON == flagPacktOn ) && (i >= ChksCnt + 1) )
 80056e2:	7afb      	ldrb	r3, [r7, #11]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	f040 808e 	bne.w	8005806 <FindRcvMsgToPacket+0x192>
 80056ea:	7b7a      	ldrb	r2, [r7, #13]
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	f080 8089 	bcs.w	8005806 <FindRcvMsgToPacket+0x192>
		{
			MsgCnt++;
 80056f4:	7b3b      	ldrb	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	733b      	strb	r3, [r7, #12]

			 	  if( (0xDB == nRcvMsg[MsgCnt]) && (0xDC == nRcvMsg[MsgCnt+1]) ) { tMsgPkt.RxBuff[MsgCnt] = 0xC0; FlagstuffOn = ON; }
 80056fa:	7b3b      	ldrb	r3, [r7, #12]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	4413      	add	r3, r2
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2bdb      	cmp	r3, #219	@ 0xdb
 8005704:	d10d      	bne.n	8005722 <FindRcvMsgToPacket+0xae>
 8005706:	7b3b      	ldrb	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2bdc      	cmp	r3, #220	@ 0xdc
 8005712:	d106      	bne.n	8005722 <FindRcvMsgToPacket+0xae>
 8005714:	7b3b      	ldrb	r3, [r7, #12]
 8005716:	4a6e      	ldr	r2, [pc, #440]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005718:	21c0      	movs	r1, #192	@ 0xc0
 800571a:	54d1      	strb	r1, [r2, r3]
 800571c:	2301      	movs	r3, #1
 800571e:	727b      	strb	r3, [r7, #9]
 8005720:	e026      	b.n	8005770 <FindRcvMsgToPacket+0xfc>
			 else if( (0xDB == nRcvMsg[MsgCnt]) && (0xDD == nRcvMsg[MsgCnt+1]) ) { tMsgPkt.RxBuff[MsgCnt] = 0xDB; FlagstuffOn = ON; }
 8005722:	7b3b      	ldrb	r3, [r7, #12]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	4413      	add	r3, r2
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2bdb      	cmp	r3, #219	@ 0xdb
 800572c:	d10d      	bne.n	800574a <FindRcvMsgToPacket+0xd6>
 800572e:	7b3b      	ldrb	r3, [r7, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	4413      	add	r3, r2
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2bdd      	cmp	r3, #221	@ 0xdd
 800573a:	d106      	bne.n	800574a <FindRcvMsgToPacket+0xd6>
 800573c:	7b3b      	ldrb	r3, [r7, #12]
 800573e:	4a64      	ldr	r2, [pc, #400]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005740:	21db      	movs	r1, #219	@ 0xdb
 8005742:	54d1      	strb	r1, [r2, r3]
 8005744:	2301      	movs	r3, #1
 8005746:	727b      	strb	r3, [r7, #9]
 8005748:	e012      	b.n	8005770 <FindRcvMsgToPacket+0xfc>
			 else if( (0xDB == nRcvMsg[MsgCnt]) && (0xDE == nRcvMsg[MsgCnt+1]) ) { tMsgPkt.RxBuff[MsgCnt] = 0xC2; FlagstuffOn = ON; }
 800574a:	7b3b      	ldrb	r3, [r7, #12]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4413      	add	r3, r2
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2bdb      	cmp	r3, #219	@ 0xdb
 8005754:	d10c      	bne.n	8005770 <FindRcvMsgToPacket+0xfc>
 8005756:	7b3b      	ldrb	r3, [r7, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2bde      	cmp	r3, #222	@ 0xde
 8005762:	d105      	bne.n	8005770 <FindRcvMsgToPacket+0xfc>
 8005764:	7b3b      	ldrb	r3, [r7, #12]
 8005766:	4a5a      	ldr	r2, [pc, #360]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005768:	21c2      	movs	r1, #194	@ 0xc2
 800576a:	54d1      	strb	r1, [r2, r3]
 800576c:	2301      	movs	r3, #1
 800576e:	727b      	strb	r3, [r7, #9]

			if(OFF == FlagstuffOn)
 8005770:	7a7b      	ldrb	r3, [r7, #9]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d139      	bne.n	80057ea <FindRcvMsgToPacket+0x176>
			{
				tMsgPkt.RxBuff[MsgCnt] = nRcvMsg[i];
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	441a      	add	r2, r3
 800577c:	7b3b      	ldrb	r3, [r7, #12]
 800577e:	7811      	ldrb	r1, [r2, #0]
 8005780:	4a53      	ldr	r2, [pc, #332]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005782:	54d1      	strb	r1, [r2, r3]

				if(1 == MsgCnt) { tMsgPkt.Addr = tMsgPkt.RxBuff[MsgCnt];  }
 8005784:	7b3b      	ldrb	r3, [r7, #12]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d105      	bne.n	8005796 <FindRcvMsgToPacket+0x122>
 800578a:	7b3b      	ldrb	r3, [r7, #12]
 800578c:	4a50      	ldr	r2, [pc, #320]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 800578e:	5cd2      	ldrb	r2, [r2, r3]
 8005790:	4b4f      	ldr	r3, [pc, #316]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005792:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
				if(2 == MsgCnt) { tMsgPkt.Cmd  = tMsgPkt.RxBuff[MsgCnt];  }
 8005796:	7b3b      	ldrb	r3, [r7, #12]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d105      	bne.n	80057a8 <FindRcvMsgToPacket+0x134>
 800579c:	7b3b      	ldrb	r3, [r7, #12]
 800579e:	4a4c      	ldr	r2, [pc, #304]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80057a0:	5cd2      	ldrb	r2, [r2, r3]
 80057a2:	4b4b      	ldr	r3, [pc, #300]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80057a4:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
				if(3 == MsgCnt) { tMsgPkt.Leng = tMsgPkt.RxBuff[MsgCnt];  }
 80057a8:	7b3b      	ldrb	r3, [r7, #12]
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d105      	bne.n	80057ba <FindRcvMsgToPacket+0x146>
 80057ae:	7b3b      	ldrb	r3, [r7, #12]
 80057b0:	4a47      	ldr	r2, [pc, #284]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80057b2:	5cd2      	ldrb	r2, [r2, r3]
 80057b4:	4b46      	ldr	r3, [pc, #280]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80057b6:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

				if(i < (nRcvCnt-2)) {
 80057ba:	7bfa      	ldrb	r2, [r7, #15]
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	3b02      	subs	r3, #2
 80057c0:	429a      	cmp	r2, r3
 80057c2:	da05      	bge.n	80057d0 <FindRcvMsgToPacket+0x15c>
					ChkSum = (uint8_t)(ChkSum + tMsgPkt.RxBuff[MsgCnt]);
 80057c4:	7b3b      	ldrb	r3, [r7, #12]
 80057c6:	4a42      	ldr	r2, [pc, #264]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80057c8:	5cd2      	ldrb	r2, [r2, r3]
 80057ca:	7bbb      	ldrb	r3, [r7, #14]
 80057cc:	4413      	add	r3, r2
 80057ce:	73bb      	strb	r3, [r7, #14]
				}

				if(ETX == nRcvMsg[i])
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	4413      	add	r3, r2
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2bc2      	cmp	r3, #194	@ 0xc2
 80057da:	d114      	bne.n	8005806 <FindRcvMsgToPacket+0x192>
				{
					ChkSum = (uint8_t)(ChkSum + tMsgPkt.RxBuff[MsgCnt]);
 80057dc:	7b3b      	ldrb	r3, [r7, #12]
 80057de:	4a3c      	ldr	r2, [pc, #240]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80057e0:	5cd2      	ldrb	r2, [r2, r3]
 80057e2:	7bbb      	ldrb	r3, [r7, #14]
 80057e4:	4413      	add	r3, r2
 80057e6:	73bb      	strb	r3, [r7, #14]
					break;
 80057e8:	e015      	b.n	8005816 <FindRcvMsgToPacket+0x1a2>
				}
			}

			else
			{
				stuffSkipCnt++;
 80057ea:	7a3b      	ldrb	r3, [r7, #8]
 80057ec:	3301      	adds	r3, #1
 80057ee:	723b      	strb	r3, [r7, #8]

				if(2 <= stuffSkipCnt) { stuffSkipCnt = 0; FlagstuffOn = OFF;}
 80057f0:	7a3b      	ldrb	r3, [r7, #8]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d904      	bls.n	8005800 <FindRcvMsgToPacket+0x18c>
 80057f6:	2300      	movs	r3, #0
 80057f8:	723b      	strb	r3, [r7, #8]
 80057fa:	2300      	movs	r3, #0
 80057fc:	727b      	strb	r3, [r7, #9]
 80057fe:	e002      	b.n	8005806 <FindRcvMsgToPacket+0x192>
				else { MsgCnt--; }
 8005800:	7b3b      	ldrb	r3, [r7, #12]
 8005802:	3b01      	subs	r3, #1
 8005804:	733b      	strb	r3, [r7, #12]
	for (i = 0; i < nRcvCnt; i++)
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	3301      	adds	r3, #1
 800580a:	73fb      	strb	r3, [r7, #15]
 800580c:	7bfa      	ldrb	r2, [r7, #15]
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	429a      	cmp	r2, r3
 8005812:	f4ff af4c 	bcc.w	80056ae <FindRcvMsgToPacket+0x3a>
			}
		}
	}

	tMsgPkt.Chksum = tMsgPkt.RxBuff[MsgCnt-1];
 8005816:	7b3b      	ldrb	r3, [r7, #12]
 8005818:	3b01      	subs	r3, #1
 800581a:	4a2d      	ldr	r2, [pc, #180]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 800581c:	5cd2      	ldrb	r2, [r2, r3]
 800581e:	4b2c      	ldr	r3, [pc, #176]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005820:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109


	//Protocol Error Check
	//=============================================================================================================================================================================================
	//CheckSum CHK!
	if(ChkSum != tMsgPkt.Chksum) {tMsgPkt.MsgState  = MSG_STAT_WRONG_DATA_LENG; }
 8005824:	4b2a      	ldr	r3, [pc, #168]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005826:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 800582a:	7bba      	ldrb	r2, [r7, #14]
 800582c:	429a      	cmp	r2, r3
 800582e:	d003      	beq.n	8005838 <FindRcvMsgToPacket+0x1c4>
 8005830:	4b27      	ldr	r3, [pc, #156]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005832:	2201      	movs	r2, #1
 8005834:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	//STX ERROR
	if(STX != tMsgPkt.RxBuff[0]) {tMsgPkt.MsgState = MSG_STAT_WRONG_DATA_LENG; }
 8005838:	4b25      	ldr	r3, [pc, #148]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2bc0      	cmp	r3, #192	@ 0xc0
 800583e:	d003      	beq.n	8005848 <FindRcvMsgToPacket+0x1d4>
 8005840:	4b23      	ldr	r3, [pc, #140]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005842:	2201      	movs	r2, #1
 8005844:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	// Unknown CMD
	if( FALSE == UART_CMD_CHK(tMsgPkt.Cmd, tMsgPkt.Leng) ) {tMsgPkt.MsgState = MSG_STAT_UNKNOWN_CMD;}
 8005848:	4b21      	ldr	r3, [pc, #132]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 800584a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800584e:	4a20      	ldr	r2, [pc, #128]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005850:	f892 2108 	ldrb.w	r2, [r2, #264]	@ 0x108
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fe26 	bl	80054a8 <UART_CMD_CHK>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <FindRcvMsgToPacket+0x1f6>
 8005862:	4b1b      	ldr	r3, [pc, #108]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005864:	2202      	movs	r2, #2
 8005866:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a

	// Operation Mode Allow case Command : Measure Stop, Read Value
	if( (ON == tSysState.FlagOperModeOn) && !((CMD_MEASUER_STOP == tMsgPkt.Cmd)||(CMD_MEASUER_READ_VAL == tMsgPkt.Cmd))  ) { tMsgPkt.MsgState = MSG_STAT_NO_ACC_CMD; }
 800586a:	4b1a      	ldr	r3, [pc, #104]	@ (80058d4 <FindRcvMsgToPacket+0x260>)
 800586c:	7adb      	ldrb	r3, [r3, #11]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10d      	bne.n	800588e <FindRcvMsgToPacket+0x21a>
 8005872:	4b17      	ldr	r3, [pc, #92]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005874:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005878:	2b02      	cmp	r3, #2
 800587a:	d008      	beq.n	800588e <FindRcvMsgToPacket+0x21a>
 800587c:	4b14      	ldr	r3, [pc, #80]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 800587e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005882:	2b03      	cmp	r3, #3
 8005884:	d003      	beq.n	800588e <FindRcvMsgToPacket+0x21a>
 8005886:	4b12      	ldr	r3, [pc, #72]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005888:	2203      	movs	r2, #3
 800588a:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	if( ON == tSysState.FlagBitChkOn)																					   { tMsgPkt.MsgState = MSG_STAT_NO_ACC_CMD; }
 800588e:	4b11      	ldr	r3, [pc, #68]	@ (80058d4 <FindRcvMsgToPacket+0x260>)
 8005890:	7c9b      	ldrb	r3, [r3, #18]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d103      	bne.n	800589e <FindRcvMsgToPacket+0x22a>
 8005896:	4b0e      	ldr	r3, [pc, #56]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 8005898:	2203      	movs	r2, #3
 800589a:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a

	// Sleep Mode
	if( (ON == tSysState.FlagSleepModeOn) && (CMD_WAKE_UP != tMsgPkt.Cmd) ) { tMsgPkt.MsgState = MSG_STAT_CMD_NOT_ALLOW_DEVICE; }
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <FindRcvMsgToPacket+0x260>)
 80058a0:	7b1b      	ldrb	r3, [r3, #12]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d108      	bne.n	80058b8 <FindRcvMsgToPacket+0x244>
 80058a6:	4b0a      	ldr	r3, [pc, #40]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80058a8:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80058ac:	2b0b      	cmp	r3, #11
 80058ae:	d003      	beq.n	80058b8 <FindRcvMsgToPacket+0x244>
 80058b0:	4b07      	ldr	r3, [pc, #28]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80058b2:	2206      	movs	r2, #6
 80058b4:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	//=============================================================================================================================================================================================


	if(0x00 != tMsgPkt.MsgState) { Result = FALSE; }
 80058b8:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <FindRcvMsgToPacket+0x25c>)
 80058ba:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <FindRcvMsgToPacket+0x252>
 80058c2:	2300      	movs	r3, #0
 80058c4:	72bb      	strb	r3, [r7, #10]

	return Result;
 80058c6:	7abb      	ldrb	r3, [r7, #10]

}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000570 	.word	0x20000570
 80058d4:	2000028c 	.word	0x2000028c

080058d8 <RcvMsgErrAssambly>:


void RcvMsgErrAssambly(uint8_t nCmd)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]

	uint8_t ChkSum = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73bb      	strb	r3, [r7, #14]

	tMsgPkt.TxMsgCnt = 0;
 80058ea:	4b43      	ldr	r3, [pc, #268]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;
 80058f2:	4b41      	ldr	r3, [pc, #260]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80058f4:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	b2d1      	uxtb	r1, r2
 80058fc:	4a3e      	ldr	r2, [pc, #248]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80058fe:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8005902:	461a      	mov	r2, r3
 8005904:	4b3c      	ldr	r3, [pc, #240]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 8005906:	4413      	add	r3, r2
 8005908:	22c0      	movs	r2, #192	@ 0xc0
 800590a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ADDR;
 800590e:	4b3a      	ldr	r3, [pc, #232]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 8005910:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	b2d1      	uxtb	r1, r2
 8005918:	4a37      	ldr	r2, [pc, #220]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 800591a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800591e:	461a      	mov	r2, r3
 8005920:	4b35      	ldr	r3, [pc, #212]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 8005922:	4413      	add	r3, r2
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCmd;
 800592a:	4b33      	ldr	r3, [pc, #204]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 800592c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	b2d1      	uxtb	r1, r2
 8005934:	4a30      	ldr	r2, [pc, #192]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 8005936:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800593a:	461a      	mov	r2, r3
 800593c:	4b2e      	ldr	r3, [pc, #184]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 800593e:	4413      	add	r3, r2
 8005940:	79fa      	ldrb	r2, [r7, #7]
 8005942:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tMsgPkt.MsgState;
 8005946:	4b2c      	ldr	r3, [pc, #176]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 8005948:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	b2d1      	uxtb	r1, r2
 8005950:	4a29      	ldr	r2, [pc, #164]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 8005952:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8005956:	4619      	mov	r1, r3
 8005958:	4b27      	ldr	r3, [pc, #156]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 800595a:	f893 210a 	ldrb.w	r2, [r3, #266]	@ 0x10a
 800595e:	4b26      	ldr	r3, [pc, #152]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 8005960:	440b      	add	r3, r1
 8005962:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = LENG_REQ_RETURN;
 8005966:	4b24      	ldr	r3, [pc, #144]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 8005968:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	b2d1      	uxtb	r1, r2
 8005970:	4a21      	ldr	r2, [pc, #132]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 8005972:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8005976:	461a      	mov	r2, r3
 8005978:	4b1f      	ldr	r3, [pc, #124]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 800597a:	4413      	add	r3, r2
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	for(i = 0; i < tMsgPkt.TxMsgCnt; i++)
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
 8005986:	e00a      	b.n	800599e <RcvMsgErrAssambly+0xc6>
	{
		ChkSum |= tMsgPkt.Txbuff[i];
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	4a1b      	ldr	r2, [pc, #108]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 800598c:	4413      	add	r3, r2
 800598e:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8005992:	7bbb      	ldrb	r3, [r7, #14]
 8005994:	4313      	orrs	r3, r2
 8005996:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i < tMsgPkt.TxMsgCnt; i++)
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	3301      	adds	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
 800599e:	4b16      	ldr	r3, [pc, #88]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80059a0:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80059a4:	7bfa      	ldrb	r2, [r7, #15]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d3ee      	bcc.n	8005988 <RcvMsgErrAssambly+0xb0>
	}

	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ChkSum;
 80059aa:	4b13      	ldr	r3, [pc, #76]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80059ac:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	b2d1      	uxtb	r1, r2
 80059b4:	4a10      	ldr	r2, [pc, #64]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80059b6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80059ba:	461a      	mov	r2, r3
 80059bc:	4b0e      	ldr	r3, [pc, #56]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80059be:	4413      	add	r3, r2
 80059c0:	7bba      	ldrb	r2, [r7, #14]
 80059c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX;
 80059c6:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80059c8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	b2d1      	uxtb	r1, r2
 80059d0:	4a09      	ldr	r2, [pc, #36]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80059d2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80059d6:	461a      	mov	r2, r3
 80059d8:	4b07      	ldr	r3, [pc, #28]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80059da:	4413      	add	r3, r2
 80059dc:	22c2      	movs	r2, #194	@ 0xc2
 80059de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	tMsgPkt.FlagTxPktOn = ON;
 80059e2:	4b05      	ldr	r3, [pc, #20]	@ (80059f8 <RcvMsgErrAssambly+0x120>)
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
}
 80059ea:	bf00      	nop
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000570 	.word	0x20000570

080059fc <UART_MsgProc>:



void UART_MsgProc(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
	if(ON == tUartMsg.FlagMsgRcvOn)
 8005a00:	4b12      	ldr	r3, [pc, #72]	@ (8005a4c <UART_MsgProc+0x50>)
 8005a02:	f893 3286 	ldrb.w	r3, [r3, #646]	@ 0x286
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d11f      	bne.n	8005a4a <UART_MsgProc+0x4e>
	{
		if(FALSE == FindRcvMsgToPacket(tUartMsg.RxTemp, tUartMsg.RxTempCnt))
 8005a0a:	4b10      	ldr	r3, [pc, #64]	@ (8005a4c <UART_MsgProc+0x50>)
 8005a0c:	f893 3281 	ldrb.w	r3, [r3, #641]	@ 0x281
 8005a10:	4619      	mov	r1, r3
 8005a12:	480f      	ldr	r0, [pc, #60]	@ (8005a50 <UART_MsgProc+0x54>)
 8005a14:	f7ff fe2e 	bl	8005674 <FindRcvMsgToPacket>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d111      	bne.n	8005a42 <UART_MsgProc+0x46>
		{
			RcvMsgErrAssambly(tMsgPkt.Cmd);
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <UART_MsgProc+0x58>)
 8005a20:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff ff57 	bl	80058d8 <RcvMsgErrAssambly>
			memset(tUartMsg.RxTemp, 0, sizeof(tUartMsg.RxTemp));
 8005a2a:	2280      	movs	r2, #128	@ 0x80
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4808      	ldr	r0, [pc, #32]	@ (8005a50 <UART_MsgProc+0x54>)
 8005a30:	f006 fe7c 	bl	800c72c <memset>
			tMsgPkt.MsgState = MSG_STAT_NO_ERR;
 8005a34:	4b07      	ldr	r3, [pc, #28]	@ (8005a54 <UART_MsgProc+0x58>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
			UART_RxInit();
 8005a3c:	f7ff fce2 	bl	8005404 <UART_RxInit>
			return;
 8005a40:	e003      	b.n	8005a4a <UART_MsgProc+0x4e>
		}

		tMsgPkt.FlagRxPktOn = ON;
 8005a42:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <UART_MsgProc+0x58>)
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
	}
}
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200002e4 	.word	0x200002e4
 8005a50:	200004e4 	.word	0x200004e4
 8005a54:	20000570 	.word	0x20000570

08005a58 <UART_Init>:


void UART_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
	memset(tUartMsg.RingRxTemp, 0, 	sizeof(tUartMsg.RingRxTemp) );
 8005a5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a60:	2100      	movs	r1, #0
 8005a62:	481c      	ldr	r0, [pc, #112]	@ (8005ad4 <UART_Init+0x7c>)
 8005a64:	f006 fe62 	bl	800c72c <memset>

	memset(tMsgPkt.Txbuff, 	 0, 	sizeof(tMsgPkt.Txbuff) );
 8005a68:	2280      	movs	r2, #128	@ 0x80
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	481a      	ldr	r0, [pc, #104]	@ (8005ad8 <UART_Init+0x80>)
 8005a6e:	f006 fe5d 	bl	800c72c <memset>
	memset(tMsgPkt.RxBuff, 	 0, 	sizeof(tMsgPkt.RxBuff) );
 8005a72:	2280      	movs	r2, #128	@ 0x80
 8005a74:	2100      	movs	r1, #0
 8005a76:	4819      	ldr	r0, [pc, #100]	@ (8005adc <UART_Init+0x84>)
 8005a78:	f006 fe58 	bl	800c72c <memset>
	memset(&tMsgPkt, 0, 			sizeof(struct _tMSG_PACKET) );
 8005a7c:	f240 120b 	movw	r2, #267	@ 0x10b
 8005a80:	2100      	movs	r1, #0
 8005a82:	4816      	ldr	r0, [pc, #88]	@ (8005adc <UART_Init+0x84>)
 8005a84:	f006 fe52 	bl	800c72c <memset>

	tUartMsg.FlagMsgErr  	= FALSE;
 8005a88:	4b12      	ldr	r3, [pc, #72]	@ (8005ad4 <UART_Init+0x7c>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2285 	strb.w	r2, [r3, #645]	@ 0x285
	tUartMsg.FlagMsgRcvOn 	= FALSE;
 8005a90:	4b10      	ldr	r3, [pc, #64]	@ (8005ad4 <UART_Init+0x7c>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286
	tUartMsg.FlagPktFindOn 	= FALSE;
 8005a98:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad4 <UART_Init+0x7c>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2287 	strb.w	r2, [r3, #647]	@ 0x287
	tUartMsg.RxStxCnt  = 0;
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad4 <UART_Init+0x7c>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
	tUartMsg.RxTempCnt = 0;
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad4 <UART_Init+0x7c>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2281 	strb.w	r2, [r3, #641]	@ 0x281
	tUartMsg.TxTempCnt = 0;
 8005ab0:	4b08      	ldr	r3, [pc, #32]	@ (8005ad4 <UART_Init+0x7c>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2282 	strb.w	r2, [r3, #642]	@ 0x282

	tMsgPkt.FlagTxPktOn	= OFF;
 8005ab8:	4b08      	ldr	r3, [pc, #32]	@ (8005adc <UART_Init+0x84>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

	tMsgPkt.RxMsgCnt = 0;
 8005ac0:	4b06      	ldr	r3, [pc, #24]	@ (8005adc <UART_Init+0x84>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
	tMsgPkt.TxMsgCnt = 0;
 8005ac8:	4b04      	ldr	r3, [pc, #16]	@ (8005adc <UART_Init+0x84>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
}
 8005ad0:	bf00      	nop
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	200002e4 	.word	0x200002e4
 8005ad8:	200005f0 	.word	0x200005f0
 8005adc:	20000570 	.word	0x20000570

08005ae0 <UART_StuffAssambly>:

void UART_StuffAssambly(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	71fb      	strb	r3, [r7, #7]
	memset(tUartMsg.RingRxTemp, 0, sizeof(tUartMsg.RingTxTemp));
 8005aea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005aee:	2100      	movs	r1, #0
 8005af0:	4858      	ldr	r0, [pc, #352]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005af2:	f006 fe1b 	bl	800c72c <memset>
	tUartMsg.TxTempCnt = 0;
 8005af6:	4b57      	ldr	r3, [pc, #348]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2282 	strb.w	r2, [r3, #642]	@ 0x282

	tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = STX;
 8005afe:	4b55      	ldr	r3, [pc, #340]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b00:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	b2d1      	uxtb	r1, r2
 8005b08:	4a52      	ldr	r2, [pc, #328]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b0a:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005b0e:	461a      	mov	r2, r3
 8005b10:	4b50      	ldr	r3, [pc, #320]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b12:	4413      	add	r3, r2
 8005b14:	22c0      	movs	r2, #192	@ 0xc0
 8005b16:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

	for(i = 1; i < tMsgPkt.TxMsgCnt; i++)
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	71fb      	strb	r3, [r7, #7]
 8005b1e:	e080      	b.n	8005c22 <UART_StuffAssambly+0x142>
	{
			 if(0xC0 == tMsgPkt.Txbuff[i]) { tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDB; tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDC; }
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	4a4d      	ldr	r2, [pc, #308]	@ (8005c58 <UART_StuffAssambly+0x178>)
 8005b24:	4413      	add	r3, r2
 8005b26:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b2c:	d11c      	bne.n	8005b68 <UART_StuffAssambly+0x88>
 8005b2e:	4b49      	ldr	r3, [pc, #292]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b30:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	b2d1      	uxtb	r1, r2
 8005b38:	4a46      	ldr	r2, [pc, #280]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b3a:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4b44      	ldr	r3, [pc, #272]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b42:	4413      	add	r3, r2
 8005b44:	22db      	movs	r2, #219	@ 0xdb
 8005b46:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005b4a:	4b42      	ldr	r3, [pc, #264]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b4c:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	b2d1      	uxtb	r1, r2
 8005b54:	4a3f      	ldr	r2, [pc, #252]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b56:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b5e:	4413      	add	r3, r2
 8005b60:	22dc      	movs	r2, #220	@ 0xdc
 8005b62:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005b66:	e059      	b.n	8005c1c <UART_StuffAssambly+0x13c>
		else if(0xDB == tMsgPkt.Txbuff[i]) { tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDB; tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDD; }
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c58 <UART_StuffAssambly+0x178>)
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005b72:	2bdb      	cmp	r3, #219	@ 0xdb
 8005b74:	d11c      	bne.n	8005bb0 <UART_StuffAssambly+0xd0>
 8005b76:	4b37      	ldr	r3, [pc, #220]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b78:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	b2d1      	uxtb	r1, r2
 8005b80:	4a34      	ldr	r2, [pc, #208]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b82:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005b86:	461a      	mov	r2, r3
 8005b88:	4b32      	ldr	r3, [pc, #200]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	22db      	movs	r2, #219	@ 0xdb
 8005b8e:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005b92:	4b30      	ldr	r3, [pc, #192]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b94:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	b2d1      	uxtb	r1, r2
 8005b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005b9e:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005ba6:	4413      	add	r3, r2
 8005ba8:	22dd      	movs	r2, #221	@ 0xdd
 8005baa:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005bae:	e035      	b.n	8005c1c <UART_StuffAssambly+0x13c>
		else if(0xC2 == tMsgPkt.Txbuff[i]) { tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDB; tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDE; }
 8005bb0:	79fb      	ldrb	r3, [r7, #7]
 8005bb2:	4a29      	ldr	r2, [pc, #164]	@ (8005c58 <UART_StuffAssambly+0x178>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005bba:	2bc2      	cmp	r3, #194	@ 0xc2
 8005bbc:	d11c      	bne.n	8005bf8 <UART_StuffAssambly+0x118>
 8005bbe:	4b25      	ldr	r3, [pc, #148]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005bc0:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	b2d1      	uxtb	r1, r2
 8005bc8:	4a22      	ldr	r2, [pc, #136]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005bca:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005bce:	461a      	mov	r2, r3
 8005bd0:	4b20      	ldr	r3, [pc, #128]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005bd2:	4413      	add	r3, r2
 8005bd4:	22db      	movs	r2, #219	@ 0xdb
 8005bd6:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005bda:	4b1e      	ldr	r3, [pc, #120]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005bdc:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	b2d1      	uxtb	r1, r2
 8005be4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005be6:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005bea:	461a      	mov	r2, r3
 8005bec:	4b19      	ldr	r3, [pc, #100]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005bee:	4413      	add	r3, r2
 8005bf0:	22de      	movs	r2, #222	@ 0xde
 8005bf2:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005bf6:	e011      	b.n	8005c1c <UART_StuffAssambly+0x13c>
		else tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = tMsgPkt.Txbuff[i];
 8005bf8:	79fa      	ldrb	r2, [r7, #7]
 8005bfa:	4b16      	ldr	r3, [pc, #88]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005bfc:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005c00:	1c59      	adds	r1, r3, #1
 8005c02:	b2c8      	uxtb	r0, r1
 8005c04:	4913      	ldr	r1, [pc, #76]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005c06:	f881 0282 	strb.w	r0, [r1, #642]	@ 0x282
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4b12      	ldr	r3, [pc, #72]	@ (8005c58 <UART_StuffAssambly+0x178>)
 8005c0e:	4413      	add	r3, r2
 8005c10:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8005c14:	4b0f      	ldr	r3, [pc, #60]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005c16:	440b      	add	r3, r1
 8005c18:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	for(i = 1; i < tMsgPkt.TxMsgCnt; i++)
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	71fb      	strb	r3, [r7, #7]
 8005c22:	4b0d      	ldr	r3, [pc, #52]	@ (8005c58 <UART_StuffAssambly+0x178>)
 8005c24:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005c28:	79fa      	ldrb	r2, [r7, #7]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	f4ff af78 	bcc.w	8005b20 <UART_StuffAssambly+0x40>
	}

	tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = ETX;
 8005c30:	4b08      	ldr	r3, [pc, #32]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005c32:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	b2d1      	uxtb	r1, r2
 8005c3a:	4a06      	ldr	r2, [pc, #24]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005c3c:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005c40:	461a      	mov	r2, r3
 8005c42:	4b04      	ldr	r3, [pc, #16]	@ (8005c54 <UART_StuffAssambly+0x174>)
 8005c44:	4413      	add	r3, r2
 8005c46:	22c2      	movs	r2, #194	@ 0xc2
 8005c48:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	200002e4 	.word	0x200002e4
 8005c58:	20000570 	.word	0x20000570

08005c5c <UART_Chksum>:

uint8_t UART_Chksum(uint8_t* pCh, uint8_t nCnt)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	73fb      	strb	r3, [r7, #15]
	uint8_t Result = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	73bb      	strb	r3, [r7, #14]

	for( i = 0; i < nCnt; i++)
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]
 8005c74:	e009      	b.n	8005c8a <UART_Chksum+0x2e>
	{
		Result = (uint8_t)(Result + pCh[i]);
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	4413      	add	r3, r2
 8005c82:	73bb      	strb	r3, [r7, #14]
	for( i = 0; i < nCnt; i++)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	3301      	adds	r3, #1
 8005c88:	73fb      	strb	r3, [r7, #15]
 8005c8a:	7bfa      	ldrb	r2, [r7, #15]
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d3f1      	bcc.n	8005c76 <UART_Chksum+0x1a>
	}

	Result = (uint8_t)(Result + ETX);
 8005c92:	7bbb      	ldrb	r3, [r7, #14]
 8005c94:	3b3e      	subs	r3, #62	@ 0x3e
 8005c96:	73bb      	strb	r3, [r7, #14]
	return Result;
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	@ 0x28
 8005cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005cae:	f107 031c 	add.w	r3, r7, #28
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	605a      	str	r2, [r3, #4]
 8005cb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005cba:	1d3b      	adds	r3, r7, #4
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	609a      	str	r2, [r3, #8]
 8005cc4:	60da      	str	r2, [r3, #12]
 8005cc6:	611a      	str	r2, [r3, #16]
 8005cc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005cca:	4b4e      	ldr	r3, [pc, #312]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005ccc:	4a4e      	ldr	r2, [pc, #312]	@ (8005e08 <MX_ADC1_Init+0x160>)
 8005cce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8005cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005cd2:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8005cd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005cde:	4b49      	ldr	r3, [pc, #292]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005ce4:	4b47      	ldr	r3, [pc, #284]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005cea:	4b46      	ldr	r3, [pc, #280]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005cec:	2204      	movs	r2, #4
 8005cee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005cf0:	4b44      	ldr	r3, [pc, #272]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005cf6:	4b43      	ldr	r3, [pc, #268]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8005cfc:	4b41      	ldr	r3, [pc, #260]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005cfe:	2205      	movs	r2, #5
 8005d00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005d02:	4b40      	ldr	r3, [pc, #256]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005d10:	4b3c      	ldr	r3, [pc, #240]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005d16:	4b3b      	ldr	r3, [pc, #236]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005d1e:	4b39      	ldr	r3, [pc, #228]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005d24:	4b37      	ldr	r3, [pc, #220]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005d2c:	4835      	ldr	r0, [pc, #212]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005d2e:	f001 f80d 	bl	8006d4c <HAL_ADC_Init>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8005d38:	f000 fb79 	bl	800642e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005d40:	f107 031c 	add.w	r3, r7, #28
 8005d44:	4619      	mov	r1, r3
 8005d46:	482f      	ldr	r0, [pc, #188]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005d48:	f001 ffcc 	bl	8007ce4 <HAL_ADCEx_MultiModeConfigChannel>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8005d52:	f000 fb6c 	bl	800642e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005d56:	4b2d      	ldr	r3, [pc, #180]	@ (8005e0c <MX_ADC1_Init+0x164>)
 8005d58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005d5a:	2306      	movs	r3, #6
 8005d5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005d62:	237f      	movs	r3, #127	@ 0x7f
 8005d64:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005d66:	2304      	movs	r3, #4
 8005d68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4824      	ldr	r0, [pc, #144]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005d74:	f001 fb62 	bl	800743c <HAL_ADC_ConfigChannel>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8005d7e:	f000 fb56 	bl	800642e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005d82:	4b23      	ldr	r3, [pc, #140]	@ (8005e10 <MX_ADC1_Init+0x168>)
 8005d84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005d86:	230c      	movs	r3, #12
 8005d88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d8a:	1d3b      	adds	r3, r7, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	481d      	ldr	r0, [pc, #116]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005d90:	f001 fb54 	bl	800743c <HAL_ADC_ConfigChannel>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8005d9a:	f000 fb48 	bl	800642e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005e14 <MX_ADC1_Init+0x16c>)
 8005da0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005da2:	2312      	movs	r3, #18
 8005da4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8005da6:	2305      	movs	r3, #5
 8005da8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005daa:	1d3b      	adds	r3, r7, #4
 8005dac:	4619      	mov	r1, r3
 8005dae:	4815      	ldr	r0, [pc, #84]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005db0:	f001 fb44 	bl	800743c <HAL_ADC_ConfigChannel>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8005dba:	f000 fb38 	bl	800642e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005dbe:	4b16      	ldr	r3, [pc, #88]	@ (8005e18 <MX_ADC1_Init+0x170>)
 8005dc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005dc2:	2318      	movs	r3, #24
 8005dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005dc6:	1d3b      	adds	r3, r7, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	480e      	ldr	r0, [pc, #56]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005dcc:	f001 fb36 	bl	800743c <HAL_ADC_ConfigChannel>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8005dd6:	f000 fb2a 	bl	800642e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005dda:	4b10      	ldr	r3, [pc, #64]	@ (8005e1c <MX_ADC1_Init+0x174>)
 8005ddc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8005dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005de2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8005de4:	2307      	movs	r3, #7
 8005de6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005de8:	1d3b      	adds	r3, r7, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	4805      	ldr	r0, [pc, #20]	@ (8005e04 <MX_ADC1_Init+0x15c>)
 8005dee:	f001 fb25 	bl	800743c <HAL_ADC_ConfigChannel>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8005df8:	f000 fb19 	bl	800642e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005dfc:	bf00      	nop
 8005dfe:	3728      	adds	r7, #40	@ 0x28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	2000067c 	.word	0x2000067c
 8005e08:	50040000 	.word	0x50040000
 8005e0c:	19200040 	.word	0x19200040
 8005e10:	1d500080 	.word	0x1d500080
 8005e14:	21800100 	.word	0x21800100
 8005e18:	25b00200 	.word	0x25b00200
 8005e1c:	c7520000 	.word	0xc7520000

08005e20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	@ 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e28:	f107 0314 	add.w	r3, r7, #20
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	609a      	str	r2, [r3, #8]
 8005e34:	60da      	str	r2, [r3, #12]
 8005e36:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005efc <HAL_ADC_MspInit+0xdc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d158      	bne.n	8005ef4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005e42:	4b2f      	ldr	r3, [pc, #188]	@ (8005f00 <HAL_ADC_MspInit+0xe0>)
 8005e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e46:	4a2e      	ldr	r2, [pc, #184]	@ (8005f00 <HAL_ADC_MspInit+0xe0>)
 8005e48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8005f00 <HAL_ADC_MspInit+0xe0>)
 8005e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e5a:	4b29      	ldr	r3, [pc, #164]	@ (8005f00 <HAL_ADC_MspInit+0xe0>)
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5e:	4a28      	ldr	r2, [pc, #160]	@ (8005f00 <HAL_ADC_MspInit+0xe0>)
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e66:	4b26      	ldr	r3, [pc, #152]	@ (8005f00 <HAL_ADC_MspInit+0xe0>)
 8005e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SiPM_Sig_Pin|PD_Sig_Pin|LD_Mon_Pin|HV_Chk_Pin;
 8005e72:	231e      	movs	r3, #30
 8005e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8005e76:	230b      	movs	r3, #11
 8005e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e7e:	f107 0314 	add.w	r3, r7, #20
 8005e82:	4619      	mov	r1, r3
 8005e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e88:	f002 fb96 	bl	80085b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005f08 <HAL_ADC_MspInit+0xe8>)
 8005e90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8005e92:	4b1c      	ldr	r3, [pc, #112]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e98:	4b1a      	ldr	r3, [pc, #104]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e9e:	4b19      	ldr	r3, [pc, #100]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005ea4:	4b17      	ldr	r3, [pc, #92]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005ea6:	2280      	movs	r2, #128	@ 0x80
 8005ea8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005eaa:	4b16      	ldr	r3, [pc, #88]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005eb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005eb2:	4b14      	ldr	r3, [pc, #80]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005eb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005eb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005eba:	4b12      	ldr	r3, [pc, #72]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005ec0:	4b10      	ldr	r3, [pc, #64]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005ec2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005ec6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005ec8:	480e      	ldr	r0, [pc, #56]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005eca:	f002 f8f3 	bl	80080b4 <HAL_DMA_Init>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_ADC_MspInit+0xb8>
    {
      Error_Handler();
 8005ed4:	f000 faab 	bl	800642e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a0a      	ldr	r2, [pc, #40]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005edc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005ede:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <HAL_ADC_MspInit+0xe4>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	2012      	movs	r0, #18
 8005eea:	f002 f89e 	bl	800802a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005eee:	2012      	movs	r0, #18
 8005ef0:	f002 f8b7 	bl	8008062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	3728      	adds	r7, #40	@ 0x28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	50040000 	.word	0x50040000
 8005f00:	40021000 	.word	0x40021000
 8005f04:	200006e0 	.word	0x200006e0
 8005f08:	40020008 	.word	0x40020008

08005f0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f12:	4b14      	ldr	r3, [pc, #80]	@ (8005f64 <MX_DMA_Init+0x58>)
 8005f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f16:	4a13      	ldr	r2, [pc, #76]	@ (8005f64 <MX_DMA_Init+0x58>)
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8005f1e:	4b11      	ldr	r3, [pc, #68]	@ (8005f64 <MX_DMA_Init+0x58>)
 8005f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	607b      	str	r3, [r7, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	200b      	movs	r0, #11
 8005f30:	f002 f87b 	bl	800802a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005f34:	200b      	movs	r0, #11
 8005f36:	f002 f894 	bl	8008062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	200e      	movs	r0, #14
 8005f40:	f002 f873 	bl	800802a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005f44:	200e      	movs	r0, #14
 8005f46:	f002 f88c 	bl	8008062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	200f      	movs	r0, #15
 8005f50:	f002 f86b 	bl	800802a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005f54:	200f      	movs	r0, #15
 8005f56:	f002 f884 	bl	8008062 <HAL_NVIC_EnableIRQ>

}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40021000 	.word	0x40021000

08005f68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f6e:	f107 030c 	add.w	r3, r7, #12
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	605a      	str	r2, [r3, #4]
 8005f78:	609a      	str	r2, [r3, #8]
 8005f7a:	60da      	str	r2, [r3, #12]
 8005f7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f7e:	4b33      	ldr	r3, [pc, #204]	@ (800604c <MX_GPIO_Init+0xe4>)
 8005f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f82:	4a32      	ldr	r2, [pc, #200]	@ (800604c <MX_GPIO_Init+0xe4>)
 8005f84:	f043 0304 	orr.w	r3, r3, #4
 8005f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f8a:	4b30      	ldr	r3, [pc, #192]	@ (800604c <MX_GPIO_Init+0xe4>)
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f96:	4b2d      	ldr	r3, [pc, #180]	@ (800604c <MX_GPIO_Init+0xe4>)
 8005f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800604c <MX_GPIO_Init+0xe4>)
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800604c <MX_GPIO_Init+0xe4>)
 8005fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	607b      	str	r3, [r7, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fae:	4b27      	ldr	r3, [pc, #156]	@ (800604c <MX_GPIO_Init+0xe4>)
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb2:	4a26      	ldr	r2, [pc, #152]	@ (800604c <MX_GPIO_Init+0xe4>)
 8005fb4:	f043 0302 	orr.w	r3, r3, #2
 8005fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fba:	4b24      	ldr	r3, [pc, #144]	@ (800604c <MX_GPIO_Init+0xe4>)
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FAN_CON_Pin|FAN_SPEED_Pin, GPIO_PIN_RESET);
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8005fcc:	4820      	ldr	r0, [pc, #128]	@ (8006050 <MX_GPIO_Init+0xe8>)
 8005fce:	f002 fc65 	bl	800889c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HV_CON_Pin|LD_CON_Pin|PROM_WP_Pin, GPIO_PIN_RESET);
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2132      	movs	r1, #50	@ 0x32
 8005fd6:	481f      	ldr	r0, [pc, #124]	@ (8006054 <MX_GPIO_Init+0xec>)
 8005fd8:	f002 fc60 	bl	800889c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FAN_CON_Pin FAN_SPEED_Pin */
  GPIO_InitStruct.Pin = FAN_CON_Pin|FAN_SPEED_Pin;
 8005fdc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8005fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fee:	f107 030c 	add.w	r3, r7, #12
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4816      	ldr	r0, [pc, #88]	@ (8006050 <MX_GPIO_Init+0xe8>)
 8005ff6:	f002 fadf 	bl	80085b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HV_CON_Pin LD_CON_Pin PROM_WP_Pin */
  GPIO_InitStruct.Pin = HV_CON_Pin|LD_CON_Pin|PROM_WP_Pin;
 8005ffa:	2332      	movs	r3, #50	@ 0x32
 8005ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ffe:	2301      	movs	r3, #1
 8006000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006002:	2302      	movs	r3, #2
 8006004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006006:	2300      	movs	r3, #0
 8006008:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800600a:	f107 030c 	add.w	r3, r7, #12
 800600e:	4619      	mov	r1, r3
 8006010:	4810      	ldr	r0, [pc, #64]	@ (8006054 <MX_GPIO_Init+0xec>)
 8006012:	f002 fad1 	bl	80085b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_RPM_Pin */
  GPIO_InitStruct.Pin = FAN_RPM_Pin;
 8006016:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800601a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800601c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006022:	2301      	movs	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FAN_RPM_GPIO_Port, &GPIO_InitStruct);
 8006026:	f107 030c 	add.w	r3, r7, #12
 800602a:	4619      	mov	r1, r3
 800602c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006030:	f002 fac2 	bl	80085b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006034:	2200      	movs	r2, #0
 8006036:	2100      	movs	r1, #0
 8006038:	2017      	movs	r0, #23
 800603a:	f001 fff6 	bl	800802a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800603e:	2017      	movs	r0, #23
 8006040:	f002 f80f 	bl	8008062 <HAL_NVIC_EnableIRQ>

}
 8006044:	bf00      	nop
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40021000 	.word	0x40021000
 8006050:	48000800 	.word	0x48000800
 8006054:	48000400 	.word	0x48000400

08006058 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800605c:	4b1b      	ldr	r3, [pc, #108]	@ (80060cc <MX_I2C1_Init+0x74>)
 800605e:	4a1c      	ldr	r2, [pc, #112]	@ (80060d0 <MX_I2C1_Init+0x78>)
 8006060:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8006062:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <MX_I2C1_Init+0x74>)
 8006064:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <MX_I2C1_Init+0x7c>)
 8006066:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006068:	4b18      	ldr	r3, [pc, #96]	@ (80060cc <MX_I2C1_Init+0x74>)
 800606a:	2200      	movs	r2, #0
 800606c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800606e:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <MX_I2C1_Init+0x74>)
 8006070:	2201      	movs	r2, #1
 8006072:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006074:	4b15      	ldr	r3, [pc, #84]	@ (80060cc <MX_I2C1_Init+0x74>)
 8006076:	2200      	movs	r2, #0
 8006078:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800607a:	4b14      	ldr	r3, [pc, #80]	@ (80060cc <MX_I2C1_Init+0x74>)
 800607c:	2200      	movs	r2, #0
 800607e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006080:	4b12      	ldr	r3, [pc, #72]	@ (80060cc <MX_I2C1_Init+0x74>)
 8006082:	2200      	movs	r2, #0
 8006084:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006086:	4b11      	ldr	r3, [pc, #68]	@ (80060cc <MX_I2C1_Init+0x74>)
 8006088:	2200      	movs	r2, #0
 800608a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800608c:	4b0f      	ldr	r3, [pc, #60]	@ (80060cc <MX_I2C1_Init+0x74>)
 800608e:	2200      	movs	r2, #0
 8006090:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006092:	480e      	ldr	r0, [pc, #56]	@ (80060cc <MX_I2C1_Init+0x74>)
 8006094:	f002 fc32 	bl	80088fc <HAL_I2C_Init>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800609e:	f000 f9c6 	bl	800642e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80060a2:	2100      	movs	r1, #0
 80060a4:	4809      	ldr	r0, [pc, #36]	@ (80060cc <MX_I2C1_Init+0x74>)
 80060a6:	f003 faa1 	bl	80095ec <HAL_I2CEx_ConfigAnalogFilter>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80060b0:	f000 f9bd 	bl	800642e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80060b4:	2100      	movs	r1, #0
 80060b6:	4805      	ldr	r0, [pc, #20]	@ (80060cc <MX_I2C1_Init+0x74>)
 80060b8:	f003 fae3 	bl	8009682 <HAL_I2CEx_ConfigDigitalFilter>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80060c2:	f000 f9b4 	bl	800642e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80060c6:	bf00      	nop
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000728 	.word	0x20000728
 80060d0:	40005400 	.word	0x40005400
 80060d4:	10d19ce4 	.word	0x10d19ce4

080060d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b096      	sub	sp, #88	@ 0x58
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060f0:	f107 0310 	add.w	r3, r7, #16
 80060f4:	2234      	movs	r2, #52	@ 0x34
 80060f6:	2100      	movs	r1, #0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f006 fb17 	bl	800c72c <memset>
  if(i2cHandle->Instance==I2C1)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1e      	ldr	r2, [pc, #120]	@ (800617c <HAL_I2C_MspInit+0xa4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d135      	bne.n	8006174 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006108:	2340      	movs	r3, #64	@ 0x40
 800610a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800610c:	2300      	movs	r3, #0
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006110:	f107 0310 	add.w	r3, r7, #16
 8006114:	4618      	mov	r0, r3
 8006116:	f004 f9eb 	bl	800a4f0 <HAL_RCCEx_PeriphCLKConfig>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006120:	f000 f985 	bl	800642e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006124:	4b16      	ldr	r3, [pc, #88]	@ (8006180 <HAL_I2C_MspInit+0xa8>)
 8006126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006128:	4a15      	ldr	r2, [pc, #84]	@ (8006180 <HAL_I2C_MspInit+0xa8>)
 800612a:	f043 0302 	orr.w	r3, r3, #2
 800612e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006130:	4b13      	ldr	r3, [pc, #76]	@ (8006180 <HAL_I2C_MspInit+0xa8>)
 8006132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800613c:	23c0      	movs	r3, #192	@ 0xc0
 800613e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006140:	2312      	movs	r3, #18
 8006142:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006144:	2300      	movs	r3, #0
 8006146:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006148:	2303      	movs	r3, #3
 800614a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800614c:	2304      	movs	r3, #4
 800614e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006150:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006154:	4619      	mov	r1, r3
 8006156:	480b      	ldr	r0, [pc, #44]	@ (8006184 <HAL_I2C_MspInit+0xac>)
 8006158:	f002 fa2e 	bl	80085b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800615c:	4b08      	ldr	r3, [pc, #32]	@ (8006180 <HAL_I2C_MspInit+0xa8>)
 800615e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006160:	4a07      	ldr	r2, [pc, #28]	@ (8006180 <HAL_I2C_MspInit+0xa8>)
 8006162:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006166:	6593      	str	r3, [r2, #88]	@ 0x58
 8006168:	4b05      	ldr	r3, [pc, #20]	@ (8006180 <HAL_I2C_MspInit+0xa8>)
 800616a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800616c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006174:	bf00      	nop
 8006176:	3758      	adds	r7, #88	@ 0x58
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40005400 	.word	0x40005400
 8006180:	40021000 	.word	0x40021000
 8006184:	48000400 	.word	0x48000400

08006188 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == FAN_RPM_Pin)
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006198:	d104      	bne.n	80061a4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		tFan.RpmCurrCnt++;
 800619a:	4b05      	ldr	r3, [pc, #20]	@ (80061b0 <HAL_GPIO_EXTI_Callback+0x28>)
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	3301      	adds	r3, #1
 80061a0:	4a03      	ldr	r2, [pc, #12]	@ (80061b0 <HAL_GPIO_EXTI_Callback+0x28>)
 80061a2:	6113      	str	r3, [r2, #16]
	}
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	200000b4 	.word	0x200000b4

080061b4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a15      	ldr	r2, [pc, #84]	@ (800621c <HAL_UARTEx_RxEventCallback+0x68>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d124      	bne.n	8006214 <HAL_UARTEx_RxEventCallback+0x60>
		//tUartMsg.uNewPos = 0;
		/* start the DMA again */
//		HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)tUartMsg.RxTemp, MAX_RX_BUFF_SIZE);
//		__HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

		memcpy ((uint8_t *)tUartMsg.RxTemp, (uint8_t *)tUartMsg.RingRxTemp, Size);
 80061ca:	887b      	ldrh	r3, [r7, #2]
 80061cc:	461a      	mov	r2, r3
 80061ce:	4914      	ldr	r1, [pc, #80]	@ (8006220 <HAL_UARTEx_RxEventCallback+0x6c>)
 80061d0:	4814      	ldr	r0, [pc, #80]	@ (8006224 <HAL_UARTEx_RxEventCallback+0x70>)
 80061d2:	f006 fad7 	bl	800c784 <memcpy>

		tUartMsg.FlagMsgRcvOn = ON;
 80061d6:	4b12      	ldr	r3, [pc, #72]	@ (8006220 <HAL_UARTEx_RxEventCallback+0x6c>)
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286
		tUartMsg.RxTempCnt = Size;
 80061de:	887b      	ldrh	r3, [r7, #2]
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006220 <HAL_UARTEx_RxEventCallback+0x6c>)
 80061e4:	f883 2281 	strb.w	r2, [r3, #641]	@ 0x281

		memset(tUartMsg.RingRxTemp, 0, sizeof(tUartMsg.RingRxTemp));
 80061e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061ec:	2100      	movs	r1, #0
 80061ee:	480c      	ldr	r0, [pc, #48]	@ (8006220 <HAL_UARTEx_RxEventCallback+0x6c>)
 80061f0:	f006 fa9c 	bl	800c72c <memset>

		HAL_UART_DMAStop(&huart1);
 80061f4:	480c      	ldr	r0, [pc, #48]	@ (8006228 <HAL_UARTEx_RxEventCallback+0x74>)
 80061f6:	f005 f80a 	bl	800b20e <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) tUartMsg.RingRxTemp, MAX_RX_BUFF_SIZE);
 80061fa:	2280      	movs	r2, #128	@ 0x80
 80061fc:	4908      	ldr	r1, [pc, #32]	@ (8006220 <HAL_UARTEx_RxEventCallback+0x6c>)
 80061fe:	480a      	ldr	r0, [pc, #40]	@ (8006228 <HAL_UARTEx_RxEventCallback+0x74>)
 8006200:	f006 fa40 	bl	800c684 <HAL_UARTEx_ReceiveToIdle_DMA>
       __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8006204:	4b09      	ldr	r3, [pc, #36]	@ (800622c <HAL_UARTEx_RxEventCallback+0x78>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b08      	ldr	r3, [pc, #32]	@ (800622c <HAL_UARTEx_RxEventCallback+0x78>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0204 	bic.w	r2, r2, #4
 8006212:	601a      	str	r2, [r3, #0]
	}
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	40013800 	.word	0x40013800
 8006220:	200002e4 	.word	0x200002e4
 8006224:	200004e4 	.word	0x200004e4
 8006228:	200007e8 	.word	0x200007e8
 800622c:	20000870 	.word	0x20000870

08006230 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]

	if(ON == tSysState.FlagGetAdcOn)
 8006238:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <HAL_ADC_ConvCpltCallback+0x58>)
 800623a:	79db      	ldrb	r3, [r3, #7]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d118      	bne.n	8006272 <HAL_ADC_ConvCpltCallback+0x42>
	{
		tSiPmCtrl.CurrAdcVal 	= (uint16_t)(Adc_Temp[0]);
 8006240:	4b12      	ldr	r3, [pc, #72]	@ (800628c <HAL_ADC_ConvCpltCallback+0x5c>)
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29a      	uxth	r2, r3
 8006246:	4b12      	ldr	r3, [pc, #72]	@ (8006290 <HAL_ADC_ConvCpltCallback+0x60>)
 8006248:	80da      	strh	r2, [r3, #6]
		tPdCtrl.CurrAdcVal  	= (uint16_t)(Adc_Temp[1]);
 800624a:	4b10      	ldr	r3, [pc, #64]	@ (800628c <HAL_ADC_ConvCpltCallback+0x5c>)
 800624c:	885b      	ldrh	r3, [r3, #2]
 800624e:	b29a      	uxth	r2, r3
 8006250:	4b10      	ldr	r3, [pc, #64]	@ (8006294 <HAL_ADC_ConvCpltCallback+0x64>)
 8006252:	80da      	strh	r2, [r3, #6]
		tLdCtrl.CurrAdcVal 		= (uint16_t)(Adc_Temp[2]);
 8006254:	4b0d      	ldr	r3, [pc, #52]	@ (800628c <HAL_ADC_ConvCpltCallback+0x5c>)
 8006256:	889b      	ldrh	r3, [r3, #4]
 8006258:	b29a      	uxth	r2, r3
 800625a:	4b0f      	ldr	r3, [pc, #60]	@ (8006298 <HAL_ADC_ConvCpltCallback+0x68>)
 800625c:	80da      	strh	r2, [r3, #6]
		tHvCtrl.CurrAdcVal 		= (uint16_t)(Adc_Temp[3]);
 800625e:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <HAL_ADC_ConvCpltCallback+0x5c>)
 8006260:	88db      	ldrh	r3, [r3, #6]
 8006262:	b29a      	uxth	r2, r3
 8006264:	4b0d      	ldr	r3, [pc, #52]	@ (800629c <HAL_ADC_ConvCpltCallback+0x6c>)
 8006266:	80da      	strh	r2, [r3, #6]


		tPdCtrl.ChkCount++;
 8006268:	4b0a      	ldr	r3, [pc, #40]	@ (8006294 <HAL_ADC_ConvCpltCallback+0x64>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	3301      	adds	r3, #1
 800626e:	4a09      	ldr	r2, [pc, #36]	@ (8006294 <HAL_ADC_ConvCpltCallback+0x64>)
 8006270:	6093      	str	r3, [r2, #8]

		//HAL_ADC_Start_DMA(&hadc1, Adc_Temp, 5);
	}

	tSysState.Temp			= (uint16_t)(Adc_Temp[4]);
 8006272:	4b06      	ldr	r3, [pc, #24]	@ (800628c <HAL_ADC_ConvCpltCallback+0x5c>)
 8006274:	891b      	ldrh	r3, [r3, #8]
 8006276:	b29a      	uxth	r2, r3
 8006278:	4b03      	ldr	r3, [pc, #12]	@ (8006288 <HAL_ADC_ConvCpltCallback+0x58>)
 800627a:	831a      	strh	r2, [r3, #24]

}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	2000028c 	.word	0x2000028c
 800628c:	2000077c 	.word	0x2000077c
 8006290:	200000a4 	.word	0x200000a4
 8006294:	20000074 	.word	0x20000074
 8006298:	20000084 	.word	0x20000084
 800629c:	20000094 	.word	0x20000094

080062a0 <UART_Transmit_Proc>:


void UART_Transmit_Proc(UART_HandleTypeDef* hUart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	if(ON == tMsgPkt.FlagTxPktOn)
 80062a8:	4b09      	ldr	r3, [pc, #36]	@ (80062d0 <UART_Transmit_Proc+0x30>)
 80062aa:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10a      	bne.n	80062c8 <UART_Transmit_Proc+0x28>
	{
		HAL_UART_Transmit(hUart, tUartMsg.RingTxTemp, tUartMsg.TxTempCnt,100);
 80062b2:	4b08      	ldr	r3, [pc, #32]	@ (80062d4 <UART_Transmit_Proc+0x34>)
 80062b4:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 80062b8:	461a      	mov	r2, r3
 80062ba:	2364      	movs	r3, #100	@ 0x64
 80062bc:	4906      	ldr	r1, [pc, #24]	@ (80062d8 <UART_Transmit_Proc+0x38>)
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f004 ff1c 	bl	800b0fc <HAL_UART_Transmit>
		UART_TxInit();
 80062c4:	f7ff f8b8 	bl	8005438 <UART_TxInit>
	}
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000570 	.word	0x20000570
 80062d4:	200002e4 	.word	0x200002e4
 80062d8:	200003e4 	.word	0x200003e4

080062dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ec:	d102      	bne.n	80062f4 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		tSysTime.FlagSysTickOn = ON;
 80062ee:	4b04      	ldr	r3, [pc, #16]	@ (8006300 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
	}
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	200002ac 	.word	0x200002ac

08006304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006308:	f000 fac9 	bl	800689e <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(Adc_Temp, 0, sizeof(Adc_Temp));
 800630c:	2220      	movs	r2, #32
 800630e:	2100      	movs	r1, #0
 8006310:	481a      	ldr	r0, [pc, #104]	@ (800637c <main+0x78>)
 8006312:	f006 fa0b 	bl	800c72c <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006316:	f000 f83d 	bl	8006394 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PROC_Init();
 800631a:	f7fc f925 	bl	8002568 <PROC_Init>
  EXT_Init();
 800631e:	f7fa ff47 	bl	80011b0 <EXT_Init>
  FAN_Init();
 8006322:	f7fb fa05 	bl	8001730 <FAN_Init>
  UART_Init();
 8006326:	f7ff fb97 	bl	8005a58 <UART_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800632a:	f7ff fe1d 	bl	8005f68 <MX_GPIO_Init>
  MX_DMA_Init();
 800632e:	f7ff fded 	bl	8005f0c <MX_DMA_Init>
  MX_I2C1_Init();
 8006332:	f7ff fe91 	bl	8006058 <MX_I2C1_Init>
  MX_ADC1_Init();
 8006336:	f7ff fcb7 	bl	8005ca8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800633a:	f000 f99b 	bl	8006674 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800633e:	f000 f927 	bl	8006590 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  PARAM_Init(&hi2c1);
 8006342:	480f      	ldr	r0, [pc, #60]	@ (8006380 <main+0x7c>)
 8006344:	f7fb ffe8 	bl	8002318 <PARAM_Init>
  PARAM_Process();
 8006348:	f7fc f80c 	bl	8002364 <PARAM_Process>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)tUartMsg.RingRxTemp, MAX_RX_BUFF_SIZE);
 800634c:	2280      	movs	r2, #128	@ 0x80
 800634e:	490d      	ldr	r1, [pc, #52]	@ (8006384 <main+0x80>)
 8006350:	480d      	ldr	r0, [pc, #52]	@ (8006388 <main+0x84>)
 8006352:	f006 f997 	bl	800c684 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8006356:	4b0d      	ldr	r3, [pc, #52]	@ (800638c <main+0x88>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	4b0b      	ldr	r3, [pc, #44]	@ (800638c <main+0x88>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0204 	bic.w	r2, r2, #4
 8006364:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8006366:	480a      	ldr	r0, [pc, #40]	@ (8006390 <main+0x8c>)
 8006368:	f004 faa0 	bl	800a8ac <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 SYSTEM_Process();
 800636c:	f7fe ffe6 	bl	800533c <SYSTEM_Process>
	 UART_Transmit_Proc(&huart1);
 8006370:	4805      	ldr	r0, [pc, #20]	@ (8006388 <main+0x84>)
 8006372:	f7ff ff95 	bl	80062a0 <UART_Transmit_Proc>
	 SYSTEM_Process();
 8006376:	bf00      	nop
 8006378:	e7f8      	b.n	800636c <main+0x68>
 800637a:	bf00      	nop
 800637c:	2000077c 	.word	0x2000077c
 8006380:	20000728 	.word	0x20000728
 8006384:	200002e4 	.word	0x200002e4
 8006388:	200007e8 	.word	0x200007e8
 800638c:	20000870 	.word	0x20000870
 8006390:	2000079c 	.word	0x2000079c

08006394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b096      	sub	sp, #88	@ 0x58
 8006398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800639a:	f107 0314 	add.w	r3, r7, #20
 800639e:	2244      	movs	r2, #68	@ 0x44
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f006 f9c2 	bl	800c72c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80063a8:	463b      	mov	r3, r7
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	605a      	str	r2, [r3, #4]
 80063b0:	609a      	str	r2, [r3, #8]
 80063b2:	60da      	str	r2, [r3, #12]
 80063b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80063b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80063ba:	f003 f9bd 	bl	8009738 <HAL_PWREx_ControlVoltageScaling>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80063c4:	f000 f833 	bl	800642e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80063cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80063d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80063d2:	2302      	movs	r3, #2
 80063d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80063d6:	2303      	movs	r3, #3
 80063d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80063da:	2301      	movs	r3, #1
 80063dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 80063de:	2328      	movs	r3, #40	@ 0x28
 80063e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80063e2:	2302      	movs	r3, #2
 80063e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80063e6:	2304      	movs	r3, #4
 80063e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063ea:	f107 0314 	add.w	r3, r7, #20
 80063ee:	4618      	mov	r0, r3
 80063f0:	f003 f9f8 	bl	80097e4 <HAL_RCC_OscConfig>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80063fa:	f000 f818 	bl	800642e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063fe:	230f      	movs	r3, #15
 8006400:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006402:	2303      	movs	r3, #3
 8006404:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800640e:	2300      	movs	r3, #0
 8006410:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006412:	463b      	mov	r3, r7
 8006414:	2104      	movs	r1, #4
 8006416:	4618      	mov	r0, r3
 8006418:	f003 fe46 	bl	800a0a8 <HAL_RCC_ClockConfig>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8006422:	f000 f804 	bl	800642e <Error_Handler>
  }
}
 8006426:	bf00      	nop
 8006428:	3758      	adds	r7, #88	@ 0x58
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800642e:	b480      	push	{r7}
 8006430:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006432:	b672      	cpsid	i
}
 8006434:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006436:	bf00      	nop
 8006438:	e7fd      	b.n	8006436 <Error_Handler+0x8>
	...

0800643c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006442:	4b0f      	ldr	r3, [pc, #60]	@ (8006480 <HAL_MspInit+0x44>)
 8006444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006446:	4a0e      	ldr	r2, [pc, #56]	@ (8006480 <HAL_MspInit+0x44>)
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	6613      	str	r3, [r2, #96]	@ 0x60
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <HAL_MspInit+0x44>)
 8006450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <HAL_MspInit+0x44>)
 800645c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645e:	4a08      	ldr	r2, [pc, #32]	@ (8006480 <HAL_MspInit+0x44>)
 8006460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006464:	6593      	str	r3, [r2, #88]	@ 0x58
 8006466:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <HAL_MspInit+0x44>)
 8006468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40021000 	.word	0x40021000

08006484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006488:	bf00      	nop
 800648a:	e7fd      	b.n	8006488 <NMI_Handler+0x4>

0800648c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <HardFault_Handler+0x4>

08006494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006498:	bf00      	nop
 800649a:	e7fd      	b.n	8006498 <MemManage_Handler+0x4>

0800649c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <BusFault_Handler+0x4>

080064a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064a8:	bf00      	nop
 80064aa:	e7fd      	b.n	80064a8 <UsageFault_Handler+0x4>

080064ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064b0:	bf00      	nop
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064ba:	b480      	push	{r7}
 80064bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064be:	bf00      	nop
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064cc:	bf00      	nop
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064da:	f000 fa35 	bl	8006948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064de:	bf00      	nop
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80064e8:	4802      	ldr	r0, [pc, #8]	@ (80064f4 <DMA1_Channel1_IRQHandler+0x10>)
 80064ea:	f001 ff7a 	bl	80083e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80064ee:	bf00      	nop
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	200006e0 	.word	0x200006e0

080064f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80064fc:	4802      	ldr	r0, [pc, #8]	@ (8006508 <DMA1_Channel4_IRQHandler+0x10>)
 80064fe:	f001 ff70 	bl	80083e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	200008b8 	.word	0x200008b8

0800650c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006510:	4802      	ldr	r0, [pc, #8]	@ (800651c <DMA1_Channel5_IRQHandler+0x10>)
 8006512:	f001 ff66 	bl	80083e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000870 	.word	0x20000870

08006520 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006524:	4802      	ldr	r0, [pc, #8]	@ (8006530 <ADC1_2_IRQHandler+0x10>)
 8006526:	f000 fd5b 	bl	8006fe0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800652a:	bf00      	nop
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	2000067c 	.word	0x2000067c

08006534 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAN_RPM_Pin);
 8006538:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800653c:	f002 f9c6 	bl	80088cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006540:	bf00      	nop
 8006542:	bd80      	pop	{r7, pc}

08006544 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006548:	4802      	ldr	r0, [pc, #8]	@ (8006554 <TIM2_IRQHandler+0x10>)
 800654a:	f004 fa03 	bl	800a954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800654e:	bf00      	nop
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	2000079c 	.word	0x2000079c

08006558 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800655c:	4802      	ldr	r0, [pc, #8]	@ (8006568 <USART1_IRQHandler+0x10>)
 800655e:	f004 fee9 	bl	800b334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006562:	bf00      	nop
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	200007e8 	.word	0x200007e8

0800656c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006570:	4b06      	ldr	r3, [pc, #24]	@ (800658c <SystemInit+0x20>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006576:	4a05      	ldr	r2, [pc, #20]	@ (800658c <SystemInit+0x20>)
 8006578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800657c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8006580:	bf00      	nop
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	e000ed00 	.word	0xe000ed00

08006590 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006596:	f107 0310 	add.w	r3, r7, #16
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	605a      	str	r2, [r3, #4]
 80065a0:	609a      	str	r2, [r3, #8]
 80065a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065a4:	1d3b      	adds	r3, r7, #4
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	605a      	str	r2, [r3, #4]
 80065ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80065ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006628 <MX_TIM2_Init+0x98>)
 80065b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80065b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80065b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006628 <MX_TIM2_Init+0x98>)
 80065b8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80065bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065be:	4b1a      	ldr	r3, [pc, #104]	@ (8006628 <MX_TIM2_Init+0x98>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80065c4:	4b18      	ldr	r3, [pc, #96]	@ (8006628 <MX_TIM2_Init+0x98>)
 80065c6:	2263      	movs	r2, #99	@ 0x63
 80065c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065ca:	4b17      	ldr	r3, [pc, #92]	@ (8006628 <MX_TIM2_Init+0x98>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065d0:	4b15      	ldr	r3, [pc, #84]	@ (8006628 <MX_TIM2_Init+0x98>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80065d6:	4814      	ldr	r0, [pc, #80]	@ (8006628 <MX_TIM2_Init+0x98>)
 80065d8:	f004 f910 	bl	800a7fc <HAL_TIM_Base_Init>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80065e2:	f7ff ff24 	bl	800642e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80065e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80065ec:	f107 0310 	add.w	r3, r7, #16
 80065f0:	4619      	mov	r1, r3
 80065f2:	480d      	ldr	r0, [pc, #52]	@ (8006628 <MX_TIM2_Init+0x98>)
 80065f4:	f004 fab5 	bl	800ab62 <HAL_TIM_ConfigClockSource>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80065fe:	f7ff ff16 	bl	800642e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006602:	2300      	movs	r3, #0
 8006604:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800660a:	1d3b      	adds	r3, r7, #4
 800660c:	4619      	mov	r1, r3
 800660e:	4806      	ldr	r0, [pc, #24]	@ (8006628 <MX_TIM2_Init+0x98>)
 8006610:	f004 fca2 	bl	800af58 <HAL_TIMEx_MasterConfigSynchronization>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800661a:	f7ff ff08 	bl	800642e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800661e:	bf00      	nop
 8006620:	3720      	adds	r7, #32
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	2000079c 	.word	0x2000079c

0800662c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800663c:	d113      	bne.n	8006666 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800663e:	4b0c      	ldr	r3, [pc, #48]	@ (8006670 <HAL_TIM_Base_MspInit+0x44>)
 8006640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006642:	4a0b      	ldr	r2, [pc, #44]	@ (8006670 <HAL_TIM_Base_MspInit+0x44>)
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	6593      	str	r3, [r2, #88]	@ 0x58
 800664a:	4b09      	ldr	r3, [pc, #36]	@ (8006670 <HAL_TIM_Base_MspInit+0x44>)
 800664c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006656:	2200      	movs	r2, #0
 8006658:	2100      	movs	r1, #0
 800665a:	201c      	movs	r0, #28
 800665c:	f001 fce5 	bl	800802a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006660:	201c      	movs	r0, #28
 8006662:	f001 fcfe 	bl	8008062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	40021000 	.word	0x40021000

08006674 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006678:	4b14      	ldr	r3, [pc, #80]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 800667a:	4a15      	ldr	r2, [pc, #84]	@ (80066d0 <MX_USART1_UART_Init+0x5c>)
 800667c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800667e:	4b13      	ldr	r3, [pc, #76]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 8006680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006686:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 8006688:	2200      	movs	r2, #0
 800668a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800668c:	4b0f      	ldr	r3, [pc, #60]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 800668e:	2200      	movs	r2, #0
 8006690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006692:	4b0e      	ldr	r3, [pc, #56]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 8006694:	2200      	movs	r2, #0
 8006696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006698:	4b0c      	ldr	r3, [pc, #48]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 800669a:	220c      	movs	r2, #12
 800669c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800669e:	4b0b      	ldr	r3, [pc, #44]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80066a4:	4b09      	ldr	r3, [pc, #36]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80066aa:	4b08      	ldr	r3, [pc, #32]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80066b0:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80066b6:	4805      	ldr	r0, [pc, #20]	@ (80066cc <MX_USART1_UART_Init+0x58>)
 80066b8:	f004 fcd2 	bl	800b060 <HAL_UART_Init>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80066c2:	f7ff feb4 	bl	800642e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80066c6:	bf00      	nop
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	200007e8 	.word	0x200007e8
 80066d0:	40013800 	.word	0x40013800

080066d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b096      	sub	sp, #88	@ 0x58
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	605a      	str	r2, [r3, #4]
 80066e6:	609a      	str	r2, [r3, #8]
 80066e8:	60da      	str	r2, [r3, #12]
 80066ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066ec:	f107 0310 	add.w	r3, r7, #16
 80066f0:	2234      	movs	r2, #52	@ 0x34
 80066f2:	2100      	movs	r1, #0
 80066f4:	4618      	mov	r0, r3
 80066f6:	f006 f819 	bl	800c72c <memset>
  if(uartHandle->Instance==USART1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a4d      	ldr	r2, [pc, #308]	@ (8006834 <HAL_UART_MspInit+0x160>)
 8006700:	4293      	cmp	r3, r2
 8006702:	f040 8092 	bne.w	800682a <HAL_UART_MspInit+0x156>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006706:	2301      	movs	r3, #1
 8006708:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800670e:	f107 0310 	add.w	r3, r7, #16
 8006712:	4618      	mov	r0, r3
 8006714:	f003 feec 	bl	800a4f0 <HAL_RCCEx_PeriphCLKConfig>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800671e:	f7ff fe86 	bl	800642e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006722:	4b45      	ldr	r3, [pc, #276]	@ (8006838 <HAL_UART_MspInit+0x164>)
 8006724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006726:	4a44      	ldr	r2, [pc, #272]	@ (8006838 <HAL_UART_MspInit+0x164>)
 8006728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800672c:	6613      	str	r3, [r2, #96]	@ 0x60
 800672e:	4b42      	ldr	r3, [pc, #264]	@ (8006838 <HAL_UART_MspInit+0x164>)
 8006730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800673a:	4b3f      	ldr	r3, [pc, #252]	@ (8006838 <HAL_UART_MspInit+0x164>)
 800673c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800673e:	4a3e      	ldr	r2, [pc, #248]	@ (8006838 <HAL_UART_MspInit+0x164>)
 8006740:	f043 0301 	orr.w	r3, r3, #1
 8006744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006746:	4b3c      	ldr	r3, [pc, #240]	@ (8006838 <HAL_UART_MspInit+0x164>)
 8006748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	60bb      	str	r3, [r7, #8]
 8006750:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006752:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006756:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006758:	2302      	movs	r3, #2
 800675a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800675c:	2300      	movs	r3, #0
 800675e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006760:	2301      	movs	r3, #1
 8006762:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006764:	2307      	movs	r3, #7
 8006766:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006768:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800676c:	4619      	mov	r1, r3
 800676e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006772:	f001 ff21 	bl	80085b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006776:	4b31      	ldr	r3, [pc, #196]	@ (800683c <HAL_UART_MspInit+0x168>)
 8006778:	4a31      	ldr	r2, [pc, #196]	@ (8006840 <HAL_UART_MspInit+0x16c>)
 800677a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800677c:	4b2f      	ldr	r3, [pc, #188]	@ (800683c <HAL_UART_MspInit+0x168>)
 800677e:	2202      	movs	r2, #2
 8006780:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006782:	4b2e      	ldr	r3, [pc, #184]	@ (800683c <HAL_UART_MspInit+0x168>)
 8006784:	2200      	movs	r2, #0
 8006786:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006788:	4b2c      	ldr	r3, [pc, #176]	@ (800683c <HAL_UART_MspInit+0x168>)
 800678a:	2200      	movs	r2, #0
 800678c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800678e:	4b2b      	ldr	r3, [pc, #172]	@ (800683c <HAL_UART_MspInit+0x168>)
 8006790:	2280      	movs	r2, #128	@ 0x80
 8006792:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006794:	4b29      	ldr	r3, [pc, #164]	@ (800683c <HAL_UART_MspInit+0x168>)
 8006796:	2200      	movs	r2, #0
 8006798:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800679a:	4b28      	ldr	r3, [pc, #160]	@ (800683c <HAL_UART_MspInit+0x168>)
 800679c:	2200      	movs	r2, #0
 800679e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80067a0:	4b26      	ldr	r3, [pc, #152]	@ (800683c <HAL_UART_MspInit+0x168>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80067a6:	4b25      	ldr	r3, [pc, #148]	@ (800683c <HAL_UART_MspInit+0x168>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80067ac:	4823      	ldr	r0, [pc, #140]	@ (800683c <HAL_UART_MspInit+0x168>)
 80067ae:	f001 fc81 	bl	80080b4 <HAL_DMA_Init>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80067b8:	f7ff fe39 	bl	800642e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a1f      	ldr	r2, [pc, #124]	@ (800683c <HAL_UART_MspInit+0x168>)
 80067c0:	675a      	str	r2, [r3, #116]	@ 0x74
 80067c2:	4a1e      	ldr	r2, [pc, #120]	@ (800683c <HAL_UART_MspInit+0x168>)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80067c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006844 <HAL_UART_MspInit+0x170>)
 80067ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006848 <HAL_UART_MspInit+0x174>)
 80067cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80067ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006844 <HAL_UART_MspInit+0x170>)
 80067d0:	2202      	movs	r2, #2
 80067d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006844 <HAL_UART_MspInit+0x170>)
 80067d6:	2210      	movs	r2, #16
 80067d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067da:	4b1a      	ldr	r3, [pc, #104]	@ (8006844 <HAL_UART_MspInit+0x170>)
 80067dc:	2200      	movs	r2, #0
 80067de:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067e0:	4b18      	ldr	r3, [pc, #96]	@ (8006844 <HAL_UART_MspInit+0x170>)
 80067e2:	2280      	movs	r2, #128	@ 0x80
 80067e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067e6:	4b17      	ldr	r3, [pc, #92]	@ (8006844 <HAL_UART_MspInit+0x170>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067ec:	4b15      	ldr	r3, [pc, #84]	@ (8006844 <HAL_UART_MspInit+0x170>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80067f2:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <HAL_UART_MspInit+0x170>)
 80067f4:	2220      	movs	r2, #32
 80067f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80067f8:	4b12      	ldr	r3, [pc, #72]	@ (8006844 <HAL_UART_MspInit+0x170>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80067fe:	4811      	ldr	r0, [pc, #68]	@ (8006844 <HAL_UART_MspInit+0x170>)
 8006800:	f001 fc58 	bl	80080b4 <HAL_DMA_Init>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800680a:	f7ff fe10 	bl	800642e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a0c      	ldr	r2, [pc, #48]	@ (8006844 <HAL_UART_MspInit+0x170>)
 8006812:	671a      	str	r2, [r3, #112]	@ 0x70
 8006814:	4a0b      	ldr	r2, [pc, #44]	@ (8006844 <HAL_UART_MspInit+0x170>)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800681a:	2200      	movs	r2, #0
 800681c:	2100      	movs	r1, #0
 800681e:	2025      	movs	r0, #37	@ 0x25
 8006820:	f001 fc03 	bl	800802a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006824:	2025      	movs	r0, #37	@ 0x25
 8006826:	f001 fc1c 	bl	8008062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800682a:	bf00      	nop
 800682c:	3758      	adds	r7, #88	@ 0x58
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	40013800 	.word	0x40013800
 8006838:	40021000 	.word	0x40021000
 800683c:	20000870 	.word	0x20000870
 8006840:	40020058 	.word	0x40020058
 8006844:	200008b8 	.word	0x200008b8
 8006848:	40020044 	.word	0x40020044

0800684c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800684c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006884 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006850:	f7ff fe8c 	bl	800656c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006854:	480c      	ldr	r0, [pc, #48]	@ (8006888 <LoopForever+0x6>)
  ldr r1, =_edata
 8006856:	490d      	ldr	r1, [pc, #52]	@ (800688c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006858:	4a0d      	ldr	r2, [pc, #52]	@ (8006890 <LoopForever+0xe>)
  movs r3, #0
 800685a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800685c:	e002      	b.n	8006864 <LoopCopyDataInit>

0800685e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800685e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006862:	3304      	adds	r3, #4

08006864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006868:	d3f9      	bcc.n	800685e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800686a:	4a0a      	ldr	r2, [pc, #40]	@ (8006894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800686c:	4c0a      	ldr	r4, [pc, #40]	@ (8006898 <LoopForever+0x16>)
  movs r3, #0
 800686e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006870:	e001      	b.n	8006876 <LoopFillZerobss>

08006872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006874:	3204      	adds	r2, #4

08006876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006878:	d3fb      	bcc.n	8006872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800687a:	f005 ff5f 	bl	800c73c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800687e:	f7ff fd41 	bl	8006304 <main>

08006882 <LoopForever>:

LoopForever:
    b LoopForever
 8006882:	e7fe      	b.n	8006882 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006884:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8006888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800688c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8006890:	0800c810 	.word	0x0800c810
  ldr r2, =_sbss
 8006894:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8006898:	20000904 	.word	0x20000904

0800689c <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800689c:	e7fe      	b.n	800689c <COMP_IRQHandler>

0800689e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068a8:	2003      	movs	r0, #3
 80068aa:	f001 fbb3 	bl	8008014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068ae:	200f      	movs	r0, #15
 80068b0:	f000 f80e 	bl	80068d0 <HAL_InitTick>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	71fb      	strb	r3, [r7, #7]
 80068be:	e001      	b.n	80068c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80068c0:	f7ff fdbc 	bl	800643c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80068c4:	79fb      	ldrb	r3, [r7, #7]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80068dc:	4b17      	ldr	r3, [pc, #92]	@ (800693c <HAL_InitTick+0x6c>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d023      	beq.n	800692c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80068e4:	4b16      	ldr	r3, [pc, #88]	@ (8006940 <HAL_InitTick+0x70>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	4b14      	ldr	r3, [pc, #80]	@ (800693c <HAL_InitTick+0x6c>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	4619      	mov	r1, r3
 80068ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80068f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 fbcd 	bl	800809a <HAL_SYSTICK_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10f      	bne.n	8006926 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b0f      	cmp	r3, #15
 800690a:	d809      	bhi.n	8006920 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800690c:	2200      	movs	r2, #0
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	f001 fb89 	bl	800802a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006918:	4a0a      	ldr	r2, [pc, #40]	@ (8006944 <HAL_InitTick+0x74>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e007      	b.n	8006930 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]
 8006924:	e004      	b.n	8006930 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	73fb      	strb	r3, [r7, #15]
 800692a:	e001      	b.n	8006930 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000008 	.word	0x20000008
 8006940:	20000000 	.word	0x20000000
 8006944:	20000004 	.word	0x20000004

08006948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <HAL_IncTick+0x20>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	4b06      	ldr	r3, [pc, #24]	@ (800696c <HAL_IncTick+0x24>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4413      	add	r3, r2
 8006958:	4a04      	ldr	r2, [pc, #16]	@ (800696c <HAL_IncTick+0x24>)
 800695a:	6013      	str	r3, [r2, #0]
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	20000008 	.word	0x20000008
 800696c:	20000900 	.word	0x20000900

08006970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  return uwTick;
 8006974:	4b03      	ldr	r3, [pc, #12]	@ (8006984 <HAL_GetTick+0x14>)
 8006976:	681b      	ldr	r3, [r3, #0]
}
 8006978:	4618      	mov	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20000900 	.word	0x20000900

08006988 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	609a      	str	r2, [r3, #8]
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	609a      	str	r2, [r3, #8]
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3360      	adds	r3, #96	@ 0x60
 8006a02:	461a      	mov	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4b08      	ldr	r3, [pc, #32]	@ (8006a34 <LL_ADC_SetOffset+0x44>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006a28:	bf00      	nop
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	03fff000 	.word	0x03fff000

08006a38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3360      	adds	r3, #96	@ 0x60
 8006a46:	461a      	mov	r2, r3
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3360      	adds	r3, #96	@ 0x60
 8006a74:	461a      	mov	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	615a      	str	r2, [r3, #20]
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b087      	sub	sp, #28
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3330      	adds	r3, #48	@ 0x30
 8006af6:	461a      	mov	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	f003 030c 	and.w	r3, r3, #12
 8006b02:	4413      	add	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f003 031f 	and.w	r3, r3, #31
 8006b10:	211f      	movs	r1, #31
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	43db      	mvns	r3, r3
 8006b18:	401a      	ands	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	0e9b      	lsrs	r3, r3, #26
 8006b1e:	f003 011f 	and.w	r1, r3, #31
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f003 031f 	and.w	r3, r3, #31
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3314      	adds	r3, #20
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	0e5b      	lsrs	r3, r3, #25
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	4413      	add	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	0d1b      	lsrs	r3, r3, #20
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	2107      	movs	r1, #7
 8006b92:	fa01 f303 	lsl.w	r3, r1, r3
 8006b96:	43db      	mvns	r3, r3
 8006b98:	401a      	ands	r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	0d1b      	lsrs	r3, r3, #20
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
	...

08006bbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	401a      	ands	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f003 0318 	and.w	r3, r3, #24
 8006bde:	4908      	ldr	r1, [pc, #32]	@ (8006c00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006be0:	40d9      	lsrs	r1, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	400b      	ands	r3, r1
 8006be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bea:	431a      	orrs	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	0007ffff 	.word	0x0007ffff

08006c04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 031f 	and.w	r3, r3, #31
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6093      	str	r3, [r2, #8]
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c74:	d101      	bne.n	8006c7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cc4:	d101      	bne.n	8006cca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <LL_ADC_IsEnabled+0x18>
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <LL_ADC_IsEnabled+0x1a>
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d101      	bne.n	8006d16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d101      	bne.n	8006d3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006d4c:	b590      	push	{r4, r7, lr}
 8006d4e:	b089      	sub	sp, #36	@ 0x24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e12b      	b.n	8006fbe <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d109      	bne.n	8006d88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff f853 	bl	8005e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff ff67 	bl	8006c60 <LL_ADC_IsDeepPowerDownEnabled>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff ff4d 	bl	8006c3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff ff82 	bl	8006cb0 <LL_ADC_IsInternalRegulatorEnabled>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d115      	bne.n	8006dde <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7ff ff66 	bl	8006c88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006dbc:	4b82      	ldr	r3, [pc, #520]	@ (8006fc8 <HAL_ADC_Init+0x27c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	099b      	lsrs	r3, r3, #6
 8006dc2:	4a82      	ldr	r2, [pc, #520]	@ (8006fcc <HAL_ADC_Init+0x280>)
 8006dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc8:	099b      	lsrs	r3, r3, #6
 8006dca:	3301      	adds	r3, #1
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006dd0:	e002      	b.n	8006dd8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1f9      	bne.n	8006dd2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff ff64 	bl	8006cb0 <LL_ADC_IsInternalRegulatorEnabled>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10d      	bne.n	8006e0a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df2:	f043 0210 	orr.w	r2, r3, #16
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfe:	f043 0201 	orr.w	r2, r3, #1
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff ff75 	bl	8006cfe <LL_ADC_REG_IsConversionOngoing>
 8006e14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1a:	f003 0310 	and.w	r3, r3, #16
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 80c4 	bne.w	8006fac <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 80c0 	bne.w	8006fac <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e30:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006e34:	f043 0202 	orr.w	r2, r3, #2
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff49 	bl	8006cd8 <LL_ADC_IsEnabled>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d110      	bne.n	8006e6e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e4c:	4860      	ldr	r0, [pc, #384]	@ (8006fd0 <HAL_ADC_Init+0x284>)
 8006e4e:	f7ff ff43 	bl	8006cd8 <LL_ADC_IsEnabled>
 8006e52:	4604      	mov	r4, r0
 8006e54:	485f      	ldr	r0, [pc, #380]	@ (8006fd4 <HAL_ADC_Init+0x288>)
 8006e56:	f7ff ff3f 	bl	8006cd8 <LL_ADC_IsEnabled>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4323      	orrs	r3, r4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d105      	bne.n	8006e6e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	4619      	mov	r1, r3
 8006e68:	485b      	ldr	r0, [pc, #364]	@ (8006fd8 <HAL_ADC_Init+0x28c>)
 8006e6a:	f7ff fd8d 	bl	8006988 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7e5b      	ldrb	r3, [r3, #25]
 8006e72:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e78:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006e7e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006e84:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e8c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d106      	bne.n	8006eaa <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	045b      	lsls	r3, r3, #17
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d009      	beq.n	8006ec6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb6:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	4b43      	ldr	r3, [pc, #268]	@ (8006fdc <HAL_ADC_Init+0x290>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6812      	ldr	r2, [r2, #0]
 8006ed4:	69b9      	ldr	r1, [r7, #24]
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff ff20 	bl	8006d24 <LL_ADC_INJ_IsConversionOngoing>
 8006ee4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d13d      	bne.n	8006f68 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d13a      	bne.n	8006f68 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006ef6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006efe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f00:	4313      	orrs	r3, r2
 8006f02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f0e:	f023 0302 	bic.w	r3, r3, #2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6812      	ldr	r2, [r2, #0]
 8006f16:	69b9      	ldr	r1, [r7, #24]
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d118      	bne.n	8006f58 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006f30:	f023 0304 	bic.w	r3, r3, #4
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006f3c:	4311      	orrs	r1, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006f42:	4311      	orrs	r1, r2
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0201 	orr.w	r2, r2, #1
 8006f54:	611a      	str	r2, [r3, #16]
 8006f56:	e007      	b.n	8006f68 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d10c      	bne.n	8006f8a <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f76:	f023 010f 	bic.w	r1, r3, #15
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	1e5a      	subs	r2, r3, #1
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f88:	e007      	b.n	8006f9a <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 020f 	bic.w	r2, r2, #15
 8006f98:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	f043 0201 	orr.w	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	655a      	str	r2, [r3, #84]	@ 0x54
 8006faa:	e007      	b.n	8006fbc <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb0:	f043 0210 	orr.w	r2, r3, #16
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3724      	adds	r7, #36	@ 0x24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd90      	pop	{r4, r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000000 	.word	0x20000000
 8006fcc:	053e2d63 	.word	0x053e2d63
 8006fd0:	50040000 	.word	0x50040000
 8006fd4:	50040100 	.word	0x50040100
 8006fd8:	50040300 	.word	0x50040300
 8006fdc:	fff0c007 	.word	0xfff0c007

08006fe0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	@ 0x28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006fe8:	2300      	movs	r3, #0
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ffc:	4882      	ldr	r0, [pc, #520]	@ (8007208 <HAL_ADC_IRQHandler+0x228>)
 8006ffe:	f7ff fe01 	bl	8006c04 <LL_ADC_GetMultimode>
 8007002:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d017      	beq.n	800703e <HAL_ADC_IRQHandler+0x5e>
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d012      	beq.n	800703e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007028:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fe4d 	bl	8007cd0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2202      	movs	r2, #2
 800703c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <HAL_ADC_IRQHandler+0x72>
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8083 	beq.w	8007164 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d07d      	beq.n	8007164 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	2b00      	cmp	r3, #0
 8007072:	d105      	bne.n	8007080 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007078:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fd1b 	bl	8006ac0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d062      	beq.n	8007156 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a5d      	ldr	r2, [pc, #372]	@ (800720c <HAL_ADC_IRQHandler+0x22c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d002      	beq.n	80070a0 <HAL_ADC_IRQHandler+0xc0>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	e000      	b.n	80070a2 <HAL_ADC_IRQHandler+0xc2>
 80070a0:	4b5b      	ldr	r3, [pc, #364]	@ (8007210 <HAL_ADC_IRQHandler+0x230>)
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6812      	ldr	r2, [r2, #0]
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d008      	beq.n	80070bc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b05      	cmp	r3, #5
 80070b4:	d002      	beq.n	80070bc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b09      	cmp	r3, #9
 80070ba:	d104      	bne.n	80070c6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	623b      	str	r3, [r7, #32]
 80070c4:	e00c      	b.n	80070e0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a50      	ldr	r2, [pc, #320]	@ (800720c <HAL_ADC_IRQHandler+0x22c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d002      	beq.n	80070d6 <HAL_ADC_IRQHandler+0xf6>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	e000      	b.n	80070d8 <HAL_ADC_IRQHandler+0xf8>
 80070d6:	4b4e      	ldr	r3, [pc, #312]	@ (8007210 <HAL_ADC_IRQHandler+0x230>)
 80070d8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d135      	bne.n	8007156 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d12e      	bne.n	8007156 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7ff fdfe 	bl	8006cfe <LL_ADC_REG_IsConversionOngoing>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11a      	bne.n	800713e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 020c 	bic.w	r2, r2, #12
 8007116:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800711c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d112      	bne.n	8007156 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007134:	f043 0201 	orr.w	r2, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	655a      	str	r2, [r3, #84]	@ 0x54
 800713c:	e00b      	b.n	8007156 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007142:	f043 0210 	orr.w	r2, r3, #16
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714e:	f043 0201 	orr.w	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff f86a 	bl	8006230 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	220c      	movs	r2, #12
 8007162:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <HAL_ADC_IRQHandler+0x198>
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10b      	bne.n	8007190 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 809f 	beq.w	80072c2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 8099 	beq.w	80072c2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b00      	cmp	r3, #0
 800719a:	d105      	bne.n	80071a8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fcc6 	bl	8006b3e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80071b2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fc81 	bl	8006ac0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80071be:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a11      	ldr	r2, [pc, #68]	@ (800720c <HAL_ADC_IRQHandler+0x22c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d002      	beq.n	80071d0 <HAL_ADC_IRQHandler+0x1f0>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	e000      	b.n	80071d2 <HAL_ADC_IRQHandler+0x1f2>
 80071d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007210 <HAL_ADC_IRQHandler+0x230>)
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6812      	ldr	r2, [r2, #0]
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d008      	beq.n	80071ec <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2b06      	cmp	r3, #6
 80071e4:	d002      	beq.n	80071ec <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b07      	cmp	r3, #7
 80071ea:	d104      	bne.n	80071f6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	623b      	str	r3, [r7, #32]
 80071f4:	e013      	b.n	800721e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a04      	ldr	r2, [pc, #16]	@ (800720c <HAL_ADC_IRQHandler+0x22c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d009      	beq.n	8007214 <HAL_ADC_IRQHandler+0x234>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	e007      	b.n	8007216 <HAL_ADC_IRQHandler+0x236>
 8007206:	bf00      	nop
 8007208:	50040300 	.word	0x50040300
 800720c:	50040100 	.word	0x50040100
 8007210:	50040000 	.word	0x50040000
 8007214:	4b7d      	ldr	r3, [pc, #500]	@ (800740c <HAL_ADC_IRQHandler+0x42c>)
 8007216:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d047      	beq.n	80072b4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <HAL_ADC_IRQHandler+0x25e>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d03f      	beq.n	80072b4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800723a:	2b00      	cmp	r3, #0
 800723c:	d13a      	bne.n	80072b4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007248:	2b40      	cmp	r3, #64	@ 0x40
 800724a:	d133      	bne.n	80072b4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d12e      	bne.n	80072b4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff fd62 	bl	8006d24 <LL_ADC_INJ_IsConversionOngoing>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d11a      	bne.n	800729c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007274:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800727a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d112      	bne.n	80072b4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007292:	f043 0201 	orr.w	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	655a      	str	r2, [r3, #84]	@ 0x54
 800729a:	e00b      	b.n	80072b4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a0:	f043 0210 	orr.w	r2, r3, #16
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ac:	f043 0201 	orr.w	r2, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fce3 	bl	8007c80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2260      	movs	r2, #96	@ 0x60
 80072c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d011      	beq.n	80072f0 <HAL_ADC_IRQHandler+0x310>
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00c      	beq.n	80072f0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f896 	bl	8007414 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2280      	movs	r2, #128	@ 0x80
 80072ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d012      	beq.n	8007320 <HAL_ADC_IRQHandler+0x340>
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00d      	beq.n	8007320 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007308:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fcc9 	bl	8007ca8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800731e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007326:	2b00      	cmp	r3, #0
 8007328:	d012      	beq.n	8007350 <HAL_ADC_IRQHandler+0x370>
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00d      	beq.n	8007350 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007338:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fcbb 	bl	8007cbc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800734e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b00      	cmp	r3, #0
 8007358:	d036      	beq.n	80073c8 <HAL_ADC_IRQHandler+0x3e8>
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	d031      	beq.n	80073c8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007368:	2b00      	cmp	r3, #0
 800736a:	d102      	bne.n	8007372 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800736c:	2301      	movs	r3, #1
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007370:	e014      	b.n	800739c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d008      	beq.n	800738a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007378:	4825      	ldr	r0, [pc, #148]	@ (8007410 <HAL_ADC_IRQHandler+0x430>)
 800737a:	f7ff fc51 	bl	8006c20 <LL_ADC_GetMultiDMATransfer>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8007384:	2301      	movs	r3, #1
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
 8007388:	e008      	b.n	800739c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8007398:	2301      	movs	r3, #1
 800739a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d10e      	bne.n	80073c0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073b2:	f043 0202 	orr.w	r2, r3, #2
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f834 	bl	8007428 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2210      	movs	r2, #16
 80073c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d018      	beq.n	8007404 <HAL_ADC_IRQHandler+0x424>
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d013      	beq.n	8007404 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ec:	f043 0208 	orr.w	r2, r3, #8
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80073fc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fc48 	bl	8007c94 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007404:	bf00      	nop
 8007406:	3728      	adds	r7, #40	@ 0x28
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	50040000 	.word	0x50040000
 8007410:	50040300 	.word	0x50040300

08007414 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b0b6      	sub	sp, #216	@ 0xd8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800744c:	2300      	movs	r3, #0
 800744e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_ADC_ConfigChannel+0x22>
 800745a:	2302      	movs	r3, #2
 800745c:	e3d5      	b.n	8007c0a <HAL_ADC_ConfigChannel+0x7ce>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff fc47 	bl	8006cfe <LL_ADC_REG_IsConversionOngoing>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	f040 83ba 	bne.w	8007bec <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b05      	cmp	r3, #5
 8007486:	d824      	bhi.n	80074d2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	3b02      	subs	r3, #2
 800748e:	2b03      	cmp	r3, #3
 8007490:	d81b      	bhi.n	80074ca <HAL_ADC_ConfigChannel+0x8e>
 8007492:	a201      	add	r2, pc, #4	@ (adr r2, 8007498 <HAL_ADC_ConfigChannel+0x5c>)
 8007494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007498:	080074a9 	.word	0x080074a9
 800749c:	080074b1 	.word	0x080074b1
 80074a0:	080074b9 	.word	0x080074b9
 80074a4:	080074c1 	.word	0x080074c1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80074a8:	230c      	movs	r3, #12
 80074aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80074ae:	e010      	b.n	80074d2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80074b0:	2312      	movs	r3, #18
 80074b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80074b6:	e00c      	b.n	80074d2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80074b8:	2318      	movs	r3, #24
 80074ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80074be:	e008      	b.n	80074d2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80074c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80074c8:	e003      	b.n	80074d2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80074ca:	2306      	movs	r3, #6
 80074cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80074d0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80074e0:	f7ff fb01 	bl	8006ae6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff fc08 	bl	8006cfe <LL_ADC_REG_IsConversionOngoing>
 80074ee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff fc14 	bl	8006d24 <LL_ADC_INJ_IsConversionOngoing>
 80074fc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007504:	2b00      	cmp	r3, #0
 8007506:	f040 81bf 	bne.w	8007888 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800750a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800750e:	2b00      	cmp	r3, #0
 8007510:	f040 81ba 	bne.w	8007888 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800751c:	d10f      	bne.n	800753e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2200      	movs	r2, #0
 8007528:	4619      	mov	r1, r3
 800752a:	f7ff fb1b 	bl	8006b64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff faaf 	bl	8006a9a <LL_ADC_SetSamplingTimeCommonConfig>
 800753c:	e00e      	b.n	800755c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6819      	ldr	r1, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	461a      	mov	r2, r3
 800754c:	f7ff fb0a 	bl	8006b64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f7ff fa9f 	bl	8006a9a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695a      	ldr	r2, [r3, #20]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	08db      	lsrs	r3, r3, #3
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	fa02 f303 	lsl.w	r3, r2, r3
 8007572:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b04      	cmp	r3, #4
 800757c:	d00a      	beq.n	8007594 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6919      	ldr	r1, [r3, #16]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800758e:	f7ff fa2f 	bl	80069f0 <LL_ADC_SetOffset>
 8007592:	e179      	b.n	8007888 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2100      	movs	r1, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fa4c 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <HAL_ADC_ConfigChannel+0x184>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2100      	movs	r1, #0
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff fa41 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 80075b6:	4603      	mov	r3, r0
 80075b8:	0e9b      	lsrs	r3, r3, #26
 80075ba:	f003 021f 	and.w	r2, r3, #31
 80075be:	e01e      	b.n	80075fe <HAL_ADC_ConfigChannel+0x1c2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff fa36 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075d6:	fa93 f3a3 	rbit	r3, r3
 80075da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80075de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80075e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80075e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80075ee:	2320      	movs	r3, #32
 80075f0:	e004      	b.n	80075fc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80075f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075f6:	fab3 f383 	clz	r3, r3
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007606:	2b00      	cmp	r3, #0
 8007608:	d105      	bne.n	8007616 <HAL_ADC_ConfigChannel+0x1da>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	0e9b      	lsrs	r3, r3, #26
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	e018      	b.n	8007648 <HAL_ADC_ConfigChannel+0x20c>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800761e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007622:	fa93 f3a3 	rbit	r3, r3
 8007626:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800762a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800762e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8007632:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800763a:	2320      	movs	r3, #32
 800763c:	e004      	b.n	8007648 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800763e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007642:	fab3 f383 	clz	r3, r3
 8007646:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007648:	429a      	cmp	r2, r3
 800764a:	d106      	bne.n	800765a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2200      	movs	r2, #0
 8007652:	2100      	movs	r1, #0
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff fa05 	bl	8006a64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2101      	movs	r1, #1
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff f9e9 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 8007666:	4603      	mov	r3, r0
 8007668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <HAL_ADC_ConfigChannel+0x24a>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2101      	movs	r1, #1
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff f9de 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 800767c:	4603      	mov	r3, r0
 800767e:	0e9b      	lsrs	r3, r3, #26
 8007680:	f003 021f 	and.w	r2, r3, #31
 8007684:	e01e      	b.n	80076c4 <HAL_ADC_ConfigChannel+0x288>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2101      	movs	r1, #1
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff f9d3 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 8007692:	4603      	mov	r3, r0
 8007694:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007698:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800769c:	fa93 f3a3 	rbit	r3, r3
 80076a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80076a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80076ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80076b4:	2320      	movs	r3, #32
 80076b6:	e004      	b.n	80076c2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80076b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076bc:	fab3 f383 	clz	r3, r3
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d105      	bne.n	80076dc <HAL_ADC_ConfigChannel+0x2a0>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	0e9b      	lsrs	r3, r3, #26
 80076d6:	f003 031f 	and.w	r3, r3, #31
 80076da:	e018      	b.n	800770e <HAL_ADC_ConfigChannel+0x2d2>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076e8:	fa93 f3a3 	rbit	r3, r3
 80076ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80076f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80076f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8007700:	2320      	movs	r3, #32
 8007702:	e004      	b.n	800770e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8007704:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007708:	fab3 f383 	clz	r3, r3
 800770c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800770e:	429a      	cmp	r2, r3
 8007710:	d106      	bne.n	8007720 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2200      	movs	r2, #0
 8007718:	2101      	movs	r1, #1
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff f9a2 	bl	8006a64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2102      	movs	r1, #2
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff f986 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 800772c:	4603      	mov	r3, r0
 800772e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <HAL_ADC_ConfigChannel+0x310>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2102      	movs	r1, #2
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff f97b 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 8007742:	4603      	mov	r3, r0
 8007744:	0e9b      	lsrs	r3, r3, #26
 8007746:	f003 021f 	and.w	r2, r3, #31
 800774a:	e01e      	b.n	800778a <HAL_ADC_ConfigChannel+0x34e>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2102      	movs	r1, #2
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff f970 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 8007758:	4603      	mov	r3, r0
 800775a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800775e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007762:	fa93 f3a3 	rbit	r3, r3
 8007766:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800776a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800776e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8007772:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800777a:	2320      	movs	r3, #32
 800777c:	e004      	b.n	8007788 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800777e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007782:	fab3 f383 	clz	r3, r3
 8007786:	b2db      	uxtb	r3, r3
 8007788:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <HAL_ADC_ConfigChannel+0x366>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	0e9b      	lsrs	r3, r3, #26
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	e014      	b.n	80077cc <HAL_ADC_ConfigChannel+0x390>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077aa:	fa93 f3a3 	rbit	r3, r3
 80077ae:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80077b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80077b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80077be:	2320      	movs	r3, #32
 80077c0:	e004      	b.n	80077cc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80077c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077c6:	fab3 f383 	clz	r3, r3
 80077ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d106      	bne.n	80077de <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2200      	movs	r2, #0
 80077d6:	2102      	movs	r1, #2
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff f943 	bl	8006a64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2103      	movs	r1, #3
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff f927 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10a      	bne.n	800780a <HAL_ADC_ConfigChannel+0x3ce>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2103      	movs	r1, #3
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff f91c 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 8007800:	4603      	mov	r3, r0
 8007802:	0e9b      	lsrs	r3, r3, #26
 8007804:	f003 021f 	and.w	r2, r3, #31
 8007808:	e017      	b.n	800783a <HAL_ADC_ConfigChannel+0x3fe>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2103      	movs	r1, #3
 8007810:	4618      	mov	r0, r3
 8007812:	f7ff f911 	bl	8006a38 <LL_ADC_GetOffsetChannel>
 8007816:	4603      	mov	r3, r0
 8007818:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800781a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800781c:	fa93 f3a3 	rbit	r3, r3
 8007820:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007824:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8007826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800782c:	2320      	movs	r3, #32
 800782e:	e003      	b.n	8007838 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8007830:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007832:	fab3 f383 	clz	r3, r3
 8007836:	b2db      	uxtb	r3, r3
 8007838:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007842:	2b00      	cmp	r3, #0
 8007844:	d105      	bne.n	8007852 <HAL_ADC_ConfigChannel+0x416>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	0e9b      	lsrs	r3, r3, #26
 800784c:	f003 031f 	and.w	r3, r3, #31
 8007850:	e011      	b.n	8007876 <HAL_ADC_ConfigChannel+0x43a>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800785a:	fa93 f3a3 	rbit	r3, r3
 800785e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8007860:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007862:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8007864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800786a:	2320      	movs	r3, #32
 800786c:	e003      	b.n	8007876 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800786e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007870:	fab3 f383 	clz	r3, r3
 8007874:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007876:	429a      	cmp	r2, r3
 8007878:	d106      	bne.n	8007888 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2200      	movs	r2, #0
 8007880:	2103      	movs	r1, #3
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff f8ee 	bl	8006a64 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff fa23 	bl	8006cd8 <LL_ADC_IsEnabled>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	f040 813f 	bne.w	8007b18 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	6819      	ldr	r1, [r3, #0]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f7ff f988 	bl	8006bbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	4a8e      	ldr	r2, [pc, #568]	@ (8007aec <HAL_ADC_ConfigChannel+0x6b0>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	f040 8130 	bne.w	8007b18 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10b      	bne.n	80078e0 <HAL_ADC_ConfigChannel+0x4a4>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	0e9b      	lsrs	r3, r3, #26
 80078ce:	3301      	adds	r3, #1
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	bf94      	ite	ls
 80078d8:	2301      	movls	r3, #1
 80078da:	2300      	movhi	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	e019      	b.n	8007914 <HAL_ADC_ConfigChannel+0x4d8>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078e8:	fa93 f3a3 	rbit	r3, r3
 80078ec:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80078ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80078f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80078f8:	2320      	movs	r3, #32
 80078fa:	e003      	b.n	8007904 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80078fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078fe:	fab3 f383 	clz	r3, r3
 8007902:	b2db      	uxtb	r3, r3
 8007904:	3301      	adds	r3, #1
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	2b09      	cmp	r3, #9
 800790c:	bf94      	ite	ls
 800790e:	2301      	movls	r3, #1
 8007910:	2300      	movhi	r3, #0
 8007912:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007914:	2b00      	cmp	r3, #0
 8007916:	d079      	beq.n	8007a0c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007920:	2b00      	cmp	r3, #0
 8007922:	d107      	bne.n	8007934 <HAL_ADC_ConfigChannel+0x4f8>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	0e9b      	lsrs	r3, r3, #26
 800792a:	3301      	adds	r3, #1
 800792c:	069b      	lsls	r3, r3, #26
 800792e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007932:	e015      	b.n	8007960 <HAL_ADC_ConfigChannel+0x524>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800793a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800793c:	fa93 f3a3 	rbit	r3, r3
 8007940:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8007942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007944:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8007946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800794c:	2320      	movs	r3, #32
 800794e:	e003      	b.n	8007958 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8007950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007952:	fab3 f383 	clz	r3, r3
 8007956:	b2db      	uxtb	r3, r3
 8007958:	3301      	adds	r3, #1
 800795a:	069b      	lsls	r3, r3, #26
 800795c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <HAL_ADC_ConfigChannel+0x544>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	0e9b      	lsrs	r3, r3, #26
 8007972:	3301      	adds	r3, #1
 8007974:	f003 031f 	and.w	r3, r3, #31
 8007978:	2101      	movs	r1, #1
 800797a:	fa01 f303 	lsl.w	r3, r1, r3
 800797e:	e017      	b.n	80079b0 <HAL_ADC_ConfigChannel+0x574>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007988:	fa93 f3a3 	rbit	r3, r3
 800798c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800798e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007990:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8007992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8007998:	2320      	movs	r3, #32
 800799a:	e003      	b.n	80079a4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800799c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800799e:	fab3 f383 	clz	r3, r3
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	3301      	adds	r3, #1
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	2101      	movs	r1, #1
 80079ac:	fa01 f303 	lsl.w	r3, r1, r3
 80079b0:	ea42 0103 	orr.w	r1, r2, r3
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <HAL_ADC_ConfigChannel+0x59a>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	0e9b      	lsrs	r3, r3, #26
 80079c6:	3301      	adds	r3, #1
 80079c8:	f003 021f 	and.w	r2, r3, #31
 80079cc:	4613      	mov	r3, r2
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	4413      	add	r3, r2
 80079d2:	051b      	lsls	r3, r3, #20
 80079d4:	e018      	b.n	8007a08 <HAL_ADC_ConfigChannel+0x5cc>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079de:	fa93 f3a3 	rbit	r3, r3
 80079e2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80079e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80079e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80079ee:	2320      	movs	r3, #32
 80079f0:	e003      	b.n	80079fa <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	fab3 f383 	clz	r3, r3
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	3301      	adds	r3, #1
 80079fc:	f003 021f 	and.w	r2, r3, #31
 8007a00:	4613      	mov	r3, r2
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	4413      	add	r3, r2
 8007a06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	e080      	b.n	8007b0e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d107      	bne.n	8007a28 <HAL_ADC_ConfigChannel+0x5ec>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	0e9b      	lsrs	r3, r3, #26
 8007a1e:	3301      	adds	r3, #1
 8007a20:	069b      	lsls	r3, r3, #26
 8007a22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007a26:	e015      	b.n	8007a54 <HAL_ADC_ConfigChannel+0x618>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a30:	fa93 f3a3 	rbit	r3, r3
 8007a34:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8007a40:	2320      	movs	r3, #32
 8007a42:	e003      	b.n	8007a4c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8007a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a46:	fab3 f383 	clz	r3, r3
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	069b      	lsls	r3, r3, #26
 8007a50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <HAL_ADC_ConfigChannel+0x638>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	0e9b      	lsrs	r3, r3, #26
 8007a66:	3301      	adds	r3, #1
 8007a68:	f003 031f 	and.w	r3, r3, #31
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a72:	e017      	b.n	8007aa4 <HAL_ADC_ConfigChannel+0x668>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	fa93 f3a3 	rbit	r3, r3
 8007a80:	61bb      	str	r3, [r7, #24]
  return result;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8007a8c:	2320      	movs	r3, #32
 8007a8e:	e003      	b.n	8007a98 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	fab3 f383 	clz	r3, r3
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	3301      	adds	r3, #1
 8007a9a:	f003 031f 	and.w	r3, r3, #31
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa4:	ea42 0103 	orr.w	r1, r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10d      	bne.n	8007ad0 <HAL_ADC_ConfigChannel+0x694>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	0e9b      	lsrs	r3, r3, #26
 8007aba:	3301      	adds	r3, #1
 8007abc:	f003 021f 	and.w	r2, r3, #31
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3b1e      	subs	r3, #30
 8007ac8:	051b      	lsls	r3, r3, #20
 8007aca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007ace:	e01d      	b.n	8007b0c <HAL_ADC_ConfigChannel+0x6d0>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	fa93 f3a3 	rbit	r3, r3
 8007adc:	60fb      	str	r3, [r7, #12]
  return result;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d103      	bne.n	8007af0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8007ae8:	2320      	movs	r3, #32
 8007aea:	e005      	b.n	8007af8 <HAL_ADC_ConfigChannel+0x6bc>
 8007aec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	fab3 f383 	clz	r3, r3
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	3301      	adds	r3, #1
 8007afa:	f003 021f 	and.w	r2, r3, #31
 8007afe:	4613      	mov	r3, r2
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	4413      	add	r3, r2
 8007b04:	3b1e      	subs	r3, #30
 8007b06:	051b      	lsls	r3, r3, #20
 8007b08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b0c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b12:	4619      	mov	r1, r3
 8007b14:	f7ff f826 	bl	8006b64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	4b3d      	ldr	r3, [pc, #244]	@ (8007c14 <HAL_ADC_ConfigChannel+0x7d8>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d06c      	beq.n	8007bfe <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007b24:	483c      	ldr	r0, [pc, #240]	@ (8007c18 <HAL_ADC_ConfigChannel+0x7dc>)
 8007b26:	f7fe ff55 	bl	80069d4 <LL_ADC_GetCommonPathInternalCh>
 8007b2a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a3a      	ldr	r2, [pc, #232]	@ (8007c1c <HAL_ADC_ConfigChannel+0x7e0>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d127      	bne.n	8007b88 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d121      	bne.n	8007b88 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a35      	ldr	r2, [pc, #212]	@ (8007c20 <HAL_ADC_ConfigChannel+0x7e4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d157      	bne.n	8007bfe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b56:	4619      	mov	r1, r3
 8007b58:	482f      	ldr	r0, [pc, #188]	@ (8007c18 <HAL_ADC_ConfigChannel+0x7dc>)
 8007b5a:	f7fe ff28 	bl	80069ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007b5e:	4b31      	ldr	r3, [pc, #196]	@ (8007c24 <HAL_ADC_ConfigChannel+0x7e8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	099b      	lsrs	r3, r3, #6
 8007b64:	4a30      	ldr	r2, [pc, #192]	@ (8007c28 <HAL_ADC_ConfigChannel+0x7ec>)
 8007b66:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6a:	099b      	lsrs	r3, r3, #6
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	4613      	mov	r3, r2
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007b78:	e002      	b.n	8007b80 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1f9      	bne.n	8007b7a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007b86:	e03a      	b.n	8007bfe <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a27      	ldr	r2, [pc, #156]	@ (8007c2c <HAL_ADC_ConfigChannel+0x7f0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d113      	bne.n	8007bba <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10d      	bne.n	8007bba <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8007c20 <HAL_ADC_ConfigChannel+0x7e4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d12a      	bne.n	8007bfe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007bac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4819      	ldr	r0, [pc, #100]	@ (8007c18 <HAL_ADC_ConfigChannel+0x7dc>)
 8007bb4:	f7fe fefb 	bl	80069ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007bb8:	e021      	b.n	8007bfe <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8007c30 <HAL_ADC_ConfigChannel+0x7f4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d11c      	bne.n	8007bfe <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007bc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007bc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d116      	bne.n	8007bfe <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a12      	ldr	r2, [pc, #72]	@ (8007c20 <HAL_ADC_ConfigChannel+0x7e4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d111      	bne.n	8007bfe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007bda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007bde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007be2:	4619      	mov	r1, r3
 8007be4:	480c      	ldr	r0, [pc, #48]	@ (8007c18 <HAL_ADC_ConfigChannel+0x7dc>)
 8007be6:	f7fe fee2 	bl	80069ae <LL_ADC_SetCommonPathInternalCh>
 8007bea:	e008      	b.n	8007bfe <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf0:	f043 0220 	orr.w	r2, r3, #32
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8007c06:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	37d8      	adds	r7, #216	@ 0xd8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	80080000 	.word	0x80080000
 8007c18:	50040300 	.word	0x50040300
 8007c1c:	c7520000 	.word	0xc7520000
 8007c20:	50040000 	.word	0x50040000
 8007c24:	20000000 	.word	0x20000000
 8007c28:	053e2d63 	.word	0x053e2d63
 8007c2c:	cb840000 	.word	0xcb840000
 8007c30:	80000001 	.word	0x80000001

08007c34 <LL_ADC_IsEnabled>:
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <LL_ADC_IsEnabled+0x18>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e000      	b.n	8007c4e <LL_ADC_IsEnabled+0x1a>
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <LL_ADC_REG_IsConversionOngoing>:
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d101      	bne.n	8007c72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007ce4:	b590      	push	{r4, r7, lr}
 8007ce6:	b09f      	sub	sp, #124	@ 0x7c
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d101      	bne.n	8007d02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e089      	b.n	8007e16 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007d0e:	2300      	movs	r3, #0
 8007d10:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a42      	ldr	r2, [pc, #264]	@ (8007e20 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d102      	bne.n	8007d22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007d1c:	4b41      	ldr	r3, [pc, #260]	@ (8007e24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007d1e:	60bb      	str	r3, [r7, #8]
 8007d20:	e001      	b.n	8007d26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007d22:	2300      	movs	r3, #0
 8007d24:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10b      	bne.n	8007d44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d30:	f043 0220 	orr.w	r2, r3, #32
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e068      	b.n	8007e16 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff ff87 	bl	8007c5a <LL_ADC_REG_IsConversionOngoing>
 8007d4c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff ff81 	bl	8007c5a <LL_ADC_REG_IsConversionOngoing>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d14a      	bne.n	8007df4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007d5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d147      	bne.n	8007df4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007d64:	4b30      	ldr	r3, [pc, #192]	@ (8007e28 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8007d66:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d027      	beq.n	8007dc0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	6859      	ldr	r1, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d82:	035b      	lsls	r3, r3, #13
 8007d84:	430b      	orrs	r3, r1
 8007d86:	431a      	orrs	r2, r3
 8007d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007d8c:	4824      	ldr	r0, [pc, #144]	@ (8007e20 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8007d8e:	f7ff ff51 	bl	8007c34 <LL_ADC_IsEnabled>
 8007d92:	4604      	mov	r4, r0
 8007d94:	4823      	ldr	r0, [pc, #140]	@ (8007e24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007d96:	f7ff ff4d 	bl	8007c34 <LL_ADC_IsEnabled>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	4323      	orrs	r3, r4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d132      	bne.n	8007e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007daa:	f023 030f 	bic.w	r3, r3, #15
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	6811      	ldr	r1, [r2, #0]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	6892      	ldr	r2, [r2, #8]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	431a      	orrs	r2, r3
 8007dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dbc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007dbe:	e023      	b.n	8007e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007dcc:	4814      	ldr	r0, [pc, #80]	@ (8007e20 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8007dce:	f7ff ff31 	bl	8007c34 <LL_ADC_IsEnabled>
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4813      	ldr	r0, [pc, #76]	@ (8007e24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007dd6:	f7ff ff2d 	bl	8007c34 <LL_ADC_IsEnabled>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4323      	orrs	r3, r4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d112      	bne.n	8007e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007dea:	f023 030f 	bic.w	r3, r3, #15
 8007dee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007df0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007df2:	e009      	b.n	8007e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df8:	f043 0220 	orr.w	r2, r3, #32
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8007e06:	e000      	b.n	8007e0a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007e08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8007e12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	377c      	adds	r7, #124	@ 0x7c
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd90      	pop	{r4, r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	50040000 	.word	0x50040000
 8007e24:	50040100 	.word	0x50040100
 8007e28:	50040300 	.word	0x50040300

08007e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e70 <__NVIC_SetPriorityGrouping+0x44>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007e48:	4013      	ands	r3, r2
 8007e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e5e:	4a04      	ldr	r2, [pc, #16]	@ (8007e70 <__NVIC_SetPriorityGrouping+0x44>)
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	60d3      	str	r3, [r2, #12]
}
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	e000ed00 	.word	0xe000ed00

08007e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e78:	4b04      	ldr	r3, [pc, #16]	@ (8007e8c <__NVIC_GetPriorityGrouping+0x18>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	f003 0307 	and.w	r3, r3, #7
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	db0b      	blt.n	8007eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	f003 021f 	and.w	r2, r3, #31
 8007ea8:	4907      	ldr	r1, [pc, #28]	@ (8007ec8 <__NVIC_EnableIRQ+0x38>)
 8007eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eae:	095b      	lsrs	r3, r3, #5
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8007eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	e000e100 	.word	0xe000e100

08007ecc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	db12      	blt.n	8007f04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	f003 021f 	and.w	r2, r3, #31
 8007ee4:	490a      	ldr	r1, [pc, #40]	@ (8007f10 <__NVIC_DisableIRQ+0x44>)
 8007ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	2001      	movs	r0, #1
 8007eee:	fa00 f202 	lsl.w	r2, r0, r2
 8007ef2:	3320      	adds	r3, #32
 8007ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007ef8:	f3bf 8f4f 	dsb	sy
}
 8007efc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007efe:	f3bf 8f6f 	isb	sy
}
 8007f02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	e000e100 	.word	0xe000e100

08007f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	db0a      	blt.n	8007f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	490c      	ldr	r1, [pc, #48]	@ (8007f60 <__NVIC_SetPriority+0x4c>)
 8007f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f32:	0112      	lsls	r2, r2, #4
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	440b      	add	r3, r1
 8007f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f3c:	e00a      	b.n	8007f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	4908      	ldr	r1, [pc, #32]	@ (8007f64 <__NVIC_SetPriority+0x50>)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	3b04      	subs	r3, #4
 8007f4c:	0112      	lsls	r2, r2, #4
 8007f4e:	b2d2      	uxtb	r2, r2
 8007f50:	440b      	add	r3, r1
 8007f52:	761a      	strb	r2, [r3, #24]
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	e000e100 	.word	0xe000e100
 8007f64:	e000ed00 	.word	0xe000ed00

08007f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b089      	sub	sp, #36	@ 0x24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	f1c3 0307 	rsb	r3, r3, #7
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	bf28      	it	cs
 8007f86:	2304      	movcs	r3, #4
 8007f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	2b06      	cmp	r3, #6
 8007f90:	d902      	bls.n	8007f98 <NVIC_EncodePriority+0x30>
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	3b03      	subs	r3, #3
 8007f96:	e000      	b.n	8007f9a <NVIC_EncodePriority+0x32>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa6:	43da      	mvns	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	401a      	ands	r2, r3
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fba:	43d9      	mvns	r1, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fc0:	4313      	orrs	r3, r2
         );
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3724      	adds	r7, #36	@ 0x24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
	...

08007fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fe0:	d301      	bcc.n	8007fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e00f      	b.n	8008006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8008010 <SysTick_Config+0x40>)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fee:	210f      	movs	r1, #15
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	f7ff ff8e 	bl	8007f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ff8:	4b05      	ldr	r3, [pc, #20]	@ (8008010 <SysTick_Config+0x40>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ffe:	4b04      	ldr	r3, [pc, #16]	@ (8008010 <SysTick_Config+0x40>)
 8008000:	2207      	movs	r2, #7
 8008002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	e000e010 	.word	0xe000e010

08008014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff ff05 	bl	8007e2c <__NVIC_SetPriorityGrouping>
}
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b086      	sub	sp, #24
 800802e:	af00      	add	r7, sp, #0
 8008030:	4603      	mov	r3, r0
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	607a      	str	r2, [r7, #4]
 8008036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800803c:	f7ff ff1a 	bl	8007e74 <__NVIC_GetPriorityGrouping>
 8008040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	68b9      	ldr	r1, [r7, #8]
 8008046:	6978      	ldr	r0, [r7, #20]
 8008048:	f7ff ff8e 	bl	8007f68 <NVIC_EncodePriority>
 800804c:	4602      	mov	r2, r0
 800804e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008052:	4611      	mov	r1, r2
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff ff5d 	bl	8007f14 <__NVIC_SetPriority>
}
 800805a:	bf00      	nop
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	4603      	mov	r3, r0
 800806a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800806c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008070:	4618      	mov	r0, r3
 8008072:	f7ff ff0d 	bl	8007e90 <__NVIC_EnableIRQ>
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	4603      	mov	r3, r0
 8008086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff ff1d 	bl	8007ecc <__NVIC_DisableIRQ>
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff ff94 	bl	8007fd0 <SysTick_Config>
 80080a8:	4603      	mov	r3, r0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e098      	b.n	80081f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	4b4d      	ldr	r3, [pc, #308]	@ (8008204 <HAL_DMA_Init+0x150>)
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d80f      	bhi.n	80080f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	4b4b      	ldr	r3, [pc, #300]	@ (8008208 <HAL_DMA_Init+0x154>)
 80080da:	4413      	add	r3, r2
 80080dc:	4a4b      	ldr	r2, [pc, #300]	@ (800820c <HAL_DMA_Init+0x158>)
 80080de:	fba2 2303 	umull	r2, r3, r2, r3
 80080e2:	091b      	lsrs	r3, r3, #4
 80080e4:	009a      	lsls	r2, r3, #2
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a48      	ldr	r2, [pc, #288]	@ (8008210 <HAL_DMA_Init+0x15c>)
 80080ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80080f0:	e00e      	b.n	8008110 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	4b46      	ldr	r3, [pc, #280]	@ (8008214 <HAL_DMA_Init+0x160>)
 80080fa:	4413      	add	r3, r2
 80080fc:	4a43      	ldr	r2, [pc, #268]	@ (800820c <HAL_DMA_Init+0x158>)
 80080fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008102:	091b      	lsrs	r3, r3, #4
 8008104:	009a      	lsls	r2, r3, #2
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a42      	ldr	r2, [pc, #264]	@ (8008218 <HAL_DMA_Init+0x164>)
 800810e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800812a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800814c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800816a:	d039      	beq.n	80081e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008170:	4a27      	ldr	r2, [pc, #156]	@ (8008210 <HAL_DMA_Init+0x15c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d11a      	bne.n	80081ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008176:	4b29      	ldr	r3, [pc, #164]	@ (800821c <HAL_DMA_Init+0x168>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800817e:	f003 031c 	and.w	r3, r3, #28
 8008182:	210f      	movs	r1, #15
 8008184:	fa01 f303 	lsl.w	r3, r1, r3
 8008188:	43db      	mvns	r3, r3
 800818a:	4924      	ldr	r1, [pc, #144]	@ (800821c <HAL_DMA_Init+0x168>)
 800818c:	4013      	ands	r3, r2
 800818e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008190:	4b22      	ldr	r3, [pc, #136]	@ (800821c <HAL_DMA_Init+0x168>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6859      	ldr	r1, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800819c:	f003 031c 	and.w	r3, r3, #28
 80081a0:	fa01 f303 	lsl.w	r3, r1, r3
 80081a4:	491d      	ldr	r1, [pc, #116]	@ (800821c <HAL_DMA_Init+0x168>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	600b      	str	r3, [r1, #0]
 80081aa:	e019      	b.n	80081e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80081ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008220 <HAL_DMA_Init+0x16c>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b4:	f003 031c 	and.w	r3, r3, #28
 80081b8:	210f      	movs	r1, #15
 80081ba:	fa01 f303 	lsl.w	r3, r1, r3
 80081be:	43db      	mvns	r3, r3
 80081c0:	4917      	ldr	r1, [pc, #92]	@ (8008220 <HAL_DMA_Init+0x16c>)
 80081c2:	4013      	ands	r3, r2
 80081c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80081c6:	4b16      	ldr	r3, [pc, #88]	@ (8008220 <HAL_DMA_Init+0x16c>)
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6859      	ldr	r1, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d2:	f003 031c 	and.w	r3, r3, #28
 80081d6:	fa01 f303 	lsl.w	r3, r1, r3
 80081da:	4911      	ldr	r1, [pc, #68]	@ (8008220 <HAL_DMA_Init+0x16c>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	40020407 	.word	0x40020407
 8008208:	bffdfff8 	.word	0xbffdfff8
 800820c:	cccccccd 	.word	0xcccccccd
 8008210:	40020000 	.word	0x40020000
 8008214:	bffdfbf8 	.word	0xbffdfbf8
 8008218:	40020400 	.word	0x40020400
 800821c:	400200a8 	.word	0x400200a8
 8008220:	400204a8 	.word	0x400204a8

08008224 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800823c:	2b01      	cmp	r3, #1
 800823e:	d101      	bne.n	8008244 <HAL_DMA_Start_IT+0x20>
 8008240:	2302      	movs	r3, #2
 8008242:	e04b      	b.n	80082dc <HAL_DMA_Start_IT+0xb8>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b01      	cmp	r3, #1
 8008256:	d13a      	bne.n	80082ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0201 	bic.w	r2, r2, #1
 8008274:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	68b9      	ldr	r1, [r7, #8]
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 f96b 	bl	8008558 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008286:	2b00      	cmp	r3, #0
 8008288:	d008      	beq.n	800829c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f042 020e 	orr.w	r2, r2, #14
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	e00f      	b.n	80082bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0204 	bic.w	r2, r2, #4
 80082aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 020a 	orr.w	r2, r2, #10
 80082ba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f042 0201 	orr.w	r2, r2, #1
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	e005      	b.n	80082da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80082d6:	2302      	movs	r3, #2
 80082d8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d008      	beq.n	800830e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2204      	movs	r2, #4
 8008300:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e022      	b.n	8008354 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 020e 	bic.w	r2, r2, #14
 800831c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 0201 	bic.w	r2, r2, #1
 800832c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008332:	f003 021c 	and.w	r2, r3, #28
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833a:	2101      	movs	r1, #1
 800833c:	fa01 f202 	lsl.w	r2, r1, r2
 8008340:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d005      	beq.n	8008384 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2204      	movs	r2, #4
 800837c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	73fb      	strb	r3, [r7, #15]
 8008382:	e029      	b.n	80083d8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 020e 	bic.w	r2, r2, #14
 8008392:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0201 	bic.w	r2, r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a8:	f003 021c 	and.w	r2, r3, #28
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b0:	2101      	movs	r1, #1
 80083b2:	fa01 f202 	lsl.w	r2, r1, r2
 80083b6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	4798      	blx	r3
    }
  }
  return status;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083fe:	f003 031c 	and.w	r3, r3, #28
 8008402:	2204      	movs	r2, #4
 8008404:	409a      	lsls	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4013      	ands	r3, r2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d026      	beq.n	800845c <HAL_DMA_IRQHandler+0x7a>
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d021      	beq.n	800845c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d107      	bne.n	8008436 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0204 	bic.w	r2, r2, #4
 8008434:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800843a:	f003 021c 	and.w	r2, r3, #28
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008442:	2104      	movs	r1, #4
 8008444:	fa01 f202 	lsl.w	r2, r1, r2
 8008448:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844e:	2b00      	cmp	r3, #0
 8008450:	d071      	beq.n	8008536 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800845a:	e06c      	b.n	8008536 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008460:	f003 031c 	and.w	r3, r3, #28
 8008464:	2202      	movs	r2, #2
 8008466:	409a      	lsls	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d02e      	beq.n	80084ce <HAL_DMA_IRQHandler+0xec>
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d029      	beq.n	80084ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10b      	bne.n	80084a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 020a 	bic.w	r2, r2, #10
 8008496:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a4:	f003 021c 	and.w	r2, r3, #28
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ac:	2102      	movs	r1, #2
 80084ae:	fa01 f202 	lsl.w	r2, r1, r2
 80084b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d038      	beq.n	8008536 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80084cc:	e033      	b.n	8008536 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d2:	f003 031c 	and.w	r3, r3, #28
 80084d6:	2208      	movs	r2, #8
 80084d8:	409a      	lsls	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4013      	ands	r3, r2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d02a      	beq.n	8008538 <HAL_DMA_IRQHandler+0x156>
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f003 0308 	and.w	r3, r3, #8
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d025      	beq.n	8008538 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f022 020e 	bic.w	r2, r2, #14
 80084fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008500:	f003 021c 	and.w	r2, r3, #28
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008508:	2101      	movs	r1, #1
 800850a:	fa01 f202 	lsl.w	r2, r1, r2
 800850e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800852a:	2b00      	cmp	r3, #0
 800852c:	d004      	beq.n	8008538 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008536:	bf00      	nop
 8008538:	bf00      	nop
}
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856a:	f003 021c 	and.w	r2, r3, #28
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008572:	2101      	movs	r1, #1
 8008574:	fa01 f202 	lsl.w	r2, r1, r2
 8008578:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	2b10      	cmp	r3, #16
 8008588:	d108      	bne.n	800859c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800859a:	e007      	b.n	80085ac <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	60da      	str	r2, [r3, #12]
}
 80085ac:	bf00      	nop
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80085c2:	2300      	movs	r3, #0
 80085c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085c6:	e14e      	b.n	8008866 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	2101      	movs	r1, #1
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	fa01 f303 	lsl.w	r3, r1, r3
 80085d4:	4013      	ands	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 8140 	beq.w	8008860 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d005      	beq.n	80085f8 <HAL_GPIO_Init+0x40>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f003 0303 	and.w	r3, r3, #3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d130      	bne.n	800865a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	2203      	movs	r2, #3
 8008604:	fa02 f303 	lsl.w	r3, r2, r3
 8008608:	43db      	mvns	r3, r3
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	4013      	ands	r3, r2
 800860e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	fa02 f303 	lsl.w	r3, r2, r3
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800862e:	2201      	movs	r2, #1
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	fa02 f303 	lsl.w	r3, r2, r3
 8008636:	43db      	mvns	r3, r3
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	4013      	ands	r3, r2
 800863c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	091b      	lsrs	r3, r3, #4
 8008644:	f003 0201 	and.w	r2, r3, #1
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	2b03      	cmp	r3, #3
 8008664:	d017      	beq.n	8008696 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	2203      	movs	r2, #3
 8008672:	fa02 f303 	lsl.w	r3, r2, r3
 8008676:	43db      	mvns	r3, r3
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	4013      	ands	r3, r2
 800867c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	fa02 f303 	lsl.w	r3, r2, r3
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4313      	orrs	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d123      	bne.n	80086ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	08da      	lsrs	r2, r3, #3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	3208      	adds	r2, #8
 80086aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	220f      	movs	r2, #15
 80086ba:	fa02 f303 	lsl.w	r3, r2, r3
 80086be:	43db      	mvns	r3, r3
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4013      	ands	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	691a      	ldr	r2, [r3, #16]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	fa02 f303 	lsl.w	r3, r2, r3
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	4313      	orrs	r3, r2
 80086da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	08da      	lsrs	r2, r3, #3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3208      	adds	r2, #8
 80086e4:	6939      	ldr	r1, [r7, #16]
 80086e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	2203      	movs	r2, #3
 80086f6:	fa02 f303 	lsl.w	r3, r2, r3
 80086fa:	43db      	mvns	r3, r3
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	4013      	ands	r3, r2
 8008700:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f003 0203 	and.w	r2, r3, #3
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	4313      	orrs	r3, r2
 8008716:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 809a 	beq.w	8008860 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800872c:	4b55      	ldr	r3, [pc, #340]	@ (8008884 <HAL_GPIO_Init+0x2cc>)
 800872e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008730:	4a54      	ldr	r2, [pc, #336]	@ (8008884 <HAL_GPIO_Init+0x2cc>)
 8008732:	f043 0301 	orr.w	r3, r3, #1
 8008736:	6613      	str	r3, [r2, #96]	@ 0x60
 8008738:	4b52      	ldr	r3, [pc, #328]	@ (8008884 <HAL_GPIO_Init+0x2cc>)
 800873a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	60bb      	str	r3, [r7, #8]
 8008742:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008744:	4a50      	ldr	r2, [pc, #320]	@ (8008888 <HAL_GPIO_Init+0x2d0>)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	089b      	lsrs	r3, r3, #2
 800874a:	3302      	adds	r3, #2
 800874c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008750:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	220f      	movs	r2, #15
 800875c:	fa02 f303 	lsl.w	r3, r2, r3
 8008760:	43db      	mvns	r3, r3
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	4013      	ands	r3, r2
 8008766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800876e:	d013      	beq.n	8008798 <HAL_GPIO_Init+0x1e0>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a46      	ldr	r2, [pc, #280]	@ (800888c <HAL_GPIO_Init+0x2d4>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d00d      	beq.n	8008794 <HAL_GPIO_Init+0x1dc>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a45      	ldr	r2, [pc, #276]	@ (8008890 <HAL_GPIO_Init+0x2d8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d007      	beq.n	8008790 <HAL_GPIO_Init+0x1d8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a44      	ldr	r2, [pc, #272]	@ (8008894 <HAL_GPIO_Init+0x2dc>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d101      	bne.n	800878c <HAL_GPIO_Init+0x1d4>
 8008788:	2303      	movs	r3, #3
 800878a:	e006      	b.n	800879a <HAL_GPIO_Init+0x1e2>
 800878c:	2307      	movs	r3, #7
 800878e:	e004      	b.n	800879a <HAL_GPIO_Init+0x1e2>
 8008790:	2302      	movs	r3, #2
 8008792:	e002      	b.n	800879a <HAL_GPIO_Init+0x1e2>
 8008794:	2301      	movs	r3, #1
 8008796:	e000      	b.n	800879a <HAL_GPIO_Init+0x1e2>
 8008798:	2300      	movs	r3, #0
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	f002 0203 	and.w	r2, r2, #3
 80087a0:	0092      	lsls	r2, r2, #2
 80087a2:	4093      	lsls	r3, r2
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80087aa:	4937      	ldr	r1, [pc, #220]	@ (8008888 <HAL_GPIO_Init+0x2d0>)
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	089b      	lsrs	r3, r3, #2
 80087b0:	3302      	adds	r3, #2
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087b8:	4b37      	ldr	r3, [pc, #220]	@ (8008898 <HAL_GPIO_Init+0x2e0>)
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	43db      	mvns	r3, r3
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	4013      	ands	r3, r2
 80087c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4313      	orrs	r3, r2
 80087da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80087dc:	4a2e      	ldr	r2, [pc, #184]	@ (8008898 <HAL_GPIO_Init+0x2e0>)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80087e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008898 <HAL_GPIO_Init+0x2e0>)
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	43db      	mvns	r3, r3
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	4013      	ands	r3, r2
 80087f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008806:	4a24      	ldr	r2, [pc, #144]	@ (8008898 <HAL_GPIO_Init+0x2e0>)
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800880c:	4b22      	ldr	r3, [pc, #136]	@ (8008898 <HAL_GPIO_Init+0x2e0>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	43db      	mvns	r3, r3
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4013      	ands	r3, r2
 800881a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4313      	orrs	r3, r2
 800882e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008830:	4a19      	ldr	r2, [pc, #100]	@ (8008898 <HAL_GPIO_Init+0x2e0>)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008836:	4b18      	ldr	r3, [pc, #96]	@ (8008898 <HAL_GPIO_Init+0x2e0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	43db      	mvns	r3, r3
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4013      	ands	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800885a:	4a0f      	ldr	r2, [pc, #60]	@ (8008898 <HAL_GPIO_Init+0x2e0>)
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	3301      	adds	r3, #1
 8008864:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	f47f aea9 	bne.w	80085c8 <HAL_GPIO_Init+0x10>
  }
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	371c      	adds	r7, #28
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	40021000 	.word	0x40021000
 8008888:	40010000 	.word	0x40010000
 800888c:	48000400 	.word	0x48000400
 8008890:	48000800 	.word	0x48000800
 8008894:	48000c00 	.word	0x48000c00
 8008898:	40010400 	.word	0x40010400

0800889c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	807b      	strh	r3, [r7, #2]
 80088a8:	4613      	mov	r3, r2
 80088aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088ac:	787b      	ldrb	r3, [r7, #1]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80088b2:	887a      	ldrh	r2, [r7, #2]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80088b8:	e002      	b.n	80088c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80088ba:	887a      	ldrh	r2, [r7, #2]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80088d6:	4b08      	ldr	r3, [pc, #32]	@ (80088f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80088d8:	695a      	ldr	r2, [r3, #20]
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	4013      	ands	r3, r2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d006      	beq.n	80088f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80088e2:	4a05      	ldr	r2, [pc, #20]	@ (80088f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80088e4:	88fb      	ldrh	r3, [r7, #6]
 80088e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fd fc4c 	bl	8006188 <HAL_GPIO_EXTI_Callback>
  }
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	40010400 	.word	0x40010400

080088fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e08d      	b.n	8008a2a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d106      	bne.n	8008928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7fd fbd8 	bl	80060d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2224      	movs	r2, #36	@ 0x24
 800892c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0201 	bic.w	r2, r2, #1
 800893e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800894c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800895c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d107      	bne.n	8008976 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689a      	ldr	r2, [r3, #8]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008972:	609a      	str	r2, [r3, #8]
 8008974:	e006      	b.n	8008984 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008982:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	2b02      	cmp	r3, #2
 800898a:	d108      	bne.n	800899e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800899a:	605a      	str	r2, [r3, #4]
 800899c:	e007      	b.n	80089ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	6812      	ldr	r2, [r2, #0]
 80089b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80089bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68da      	ldr	r2, [r3, #12]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80089d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	69d9      	ldr	r1, [r3, #28]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a1a      	ldr	r2, [r3, #32]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f042 0201 	orr.w	r2, r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af02      	add	r7, sp, #8
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	461a      	mov	r2, r3
 8008a42:	4603      	mov	r3, r0
 8008a44:	817b      	strh	r3, [r7, #10]
 8008a46:	460b      	mov	r3, r1
 8008a48:	813b      	strh	r3, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	f040 80f9 	bne.w	8008c4e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <HAL_I2C_Mem_Write+0x34>
 8008a62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d105      	bne.n	8008a74 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a6e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0ed      	b.n	8008c50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d101      	bne.n	8008a82 <HAL_I2C_Mem_Write+0x4e>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e0e6      	b.n	8008c50 <HAL_I2C_Mem_Write+0x21c>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a8a:	f7fd ff71 	bl	8006970 <HAL_GetTick>
 8008a8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	2319      	movs	r3, #25
 8008a96:	2201      	movs	r2, #1
 8008a98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fbaf 	bl	8009200 <I2C_WaitOnFlagUntilTimeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e0d1      	b.n	8008c50 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2221      	movs	r2, #33	@ 0x21
 8008ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2240      	movs	r2, #64	@ 0x40
 8008ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6a3a      	ldr	r2, [r7, #32]
 8008ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ad4:	88f8      	ldrh	r0, [r7, #6]
 8008ad6:	893a      	ldrh	r2, [r7, #8]
 8008ad8:	8979      	ldrh	r1, [r7, #10]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fabf 	bl	8009068 <I2C_RequestMemoryWrite>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0a9      	b.n	8008c50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2bff      	cmp	r3, #255	@ 0xff
 8008b04:	d90e      	bls.n	8008b24 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	22ff      	movs	r2, #255	@ 0xff
 8008b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	8979      	ldrh	r1, [r7, #10]
 8008b14:	2300      	movs	r3, #0
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 fd33 	bl	8009588 <I2C_TransferConfig>
 8008b22:	e00f      	b.n	8008b44 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	8979      	ldrh	r1, [r7, #10]
 8008b36:	2300      	movs	r3, #0
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 fd22 	bl	8009588 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fbb2 	bl	80092b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e07b      	b.n	8008c50 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5c:	781a      	ldrb	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b68:	1c5a      	adds	r2, r3, #1
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	3b01      	subs	r3, #1
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d034      	beq.n	8008bfc <HAL_I2C_Mem_Write+0x1c8>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d130      	bne.n	8008bfc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2180      	movs	r1, #128	@ 0x80
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fb2b 	bl	8009200 <I2C_WaitOnFlagUntilTimeout>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e04d      	b.n	8008c50 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	2bff      	cmp	r3, #255	@ 0xff
 8008bbc:	d90e      	bls.n	8008bdc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	22ff      	movs	r2, #255	@ 0xff
 8008bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	8979      	ldrh	r1, [r7, #10]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 fcd7 	bl	8009588 <I2C_TransferConfig>
 8008bda:	e00f      	b.n	8008bfc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	8979      	ldrh	r1, [r7, #10]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 fcc6 	bl	8009588 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d19e      	bne.n	8008b44 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fb98 	bl	8009340 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e01a      	b.n	8008c50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6859      	ldr	r1, [r3, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c58 <HAL_I2C_Mem_Write+0x224>)
 8008c2e:	400b      	ands	r3, r1
 8008c30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e000      	b.n	8008c50 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008c4e:	2302      	movs	r3, #2
  }
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	fe00e800 	.word	0xfe00e800

08008c5c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af02      	add	r7, sp, #8
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	4608      	mov	r0, r1
 8008c66:	4611      	mov	r1, r2
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	817b      	strh	r3, [r7, #10]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	813b      	strh	r3, [r7, #8]
 8008c72:	4613      	mov	r3, r2
 8008c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b20      	cmp	r3, #32
 8008c80:	f040 80fd 	bne.w	8008e7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <HAL_I2C_Mem_Read+0x34>
 8008c8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d105      	bne.n	8008c9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c96:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0f1      	b.n	8008e80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d101      	bne.n	8008caa <HAL_I2C_Mem_Read+0x4e>
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	e0ea      	b.n	8008e80 <HAL_I2C_Mem_Read+0x224>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008cb2:	f7fd fe5d 	bl	8006970 <HAL_GetTick>
 8008cb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	2319      	movs	r3, #25
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 fa9b 	bl	8009200 <I2C_WaitOnFlagUntilTimeout>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e0d5      	b.n	8008e80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2222      	movs	r2, #34	@ 0x22
 8008cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2240      	movs	r2, #64	@ 0x40
 8008ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6a3a      	ldr	r2, [r7, #32]
 8008cee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008cfc:	88f8      	ldrh	r0, [r7, #6]
 8008cfe:	893a      	ldrh	r2, [r7, #8]
 8008d00:	8979      	ldrh	r1, [r7, #10]
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f9ff 	bl	8009110 <I2C_RequestMemoryRead>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e0ad      	b.n	8008e80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	2bff      	cmp	r3, #255	@ 0xff
 8008d2c:	d90e      	bls.n	8008d4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	8979      	ldrh	r1, [r7, #10]
 8008d3c:	4b52      	ldr	r3, [pc, #328]	@ (8008e88 <HAL_I2C_Mem_Read+0x22c>)
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 fc1f 	bl	8009588 <I2C_TransferConfig>
 8008d4a:	e00f      	b.n	8008d6c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	8979      	ldrh	r1, [r7, #10]
 8008d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8008e88 <HAL_I2C_Mem_Read+0x22c>)
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 fc0e 	bl	8009588 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d72:	2200      	movs	r2, #0
 8008d74:	2104      	movs	r1, #4
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 fa42 	bl	8009200 <I2C_WaitOnFlagUntilTimeout>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e07c      	b.n	8008e80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d90:	b2d2      	uxtb	r2, r2
 8008d92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008da2:	3b01      	subs	r3, #1
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3b01      	subs	r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d034      	beq.n	8008e2c <HAL_I2C_Mem_Read+0x1d0>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d130      	bne.n	8008e2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2180      	movs	r1, #128	@ 0x80
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 fa13 	bl	8009200 <I2C_WaitOnFlagUntilTimeout>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e04d      	b.n	8008e80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2bff      	cmp	r3, #255	@ 0xff
 8008dec:	d90e      	bls.n	8008e0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	8979      	ldrh	r1, [r7, #10]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 fbbf 	bl	8009588 <I2C_TransferConfig>
 8008e0a:	e00f      	b.n	8008e2c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	8979      	ldrh	r1, [r7, #10]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 fbae 	bl	8009588 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d19a      	bne.n	8008d6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fa80 	bl	8009340 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e01a      	b.n	8008e80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6859      	ldr	r1, [r3, #4]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e8c <HAL_I2C_Mem_Read+0x230>)
 8008e5e:	400b      	ands	r3, r1
 8008e60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e000      	b.n	8008e80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008e7e:	2302      	movs	r3, #2
  }
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	80002400 	.word	0x80002400
 8008e8c:	fe00e800 	.word	0xfe00e800

08008e90 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08a      	sub	sp, #40	@ 0x28
 8008e94:	af02      	add	r7, sp, #8
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	607a      	str	r2, [r7, #4]
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	f040 80d6 	bne.w	800905e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ec0:	d101      	bne.n	8008ec6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e0cc      	b.n	8009060 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d101      	bne.n	8008ed4 <HAL_I2C_IsDeviceReady+0x44>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e0c5      	b.n	8009060 <HAL_I2C_IsDeviceReady+0x1d0>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2224      	movs	r2, #36	@ 0x24
 8008ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d107      	bne.n	8008f02 <HAL_I2C_IsDeviceReady+0x72>
 8008ef2:	897b      	ldrh	r3, [r7, #10]
 8008ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ef8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008efc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008f00:	e006      	b.n	8008f10 <HAL_I2C_IsDeviceReady+0x80>
 8008f02:	897b      	ldrh	r3, [r7, #10]
 8008f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008f0c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	6812      	ldr	r2, [r2, #0]
 8008f14:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008f16:	f7fd fd2b 	bl	8006970 <HAL_GetTick>
 8008f1a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	f003 0320 	and.w	r3, r3, #32
 8008f26:	2b20      	cmp	r3, #32
 8008f28:	bf0c      	ite	eq
 8008f2a:	2301      	moveq	r3, #1
 8008f2c:	2300      	movne	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	f003 0310 	and.w	r3, r3, #16
 8008f3c:	2b10      	cmp	r3, #16
 8008f3e:	bf0c      	ite	eq
 8008f40:	2301      	moveq	r3, #1
 8008f42:	2300      	movne	r3, #0
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008f48:	e034      	b.n	8008fb4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f50:	d01a      	beq.n	8008f88 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f52:	f7fd fd0d 	bl	8006970 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d302      	bcc.n	8008f68 <HAL_I2C_IsDeviceReady+0xd8>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10f      	bne.n	8008f88 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f74:	f043 0220 	orr.w	r2, r3, #32
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e06b      	b.n	8009060 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	f003 0320 	and.w	r3, r3, #32
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	bf0c      	ite	eq
 8008f96:	2301      	moveq	r3, #1
 8008f98:	2300      	movne	r3, #0
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b10      	cmp	r3, #16
 8008faa:	bf0c      	ite	eq
 8008fac:	2301      	moveq	r3, #1
 8008fae:	2300      	movne	r3, #0
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008fb4:	7ffb      	ldrb	r3, [r7, #31]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d102      	bne.n	8008fc0 <HAL_I2C_IsDeviceReady+0x130>
 8008fba:	7fbb      	ldrb	r3, [r7, #30]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0c4      	beq.n	8008f4a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	f003 0310 	and.w	r3, r3, #16
 8008fca:	2b10      	cmp	r3, #16
 8008fcc:	d01a      	beq.n	8009004 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2120      	movs	r1, #32
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 f911 	bl	8009200 <I2C_WaitOnFlagUntilTimeout>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e03b      	b.n	8009060 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2220      	movs	r2, #32
 8008fee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	e02d      	b.n	8009060 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2200      	movs	r2, #0
 800900c:	2120      	movs	r1, #32
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 f8f6 	bl	8009200 <I2C_WaitOnFlagUntilTimeout>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e020      	b.n	8009060 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2210      	movs	r2, #16
 8009024:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2220      	movs	r2, #32
 800902c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	3301      	adds	r3, #1
 8009032:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	429a      	cmp	r2, r3
 800903a:	f63f af56 	bhi.w	8008eea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2220      	movs	r2, #32
 8009042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800904a:	f043 0220 	orr.w	r2, r3, #32
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e000      	b.n	8009060 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800905e:	2302      	movs	r3, #2
  }
}
 8009060:	4618      	mov	r0, r3
 8009062:	3720      	adds	r7, #32
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	461a      	mov	r2, r3
 8009076:	4603      	mov	r3, r0
 8009078:	817b      	strh	r3, [r7, #10]
 800907a:	460b      	mov	r3, r1
 800907c:	813b      	strh	r3, [r7, #8]
 800907e:	4613      	mov	r3, r2
 8009080:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009082:	88fb      	ldrh	r3, [r7, #6]
 8009084:	b2da      	uxtb	r2, r3
 8009086:	8979      	ldrh	r1, [r7, #10]
 8009088:	4b20      	ldr	r3, [pc, #128]	@ (800910c <I2C_RequestMemoryWrite+0xa4>)
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 fa79 	bl	8009588 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	69b9      	ldr	r1, [r7, #24]
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 f909 	bl	80092b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e02c      	b.n	8009104 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d105      	bne.n	80090bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090b0:	893b      	ldrh	r3, [r7, #8]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80090ba:	e015      	b.n	80090e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80090bc:	893b      	ldrh	r3, [r7, #8]
 80090be:	0a1b      	lsrs	r3, r3, #8
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	69b9      	ldr	r1, [r7, #24]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 f8ef 	bl	80092b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e012      	b.n	8009104 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090de:	893b      	ldrh	r3, [r7, #8]
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	2200      	movs	r2, #0
 80090f0:	2180      	movs	r1, #128	@ 0x80
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 f884 	bl	8009200 <I2C_WaitOnFlagUntilTimeout>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e000      	b.n	8009104 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	80002000 	.word	0x80002000

08009110 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af02      	add	r7, sp, #8
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	4608      	mov	r0, r1
 800911a:	4611      	mov	r1, r2
 800911c:	461a      	mov	r2, r3
 800911e:	4603      	mov	r3, r0
 8009120:	817b      	strh	r3, [r7, #10]
 8009122:	460b      	mov	r3, r1
 8009124:	813b      	strh	r3, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800912a:	88fb      	ldrh	r3, [r7, #6]
 800912c:	b2da      	uxtb	r2, r3
 800912e:	8979      	ldrh	r1, [r7, #10]
 8009130:	4b20      	ldr	r3, [pc, #128]	@ (80091b4 <I2C_RequestMemoryRead+0xa4>)
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	2300      	movs	r3, #0
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 fa26 	bl	8009588 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	69b9      	ldr	r1, [r7, #24]
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 f8b6 	bl	80092b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e02c      	b.n	80091aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009150:	88fb      	ldrh	r3, [r7, #6]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d105      	bne.n	8009162 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009156:	893b      	ldrh	r3, [r7, #8]
 8009158:	b2da      	uxtb	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009160:	e015      	b.n	800918e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009162:	893b      	ldrh	r3, [r7, #8]
 8009164:	0a1b      	lsrs	r3, r3, #8
 8009166:	b29b      	uxth	r3, r3
 8009168:	b2da      	uxtb	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009170:	69fa      	ldr	r2, [r7, #28]
 8009172:	69b9      	ldr	r1, [r7, #24]
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 f89c 	bl	80092b2 <I2C_WaitOnTXISFlagUntilTimeout>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e012      	b.n	80091aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009184:	893b      	ldrh	r3, [r7, #8]
 8009186:	b2da      	uxtb	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	2200      	movs	r2, #0
 8009196:	2140      	movs	r1, #64	@ 0x40
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f831 	bl	8009200 <I2C_WaitOnFlagUntilTimeout>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e000      	b.n	80091aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	80002000 	.word	0x80002000

080091b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d103      	bne.n	80091d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2200      	movs	r2, #0
 80091d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d007      	beq.n	80091f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0201 	orr.w	r2, r2, #1
 80091f2:	619a      	str	r2, [r3, #24]
  }
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	4613      	mov	r3, r2
 800920e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009210:	e03b      	b.n	800928a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 f8d6 	bl	80093c8 <I2C_IsErrorOccurred>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e041      	b.n	80092aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922c:	d02d      	beq.n	800928a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800922e:	f7fd fb9f 	bl	8006970 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d302      	bcc.n	8009244 <I2C_WaitOnFlagUntilTimeout+0x44>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d122      	bne.n	800928a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	699a      	ldr	r2, [r3, #24]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	4013      	ands	r3, r2
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	429a      	cmp	r2, r3
 8009252:	bf0c      	ite	eq
 8009254:	2301      	moveq	r3, #1
 8009256:	2300      	movne	r3, #0
 8009258:	b2db      	uxtb	r3, r3
 800925a:	461a      	mov	r2, r3
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	429a      	cmp	r2, r3
 8009260:	d113      	bne.n	800928a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009266:	f043 0220 	orr.w	r2, r3, #32
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2220      	movs	r2, #32
 8009272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e00f      	b.n	80092aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	699a      	ldr	r2, [r3, #24]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	4013      	ands	r3, r2
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	429a      	cmp	r2, r3
 8009298:	bf0c      	ite	eq
 800929a:	2301      	moveq	r3, #1
 800929c:	2300      	movne	r3, #0
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	461a      	mov	r2, r3
 80092a2:	79fb      	ldrb	r3, [r7, #7]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d0b4      	beq.n	8009212 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80092be:	e033      	b.n	8009328 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f87f 	bl	80093c8 <I2C_IsErrorOccurred>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e031      	b.n	8009338 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092da:	d025      	beq.n	8009328 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092dc:	f7fd fb48 	bl	8006970 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d302      	bcc.n	80092f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d11a      	bne.n	8009328 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d013      	beq.n	8009328 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009304:	f043 0220 	orr.w	r2, r3, #32
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2220      	movs	r2, #32
 8009310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e007      	b.n	8009338 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b02      	cmp	r3, #2
 8009334:	d1c4      	bne.n	80092c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800934c:	e02f      	b.n	80093ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f838 	bl	80093c8 <I2C_IsErrorOccurred>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e02d      	b.n	80093be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009362:	f7fd fb05 	bl	8006970 <HAL_GetTick>
 8009366:	4602      	mov	r2, r0
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	429a      	cmp	r2, r3
 8009370:	d302      	bcc.n	8009378 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d11a      	bne.n	80093ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b20      	cmp	r3, #32
 8009384:	d013      	beq.n	80093ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938a:	f043 0220 	orr.w	r2, r3, #32
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2220      	movs	r2, #32
 8009396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e007      	b.n	80093be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	2b20      	cmp	r3, #32
 80093ba:	d1c8      	bne.n	800934e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08a      	sub	sp, #40	@ 0x28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	f003 0310 	and.w	r3, r3, #16
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d068      	beq.n	80094c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2210      	movs	r2, #16
 80093fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80093fc:	e049      	b.n	8009492 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009404:	d045      	beq.n	8009492 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009406:	f7fd fab3 	bl	8006970 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	429a      	cmp	r2, r3
 8009414:	d302      	bcc.n	800941c <I2C_IsErrorOccurred+0x54>
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d13a      	bne.n	8009492 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009426:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800942e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800943a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800943e:	d121      	bne.n	8009484 <I2C_IsErrorOccurred+0xbc>
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009446:	d01d      	beq.n	8009484 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009448:	7cfb      	ldrb	r3, [r7, #19]
 800944a:	2b20      	cmp	r3, #32
 800944c:	d01a      	beq.n	8009484 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800945c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800945e:	f7fd fa87 	bl	8006970 <HAL_GetTick>
 8009462:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009464:	e00e      	b.n	8009484 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009466:	f7fd fa83 	bl	8006970 <HAL_GetTick>
 800946a:	4602      	mov	r2, r0
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	2b19      	cmp	r3, #25
 8009472:	d907      	bls.n	8009484 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	f043 0320 	orr.w	r3, r3, #32
 800947a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009482:	e006      	b.n	8009492 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b20      	cmp	r3, #32
 8009490:	d1e9      	bne.n	8009466 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	f003 0320 	and.w	r3, r3, #32
 800949c:	2b20      	cmp	r3, #32
 800949e:	d003      	beq.n	80094a8 <I2C_IsErrorOccurred+0xe0>
 80094a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0aa      	beq.n	80093fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80094a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d103      	bne.n	80094b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2220      	movs	r2, #32
 80094b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	f043 0304 	orr.w	r3, r3, #4
 80094be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00b      	beq.n	80094f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	f043 0301 	orr.w	r3, r3, #1
 80094de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80094e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00b      	beq.n	8009512 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	f043 0308 	orr.w	r3, r3, #8
 8009500:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800950a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00b      	beq.n	8009534 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	f043 0302 	orr.w	r3, r3, #2
 8009522:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800952c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01c      	beq.n	8009576 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff fe3b 	bl	80091b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6859      	ldr	r1, [r3, #4]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <I2C_IsErrorOccurred+0x1bc>)
 800954e:	400b      	ands	r3, r1
 8009550:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	431a      	orrs	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2220      	movs	r2, #32
 8009562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009576:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800957a:	4618      	mov	r0, r3
 800957c:	3728      	adds	r7, #40	@ 0x28
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	fe00e800 	.word	0xfe00e800

08009588 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	607b      	str	r3, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	817b      	strh	r3, [r7, #10]
 8009596:	4613      	mov	r3, r2
 8009598:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800959a:	897b      	ldrh	r3, [r7, #10]
 800959c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095a0:	7a7b      	ldrb	r3, [r7, #9]
 80095a2:	041b      	lsls	r3, r3, #16
 80095a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	0d5b      	lsrs	r3, r3, #21
 80095c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80095c6:	4b08      	ldr	r3, [pc, #32]	@ (80095e8 <I2C_TransferConfig+0x60>)
 80095c8:	430b      	orrs	r3, r1
 80095ca:	43db      	mvns	r3, r3
 80095cc:	ea02 0103 	and.w	r1, r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	03ff63ff 	.word	0x03ff63ff

080095ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d138      	bne.n	8009674 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009608:	2b01      	cmp	r3, #1
 800960a:	d101      	bne.n	8009610 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800960c:	2302      	movs	r3, #2
 800960e:	e032      	b.n	8009676 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2224      	movs	r2, #36	@ 0x24
 800961c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0201 	bic.w	r2, r2, #1
 800962e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800963e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6819      	ldr	r1, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	430a      	orrs	r2, r1
 800964e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0201 	orr.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	e000      	b.n	8009676 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009674:	2302      	movs	r3, #2
  }
}
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009682:	b480      	push	{r7}
 8009684:	b085      	sub	sp, #20
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b20      	cmp	r3, #32
 8009696:	d139      	bne.n	800970c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e033      	b.n	800970e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2224      	movs	r2, #36	@ 0x24
 80096b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f022 0201 	bic.w	r2, r2, #1
 80096c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80096d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	021b      	lsls	r3, r3, #8
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0201 	orr.w	r2, r2, #1
 80096f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	e000      	b.n	800970e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800970c:	2302      	movs	r3, #2
  }
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
	...

0800971c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009720:	4b04      	ldr	r3, [pc, #16]	@ (8009734 <HAL_PWREx_GetVoltageRange+0x18>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8009728:	4618      	mov	r0, r3
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	40007000 	.word	0x40007000

08009738 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009746:	d130      	bne.n	80097aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009748:	4b23      	ldr	r3, [pc, #140]	@ (80097d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009754:	d038      	beq.n	80097c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009756:	4b20      	ldr	r3, [pc, #128]	@ (80097d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800975e:	4a1e      	ldr	r2, [pc, #120]	@ (80097d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009760:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009764:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009766:	4b1d      	ldr	r3, [pc, #116]	@ (80097dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2232      	movs	r2, #50	@ 0x32
 800976c:	fb02 f303 	mul.w	r3, r2, r3
 8009770:	4a1b      	ldr	r2, [pc, #108]	@ (80097e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009772:	fba2 2303 	umull	r2, r3, r2, r3
 8009776:	0c9b      	lsrs	r3, r3, #18
 8009778:	3301      	adds	r3, #1
 800977a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800977c:	e002      	b.n	8009784 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3b01      	subs	r3, #1
 8009782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009784:	4b14      	ldr	r3, [pc, #80]	@ (80097d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800978c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009790:	d102      	bne.n	8009798 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1f2      	bne.n	800977e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009798:	4b0f      	ldr	r3, [pc, #60]	@ (80097d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097a4:	d110      	bne.n	80097c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e00f      	b.n	80097ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80097aa:	4b0b      	ldr	r3, [pc, #44]	@ (80097d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80097b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097b6:	d007      	beq.n	80097c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80097b8:	4b07      	ldr	r3, [pc, #28]	@ (80097d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80097c0:	4a05      	ldr	r2, [pc, #20]	@ (80097d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80097c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80097c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	40007000 	.word	0x40007000
 80097dc:	20000000 	.word	0x20000000
 80097e0:	431bde83 	.word	0x431bde83

080097e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08a      	sub	sp, #40	@ 0x28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d102      	bne.n	80097f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	f000 bc4f 	b.w	800a096 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097f8:	4b97      	ldr	r3, [pc, #604]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	f003 030c 	and.w	r3, r3, #12
 8009800:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009802:	4b95      	ldr	r3, [pc, #596]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	f003 0303 	and.w	r3, r3, #3
 800980a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0310 	and.w	r3, r3, #16
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 80e6 	beq.w	80099e6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d007      	beq.n	8009830 <HAL_RCC_OscConfig+0x4c>
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	2b0c      	cmp	r3, #12
 8009824:	f040 808d 	bne.w	8009942 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	2b01      	cmp	r3, #1
 800982c:	f040 8089 	bne.w	8009942 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009830:	4b89      	ldr	r3, [pc, #548]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d006      	beq.n	800984a <HAL_RCC_OscConfig+0x66>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d102      	bne.n	800984a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	f000 bc26 	b.w	800a096 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800984e:	4b82      	ldr	r3, [pc, #520]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0308 	and.w	r3, r3, #8
 8009856:	2b00      	cmp	r3, #0
 8009858:	d004      	beq.n	8009864 <HAL_RCC_OscConfig+0x80>
 800985a:	4b7f      	ldr	r3, [pc, #508]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009862:	e005      	b.n	8009870 <HAL_RCC_OscConfig+0x8c>
 8009864:	4b7c      	ldr	r3, [pc, #496]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800986a:	091b      	lsrs	r3, r3, #4
 800986c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009870:	4293      	cmp	r3, r2
 8009872:	d224      	bcs.n	80098be <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009878:	4618      	mov	r0, r3
 800987a:	f000 fdd9 	bl	800a430 <RCC_SetFlashLatencyFromMSIRange>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	f000 bc06 	b.w	800a096 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800988a:	4b73      	ldr	r3, [pc, #460]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a72      	ldr	r2, [pc, #456]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009890:	f043 0308 	orr.w	r3, r3, #8
 8009894:	6013      	str	r3, [r2, #0]
 8009896:	4b70      	ldr	r3, [pc, #448]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a2:	496d      	ldr	r1, [pc, #436]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80098a8:	4b6b      	ldr	r3, [pc, #428]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	021b      	lsls	r3, r3, #8
 80098b6:	4968      	ldr	r1, [pc, #416]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	604b      	str	r3, [r1, #4]
 80098bc:	e025      	b.n	800990a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80098be:	4b66      	ldr	r3, [pc, #408]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a65      	ldr	r2, [pc, #404]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80098c4:	f043 0308 	orr.w	r3, r3, #8
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	4b63      	ldr	r3, [pc, #396]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d6:	4960      	ldr	r1, [pc, #384]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80098dc:	4b5e      	ldr	r3, [pc, #376]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a1b      	ldr	r3, [r3, #32]
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	495b      	ldr	r1, [pc, #364]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80098ec:	4313      	orrs	r3, r2
 80098ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d109      	bne.n	800990a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 fd98 	bl	800a430 <RCC_SetFlashLatencyFromMSIRange>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e3c5      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800990a:	f000 fccd 	bl	800a2a8 <HAL_RCC_GetSysClockFreq>
 800990e:	4602      	mov	r2, r0
 8009910:	4b51      	ldr	r3, [pc, #324]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	091b      	lsrs	r3, r3, #4
 8009916:	f003 030f 	and.w	r3, r3, #15
 800991a:	4950      	ldr	r1, [pc, #320]	@ (8009a5c <HAL_RCC_OscConfig+0x278>)
 800991c:	5ccb      	ldrb	r3, [r1, r3]
 800991e:	f003 031f 	and.w	r3, r3, #31
 8009922:	fa22 f303 	lsr.w	r3, r2, r3
 8009926:	4a4e      	ldr	r2, [pc, #312]	@ (8009a60 <HAL_RCC_OscConfig+0x27c>)
 8009928:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800992a:	4b4e      	ldr	r3, [pc, #312]	@ (8009a64 <HAL_RCC_OscConfig+0x280>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4618      	mov	r0, r3
 8009930:	f7fc ffce 	bl	80068d0 <HAL_InitTick>
 8009934:	4603      	mov	r3, r0
 8009936:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d052      	beq.n	80099e4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800993e:	7dfb      	ldrb	r3, [r7, #23]
 8009940:	e3a9      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d032      	beq.n	80099b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800994a:	4b43      	ldr	r3, [pc, #268]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a42      	ldr	r2, [pc, #264]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009950:	f043 0301 	orr.w	r3, r3, #1
 8009954:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009956:	f7fd f80b 	bl	8006970 <HAL_GetTick>
 800995a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800995c:	e008      	b.n	8009970 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800995e:	f7fd f807 	bl	8006970 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b02      	cmp	r3, #2
 800996a:	d901      	bls.n	8009970 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e392      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009970:	4b39      	ldr	r3, [pc, #228]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0f0      	beq.n	800995e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800997c:	4b36      	ldr	r3, [pc, #216]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a35      	ldr	r2, [pc, #212]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009982:	f043 0308 	orr.w	r3, r3, #8
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	4b33      	ldr	r3, [pc, #204]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009994:	4930      	ldr	r1, [pc, #192]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009996:	4313      	orrs	r3, r2
 8009998:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800999a:	4b2f      	ldr	r3, [pc, #188]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	021b      	lsls	r3, r3, #8
 80099a8:	492b      	ldr	r1, [pc, #172]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	604b      	str	r3, [r1, #4]
 80099ae:	e01a      	b.n	80099e6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80099b0:	4b29      	ldr	r3, [pc, #164]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a28      	ldr	r2, [pc, #160]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80099b6:	f023 0301 	bic.w	r3, r3, #1
 80099ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80099bc:	f7fc ffd8 	bl	8006970 <HAL_GetTick>
 80099c0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80099c2:	e008      	b.n	80099d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80099c4:	f7fc ffd4 	bl	8006970 <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d901      	bls.n	80099d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e35f      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80099d6:	4b20      	ldr	r3, [pc, #128]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1f0      	bne.n	80099c4 <HAL_RCC_OscConfig+0x1e0>
 80099e2:	e000      	b.n	80099e6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80099e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d073      	beq.n	8009ada <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d005      	beq.n	8009a04 <HAL_RCC_OscConfig+0x220>
 80099f8:	6a3b      	ldr	r3, [r7, #32]
 80099fa:	2b0c      	cmp	r3, #12
 80099fc:	d10e      	bne.n	8009a1c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d10b      	bne.n	8009a1c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a04:	4b14      	ldr	r3, [pc, #80]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d063      	beq.n	8009ad8 <HAL_RCC_OscConfig+0x2f4>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d15f      	bne.n	8009ad8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e33c      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a24:	d106      	bne.n	8009a34 <HAL_RCC_OscConfig+0x250>
 8009a26:	4b0c      	ldr	r3, [pc, #48]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	e025      	b.n	8009a80 <HAL_RCC_OscConfig+0x29c>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a3c:	d114      	bne.n	8009a68 <HAL_RCC_OscConfig+0x284>
 8009a3e:	4b06      	ldr	r3, [pc, #24]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a05      	ldr	r2, [pc, #20]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a48:	6013      	str	r3, [r2, #0]
 8009a4a:	4b03      	ldr	r3, [pc, #12]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a02      	ldr	r2, [pc, #8]	@ (8009a58 <HAL_RCC_OscConfig+0x274>)
 8009a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	e013      	b.n	8009a80 <HAL_RCC_OscConfig+0x29c>
 8009a58:	40021000 	.word	0x40021000
 8009a5c:	0800c7b8 	.word	0x0800c7b8
 8009a60:	20000000 	.word	0x20000000
 8009a64:	20000004 	.word	0x20000004
 8009a68:	4b8f      	ldr	r3, [pc, #572]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a8e      	ldr	r2, [pc, #568]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a72:	6013      	str	r3, [r2, #0]
 8009a74:	4b8c      	ldr	r3, [pc, #560]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a8b      	ldr	r2, [pc, #556]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d013      	beq.n	8009ab0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a88:	f7fc ff72 	bl	8006970 <HAL_GetTick>
 8009a8c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a8e:	e008      	b.n	8009aa2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a90:	f7fc ff6e 	bl	8006970 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	2b64      	cmp	r3, #100	@ 0x64
 8009a9c:	d901      	bls.n	8009aa2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e2f9      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009aa2:	4b81      	ldr	r3, [pc, #516]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0f0      	beq.n	8009a90 <HAL_RCC_OscConfig+0x2ac>
 8009aae:	e014      	b.n	8009ada <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab0:	f7fc ff5e 	bl	8006970 <HAL_GetTick>
 8009ab4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ab6:	e008      	b.n	8009aca <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ab8:	f7fc ff5a 	bl	8006970 <HAL_GetTick>
 8009abc:	4602      	mov	r2, r0
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	2b64      	cmp	r3, #100	@ 0x64
 8009ac4:	d901      	bls.n	8009aca <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e2e5      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009aca:	4b77      	ldr	r3, [pc, #476]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1f0      	bne.n	8009ab8 <HAL_RCC_OscConfig+0x2d4>
 8009ad6:	e000      	b.n	8009ada <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d060      	beq.n	8009ba8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d005      	beq.n	8009af8 <HAL_RCC_OscConfig+0x314>
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	2b0c      	cmp	r3, #12
 8009af0:	d119      	bne.n	8009b26 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d116      	bne.n	8009b26 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009af8:	4b6b      	ldr	r3, [pc, #428]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d005      	beq.n	8009b10 <HAL_RCC_OscConfig+0x32c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e2c2      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b10:	4b65      	ldr	r3, [pc, #404]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	061b      	lsls	r3, r3, #24
 8009b1e:	4962      	ldr	r1, [pc, #392]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009b20:	4313      	orrs	r3, r2
 8009b22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b24:	e040      	b.n	8009ba8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d023      	beq.n	8009b76 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a5d      	ldr	r2, [pc, #372]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b3a:	f7fc ff19 	bl	8006970 <HAL_GetTick>
 8009b3e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b40:	e008      	b.n	8009b54 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b42:	f7fc ff15 	bl	8006970 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d901      	bls.n	8009b54 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e2a0      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b54:	4b54      	ldr	r3, [pc, #336]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0f0      	beq.n	8009b42 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b60:	4b51      	ldr	r3, [pc, #324]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	061b      	lsls	r3, r3, #24
 8009b6e:	494e      	ldr	r1, [pc, #312]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	604b      	str	r3, [r1, #4]
 8009b74:	e018      	b.n	8009ba8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b76:	4b4c      	ldr	r3, [pc, #304]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a4b      	ldr	r2, [pc, #300]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b82:	f7fc fef5 	bl	8006970 <HAL_GetTick>
 8009b86:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009b88:	e008      	b.n	8009b9c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b8a:	f7fc fef1 	bl	8006970 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d901      	bls.n	8009b9c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e27c      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009b9c:	4b42      	ldr	r3, [pc, #264]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1f0      	bne.n	8009b8a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0308 	and.w	r3, r3, #8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 8082 	beq.w	8009cba <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d05f      	beq.n	8009c7e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8009bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bc4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f003 0310 	and.w	r3, r3, #16
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d037      	beq.n	8009c44 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d006      	beq.n	8009bec <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e254      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d01b      	beq.n	8009c2e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009bfe:	f023 0301 	bic.w	r3, r3, #1
 8009c02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c06:	f7fc feb3 	bl	8006970 <HAL_GetTick>
 8009c0a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c0c:	e008      	b.n	8009c20 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c0e:	f7fc feaf 	bl	8006970 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	2b11      	cmp	r3, #17
 8009c1a:	d901      	bls.n	8009c20 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e23a      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c20:	4b21      	ldr	r3, [pc, #132]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c26:	f003 0302 	and.w	r3, r3, #2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1ef      	bne.n	8009c0e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8009c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c34:	f023 0210 	bic.w	r2, r3, #16
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	491a      	ldr	r1, [pc, #104]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c44:	4b18      	ldr	r3, [pc, #96]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c4a:	4a17      	ldr	r2, [pc, #92]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009c4c:	f043 0301 	orr.w	r3, r3, #1
 8009c50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c54:	f7fc fe8c 	bl	8006970 <HAL_GetTick>
 8009c58:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c5a:	e008      	b.n	8009c6e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c5c:	f7fc fe88 	bl	8006970 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	2b11      	cmp	r3, #17
 8009c68:	d901      	bls.n	8009c6e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e213      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0ef      	beq.n	8009c5c <HAL_RCC_OscConfig+0x478>
 8009c7c:	e01d      	b.n	8009cba <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c84:	4a08      	ldr	r2, [pc, #32]	@ (8009ca8 <HAL_RCC_OscConfig+0x4c4>)
 8009c86:	f023 0301 	bic.w	r3, r3, #1
 8009c8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c8e:	f7fc fe6f 	bl	8006970 <HAL_GetTick>
 8009c92:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c94:	e00a      	b.n	8009cac <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c96:	f7fc fe6b 	bl	8006970 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	2b11      	cmp	r3, #17
 8009ca2:	d903      	bls.n	8009cac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e1f6      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
 8009ca8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009cac:	4ba9      	ldr	r3, [pc, #676]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1ed      	bne.n	8009c96 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0304 	and.w	r3, r3, #4
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 80bd 	beq.w	8009e42 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009cce:	4ba1      	ldr	r3, [pc, #644]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10e      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cda:	4b9e      	ldr	r3, [pc, #632]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cde:	4a9d      	ldr	r2, [pc, #628]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ce6:	4b9b      	ldr	r3, [pc, #620]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cee:	60fb      	str	r3, [r7, #12]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cf8:	4b97      	ldr	r3, [pc, #604]	@ (8009f58 <HAL_RCC_OscConfig+0x774>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d118      	bne.n	8009d36 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d04:	4b94      	ldr	r3, [pc, #592]	@ (8009f58 <HAL_RCC_OscConfig+0x774>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a93      	ldr	r2, [pc, #588]	@ (8009f58 <HAL_RCC_OscConfig+0x774>)
 8009d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d10:	f7fc fe2e 	bl	8006970 <HAL_GetTick>
 8009d14:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d16:	e008      	b.n	8009d2a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d18:	f7fc fe2a 	bl	8006970 <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d901      	bls.n	8009d2a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e1b5      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d2a:	4b8b      	ldr	r3, [pc, #556]	@ (8009f58 <HAL_RCC_OscConfig+0x774>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0f0      	beq.n	8009d18 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d02c      	beq.n	8009d9c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8009d42:	4b84      	ldr	r3, [pc, #528]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d48:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d54:	497f      	ldr	r1, [pc, #508]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d010      	beq.n	8009d8a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009d68:	4b7a      	ldr	r3, [pc, #488]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d6e:	4a79      	ldr	r2, [pc, #484]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009d70:	f043 0304 	orr.w	r3, r3, #4
 8009d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009d78:	4b76      	ldr	r3, [pc, #472]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d7e:	4a75      	ldr	r2, [pc, #468]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009d80:	f043 0301 	orr.w	r3, r3, #1
 8009d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009d88:	e018      	b.n	8009dbc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009d8a:	4b72      	ldr	r3, [pc, #456]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d90:	4a70      	ldr	r2, [pc, #448]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009d92:	f043 0301 	orr.w	r3, r3, #1
 8009d96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009d9a:	e00f      	b.n	8009dbc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009d9c:	4b6d      	ldr	r3, [pc, #436]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009da2:	4a6c      	ldr	r2, [pc, #432]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009da4:	f023 0301 	bic.w	r3, r3, #1
 8009da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009dac:	4b69      	ldr	r3, [pc, #420]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009db2:	4a68      	ldr	r2, [pc, #416]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009db4:	f023 0304 	bic.w	r3, r3, #4
 8009db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d016      	beq.n	8009df2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc4:	f7fc fdd4 	bl	8006970 <HAL_GetTick>
 8009dc8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dca:	e00a      	b.n	8009de2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dcc:	f7fc fdd0 	bl	8006970 <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e159      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009de2:	4b5c      	ldr	r3, [pc, #368]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009de8:	f003 0302 	and.w	r3, r3, #2
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d0ed      	beq.n	8009dcc <HAL_RCC_OscConfig+0x5e8>
 8009df0:	e01d      	b.n	8009e2e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009df2:	f7fc fdbd 	bl	8006970 <HAL_GetTick>
 8009df6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009df8:	e00a      	b.n	8009e10 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dfa:	f7fc fdb9 	bl	8006970 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d901      	bls.n	8009e10 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e142      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e10:	4b50      	ldr	r3, [pc, #320]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1ed      	bne.n	8009dfa <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8009e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e24:	4a4b      	ldr	r2, [pc, #300]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d105      	bne.n	8009e42 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e36:	4b47      	ldr	r3, [pc, #284]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e3a:	4a46      	ldr	r2, [pc, #280]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 0320 	and.w	r3, r3, #32
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d03c      	beq.n	8009ec8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d01c      	beq.n	8009e90 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e56:	4b3f      	ldr	r3, [pc, #252]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e66:	f7fc fd83 	bl	8006970 <HAL_GetTick>
 8009e6a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009e6c:	e008      	b.n	8009e80 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e6e:	f7fc fd7f 	bl	8006970 <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d901      	bls.n	8009e80 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e10a      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009e80:	4b34      	ldr	r3, [pc, #208]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e86:	f003 0302 	and.w	r3, r3, #2
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0ef      	beq.n	8009e6e <HAL_RCC_OscConfig+0x68a>
 8009e8e:	e01b      	b.n	8009ec8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e90:	4b30      	ldr	r3, [pc, #192]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e96:	4a2f      	ldr	r2, [pc, #188]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009e98:	f023 0301 	bic.w	r3, r3, #1
 8009e9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ea0:	f7fc fd66 	bl	8006970 <HAL_GetTick>
 8009ea4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009ea6:	e008      	b.n	8009eba <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ea8:	f7fc fd62 	bl	8006970 <HAL_GetTick>
 8009eac:	4602      	mov	r2, r0
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d901      	bls.n	8009eba <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e0ed      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009eba:	4b26      	ldr	r3, [pc, #152]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ec0:	f003 0302 	and.w	r3, r3, #2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1ef      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 80e1 	beq.w	800a094 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	f040 80b5 	bne.w	800a046 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009edc:	4b1d      	ldr	r3, [pc, #116]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	f003 0203 	and.w	r2, r3, #3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d124      	bne.n	8009f3a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009efa:	3b01      	subs	r3, #1
 8009efc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d11b      	bne.n	8009f3a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d113      	bne.n	8009f3a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f1c:	085b      	lsrs	r3, r3, #1
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d109      	bne.n	8009f3a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f30:	085b      	lsrs	r3, r3, #1
 8009f32:	3b01      	subs	r3, #1
 8009f34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d05f      	beq.n	8009ffa <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	2b0c      	cmp	r3, #12
 8009f3e:	d05a      	beq.n	8009ff6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009f40:	4b04      	ldr	r3, [pc, #16]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a03      	ldr	r2, [pc, #12]	@ (8009f54 <HAL_RCC_OscConfig+0x770>)
 8009f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009f4c:	f7fc fd10 	bl	8006970 <HAL_GetTick>
 8009f50:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f52:	e00c      	b.n	8009f6e <HAL_RCC_OscConfig+0x78a>
 8009f54:	40021000 	.word	0x40021000
 8009f58:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f5c:	f7fc fd08 	bl	8006970 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d901      	bls.n	8009f6e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e093      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f6e:	4b4c      	ldr	r3, [pc, #304]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1f0      	bne.n	8009f5c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f7a:	4b49      	ldr	r3, [pc, #292]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 8009f7c:	68da      	ldr	r2, [r3, #12]
 8009f7e:	4b49      	ldr	r3, [pc, #292]	@ (800a0a4 <HAL_RCC_OscConfig+0x8c0>)
 8009f80:	4013      	ands	r3, r2
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009f8a:	3a01      	subs	r2, #1
 8009f8c:	0112      	lsls	r2, r2, #4
 8009f8e:	4311      	orrs	r1, r2
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009f94:	0212      	lsls	r2, r2, #8
 8009f96:	4311      	orrs	r1, r2
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009f9c:	0852      	lsrs	r2, r2, #1
 8009f9e:	3a01      	subs	r2, #1
 8009fa0:	0552      	lsls	r2, r2, #21
 8009fa2:	4311      	orrs	r1, r2
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009fa8:	0852      	lsrs	r2, r2, #1
 8009faa:	3a01      	subs	r2, #1
 8009fac:	0652      	lsls	r2, r2, #25
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	493b      	ldr	r1, [pc, #236]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009fb6:	4b3a      	ldr	r3, [pc, #232]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a39      	ldr	r2, [pc, #228]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 8009fbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009fc0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009fc2:	4b37      	ldr	r3, [pc, #220]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	4a36      	ldr	r2, [pc, #216]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 8009fc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009fcc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009fce:	f7fc fccf 	bl	8006970 <HAL_GetTick>
 8009fd2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fd4:	e008      	b.n	8009fe8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fd6:	f7fc fccb 	bl	8006970 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d901      	bls.n	8009fe8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e056      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fe8:	4b2d      	ldr	r3, [pc, #180]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0f0      	beq.n	8009fd6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009ff4:	e04e      	b.n	800a094 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e04d      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ffa:	4b29      	ldr	r3, [pc, #164]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d146      	bne.n	800a094 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a006:	4b26      	ldr	r3, [pc, #152]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a25      	ldr	r2, [pc, #148]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 800a00c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a010:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a012:	4b23      	ldr	r3, [pc, #140]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	4a22      	ldr	r2, [pc, #136]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 800a018:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a01c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a01e:	f7fc fca7 	bl	8006970 <HAL_GetTick>
 800a022:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a024:	e008      	b.n	800a038 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a026:	f7fc fca3 	bl	8006970 <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	2b02      	cmp	r3, #2
 800a032:	d901      	bls.n	800a038 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e02e      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a038:	4b19      	ldr	r3, [pc, #100]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0f0      	beq.n	800a026 <HAL_RCC_OscConfig+0x842>
 800a044:	e026      	b.n	800a094 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	2b0c      	cmp	r3, #12
 800a04a:	d021      	beq.n	800a090 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a04c:	4b14      	ldr	r3, [pc, #80]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a13      	ldr	r2, [pc, #76]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 800a052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a058:	f7fc fc8a 	bl	8006970 <HAL_GetTick>
 800a05c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a05e:	e008      	b.n	800a072 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a060:	f7fc fc86 	bl	8006970 <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d901      	bls.n	800a072 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e011      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a072:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1f0      	bne.n	800a060 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800a07e:	4b08      	ldr	r3, [pc, #32]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	4a07      	ldr	r2, [pc, #28]	@ (800a0a0 <HAL_RCC_OscConfig+0x8bc>)
 800a084:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800a088:	f023 0303 	bic.w	r3, r3, #3
 800a08c:	60d3      	str	r3, [r2, #12]
 800a08e:	e001      	b.n	800a094 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e000      	b.n	800a096 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3728      	adds	r7, #40	@ 0x28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	40021000 	.word	0x40021000
 800a0a4:	f99f808c 	.word	0xf99f808c

0800a0a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e0e7      	b.n	800a28c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a0bc:	4b75      	ldr	r3, [pc, #468]	@ (800a294 <HAL_RCC_ClockConfig+0x1ec>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0307 	and.w	r3, r3, #7
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d910      	bls.n	800a0ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ca:	4b72      	ldr	r3, [pc, #456]	@ (800a294 <HAL_RCC_ClockConfig+0x1ec>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f023 0207 	bic.w	r2, r3, #7
 800a0d2:	4970      	ldr	r1, [pc, #448]	@ (800a294 <HAL_RCC_ClockConfig+0x1ec>)
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0da:	4b6e      	ldr	r3, [pc, #440]	@ (800a294 <HAL_RCC_ClockConfig+0x1ec>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0307 	and.w	r3, r3, #7
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d001      	beq.n	800a0ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0cf      	b.n	800a28c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d010      	beq.n	800a11a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	689a      	ldr	r2, [r3, #8]
 800a0fc:	4b66      	ldr	r3, [pc, #408]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a104:	429a      	cmp	r2, r3
 800a106:	d908      	bls.n	800a11a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a108:	4b63      	ldr	r3, [pc, #396]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	4960      	ldr	r1, [pc, #384]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a116:	4313      	orrs	r3, r2
 800a118:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	2b00      	cmp	r3, #0
 800a124:	d04c      	beq.n	800a1c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d107      	bne.n	800a13e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a12e:	4b5a      	ldr	r3, [pc, #360]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d121      	bne.n	800a17e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e0a6      	b.n	800a28c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	2b02      	cmp	r3, #2
 800a144:	d107      	bne.n	800a156 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a146:	4b54      	ldr	r3, [pc, #336]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d115      	bne.n	800a17e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e09a      	b.n	800a28c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d107      	bne.n	800a16e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a15e:	4b4e      	ldr	r3, [pc, #312]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0302 	and.w	r3, r3, #2
 800a166:	2b00      	cmp	r3, #0
 800a168:	d109      	bne.n	800a17e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e08e      	b.n	800a28c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a16e:	4b4a      	ldr	r3, [pc, #296]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e086      	b.n	800a28c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a17e:	4b46      	ldr	r3, [pc, #280]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f023 0203 	bic.w	r2, r3, #3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	4943      	ldr	r1, [pc, #268]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a190:	f7fc fbee 	bl	8006970 <HAL_GetTick>
 800a194:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a196:	e00a      	b.n	800a1ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a198:	f7fc fbea 	bl	8006970 <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d901      	bls.n	800a1ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e06e      	b.n	800a28c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1ae:	4b3a      	ldr	r3, [pc, #232]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 020c 	and.w	r2, r3, #12
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d1eb      	bne.n	800a198 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0302 	and.w	r3, r3, #2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d010      	beq.n	800a1ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	4b31      	ldr	r3, [pc, #196]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d208      	bcs.n	800a1ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1dc:	4b2e      	ldr	r3, [pc, #184]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	492b      	ldr	r1, [pc, #172]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a1ee:	4b29      	ldr	r3, [pc, #164]	@ (800a294 <HAL_RCC_ClockConfig+0x1ec>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d210      	bcs.n	800a21e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1fc:	4b25      	ldr	r3, [pc, #148]	@ (800a294 <HAL_RCC_ClockConfig+0x1ec>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f023 0207 	bic.w	r2, r3, #7
 800a204:	4923      	ldr	r1, [pc, #140]	@ (800a294 <HAL_RCC_ClockConfig+0x1ec>)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	4313      	orrs	r3, r2
 800a20a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a20c:	4b21      	ldr	r3, [pc, #132]	@ (800a294 <HAL_RCC_ClockConfig+0x1ec>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0307 	and.w	r3, r3, #7
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d001      	beq.n	800a21e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e036      	b.n	800a28c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 0304 	and.w	r3, r3, #4
 800a226:	2b00      	cmp	r3, #0
 800a228:	d008      	beq.n	800a23c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a22a:	4b1b      	ldr	r3, [pc, #108]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	4918      	ldr	r1, [pc, #96]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0308 	and.w	r3, r3, #8
 800a244:	2b00      	cmp	r3, #0
 800a246:	d009      	beq.n	800a25c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a248:	4b13      	ldr	r3, [pc, #76]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	4910      	ldr	r1, [pc, #64]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a25c:	f000 f824 	bl	800a2a8 <HAL_RCC_GetSysClockFreq>
 800a260:	4602      	mov	r2, r0
 800a262:	4b0d      	ldr	r3, [pc, #52]	@ (800a298 <HAL_RCC_ClockConfig+0x1f0>)
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	091b      	lsrs	r3, r3, #4
 800a268:	f003 030f 	and.w	r3, r3, #15
 800a26c:	490b      	ldr	r1, [pc, #44]	@ (800a29c <HAL_RCC_ClockConfig+0x1f4>)
 800a26e:	5ccb      	ldrb	r3, [r1, r3]
 800a270:	f003 031f 	and.w	r3, r3, #31
 800a274:	fa22 f303 	lsr.w	r3, r2, r3
 800a278:	4a09      	ldr	r2, [pc, #36]	@ (800a2a0 <HAL_RCC_ClockConfig+0x1f8>)
 800a27a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a27c:	4b09      	ldr	r3, [pc, #36]	@ (800a2a4 <HAL_RCC_ClockConfig+0x1fc>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4618      	mov	r0, r3
 800a282:	f7fc fb25 	bl	80068d0 <HAL_InitTick>
 800a286:	4603      	mov	r3, r0
 800a288:	72fb      	strb	r3, [r7, #11]

  return status;
 800a28a:	7afb      	ldrb	r3, [r7, #11]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	40022000 	.word	0x40022000
 800a298:	40021000 	.word	0x40021000
 800a29c:	0800c7b8 	.word	0x0800c7b8
 800a2a0:	20000000 	.word	0x20000000
 800a2a4:	20000004 	.word	0x20000004

0800a2a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b089      	sub	sp, #36	@ 0x24
 800a2ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	61fb      	str	r3, [r7, #28]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2b6:	4b3e      	ldr	r3, [pc, #248]	@ (800a3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f003 030c 	and.w	r3, r3, #12
 800a2be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a2c0:	4b3b      	ldr	r3, [pc, #236]	@ (800a3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f003 0303 	and.w	r3, r3, #3
 800a2c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d005      	beq.n	800a2dc <HAL_RCC_GetSysClockFreq+0x34>
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b0c      	cmp	r3, #12
 800a2d4:	d121      	bne.n	800a31a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d11e      	bne.n	800a31a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a2dc:	4b34      	ldr	r3, [pc, #208]	@ (800a3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0308 	and.w	r3, r3, #8
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d107      	bne.n	800a2f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a2e8:	4b31      	ldr	r3, [pc, #196]	@ (800a3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800a2ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2ee:	0a1b      	lsrs	r3, r3, #8
 800a2f0:	f003 030f 	and.w	r3, r3, #15
 800a2f4:	61fb      	str	r3, [r7, #28]
 800a2f6:	e005      	b.n	800a304 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a2f8:	4b2d      	ldr	r3, [pc, #180]	@ (800a3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	091b      	lsrs	r3, r3, #4
 800a2fe:	f003 030f 	and.w	r3, r3, #15
 800a302:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a304:	4a2b      	ldr	r2, [pc, #172]	@ (800a3b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a30c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10d      	bne.n	800a330 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a318:	e00a      	b.n	800a330 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d102      	bne.n	800a326 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a320:	4b25      	ldr	r3, [pc, #148]	@ (800a3b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800a322:	61bb      	str	r3, [r7, #24]
 800a324:	e004      	b.n	800a330 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	2b08      	cmp	r3, #8
 800a32a:	d101      	bne.n	800a330 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a32c:	4b23      	ldr	r3, [pc, #140]	@ (800a3bc <HAL_RCC_GetSysClockFreq+0x114>)
 800a32e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	2b0c      	cmp	r3, #12
 800a334:	d134      	bne.n	800a3a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a336:	4b1e      	ldr	r3, [pc, #120]	@ (800a3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	f003 0303 	and.w	r3, r3, #3
 800a33e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	2b02      	cmp	r3, #2
 800a344:	d003      	beq.n	800a34e <HAL_RCC_GetSysClockFreq+0xa6>
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	2b03      	cmp	r3, #3
 800a34a:	d003      	beq.n	800a354 <HAL_RCC_GetSysClockFreq+0xac>
 800a34c:	e005      	b.n	800a35a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a34e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800a350:	617b      	str	r3, [r7, #20]
      break;
 800a352:	e005      	b.n	800a360 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a354:	4b19      	ldr	r3, [pc, #100]	@ (800a3bc <HAL_RCC_GetSysClockFreq+0x114>)
 800a356:	617b      	str	r3, [r7, #20]
      break;
 800a358:	e002      	b.n	800a360 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	617b      	str	r3, [r7, #20]
      break;
 800a35e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a360:	4b13      	ldr	r3, [pc, #76]	@ (800a3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	091b      	lsrs	r3, r3, #4
 800a366:	f003 0307 	and.w	r3, r3, #7
 800a36a:	3301      	adds	r3, #1
 800a36c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a36e:	4b10      	ldr	r3, [pc, #64]	@ (800a3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	0a1b      	lsrs	r3, r3, #8
 800a374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	fb03 f202 	mul.w	r2, r3, r2
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	fbb2 f3f3 	udiv	r3, r2, r3
 800a384:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a386:	4b0a      	ldr	r3, [pc, #40]	@ (800a3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	0e5b      	lsrs	r3, r3, #25
 800a38c:	f003 0303 	and.w	r3, r3, #3
 800a390:	3301      	adds	r3, #1
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a3a0:	69bb      	ldr	r3, [r7, #24]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3724      	adds	r7, #36	@ 0x24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	40021000 	.word	0x40021000
 800a3b4:	0800c7d0 	.word	0x0800c7d0
 800a3b8:	00f42400 	.word	0x00f42400
 800a3bc:	007a1200 	.word	0x007a1200

0800a3c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3c4:	4b03      	ldr	r3, [pc, #12]	@ (800a3d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	20000000 	.word	0x20000000

0800a3d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a3dc:	f7ff fff0 	bl	800a3c0 <HAL_RCC_GetHCLKFreq>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	4b06      	ldr	r3, [pc, #24]	@ (800a3fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	4904      	ldr	r1, [pc, #16]	@ (800a400 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a3ee:	5ccb      	ldrb	r3, [r1, r3]
 800a3f0:	f003 031f 	and.w	r3, r3, #31
 800a3f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	40021000 	.word	0x40021000
 800a400:	0800c7c8 	.word	0x0800c7c8

0800a404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a408:	f7ff ffda 	bl	800a3c0 <HAL_RCC_GetHCLKFreq>
 800a40c:	4602      	mov	r2, r0
 800a40e:	4b06      	ldr	r3, [pc, #24]	@ (800a428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	0adb      	lsrs	r3, r3, #11
 800a414:	f003 0307 	and.w	r3, r3, #7
 800a418:	4904      	ldr	r1, [pc, #16]	@ (800a42c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a41a:	5ccb      	ldrb	r3, [r1, r3]
 800a41c:	f003 031f 	and.w	r3, r3, #31
 800a420:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a424:	4618      	mov	r0, r3
 800a426:	bd80      	pop	{r7, pc}
 800a428:	40021000 	.word	0x40021000
 800a42c:	0800c7c8 	.word	0x0800c7c8

0800a430 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a438:	2300      	movs	r3, #0
 800a43a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a43c:	4b2a      	ldr	r3, [pc, #168]	@ (800a4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a43e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a448:	f7ff f968 	bl	800971c <HAL_PWREx_GetVoltageRange>
 800a44c:	6178      	str	r0, [r7, #20]
 800a44e:	e014      	b.n	800a47a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a450:	4b25      	ldr	r3, [pc, #148]	@ (800a4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a454:	4a24      	ldr	r2, [pc, #144]	@ (800a4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a45a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a45c:	4b22      	ldr	r3, [pc, #136]	@ (800a4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a45e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a468:	f7ff f958 	bl	800971c <HAL_PWREx_GetVoltageRange>
 800a46c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a46e:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a472:	4a1d      	ldr	r2, [pc, #116]	@ (800a4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a478:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a480:	d10b      	bne.n	800a49a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b80      	cmp	r3, #128	@ 0x80
 800a486:	d919      	bls.n	800a4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2ba0      	cmp	r3, #160	@ 0xa0
 800a48c:	d902      	bls.n	800a494 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a48e:	2302      	movs	r3, #2
 800a490:	613b      	str	r3, [r7, #16]
 800a492:	e013      	b.n	800a4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a494:	2301      	movs	r3, #1
 800a496:	613b      	str	r3, [r7, #16]
 800a498:	e010      	b.n	800a4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b80      	cmp	r3, #128	@ 0x80
 800a49e:	d902      	bls.n	800a4a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	613b      	str	r3, [r7, #16]
 800a4a4:	e00a      	b.n	800a4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b80      	cmp	r3, #128	@ 0x80
 800a4aa:	d102      	bne.n	800a4b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	613b      	str	r3, [r7, #16]
 800a4b0:	e004      	b.n	800a4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b70      	cmp	r3, #112	@ 0x70
 800a4b6:	d101      	bne.n	800a4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a4bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a4ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f023 0207 	bic.w	r2, r3, #7
 800a4c4:	4909      	ldr	r1, [pc, #36]	@ (800a4ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a4cc:	4b07      	ldr	r3, [pc, #28]	@ (800a4ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0307 	and.w	r3, r3, #7
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d001      	beq.n	800a4de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e000      	b.n	800a4e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	40021000 	.word	0x40021000
 800a4ec:	40022000 	.word	0x40022000

0800a4f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 809e 	beq.w	800a64a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a50e:	2300      	movs	r3, #0
 800a510:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a512:	4b46      	ldr	r3, [pc, #280]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800a51e:	2301      	movs	r3, #1
 800a520:	e000      	b.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800a522:	2300      	movs	r3, #0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00d      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a528:	4b40      	ldr	r3, [pc, #256]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a52a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a52c:	4a3f      	ldr	r2, [pc, #252]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a52e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a532:	6593      	str	r3, [r2, #88]	@ 0x58
 800a534:	4b3d      	ldr	r3, [pc, #244]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a53c:	60bb      	str	r3, [r7, #8]
 800a53e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a540:	2301      	movs	r3, #1
 800a542:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a544:	4b3a      	ldr	r3, [pc, #232]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a39      	ldr	r2, [pc, #228]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800a54a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a54e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a550:	f7fc fa0e 	bl	8006970 <HAL_GetTick>
 800a554:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a556:	e009      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a558:	f7fc fa0a 	bl	8006970 <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	2b02      	cmp	r3, #2
 800a564:	d902      	bls.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	74fb      	strb	r3, [r7, #19]
        break;
 800a56a:	e005      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a56c:	4b30      	ldr	r3, [pc, #192]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a574:	2b00      	cmp	r3, #0
 800a576:	d0ef      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800a578:	7cfb      	ldrb	r3, [r7, #19]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d15a      	bne.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a57e:	4b2b      	ldr	r3, [pc, #172]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a584:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a588:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d01e      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	429a      	cmp	r2, r3
 800a598:	d019      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a59a:	4b24      	ldr	r3, [pc, #144]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5a6:	4b21      	ldr	r3, [pc, #132]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ac:	4a1f      	ldr	r2, [pc, #124]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a5ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5bc:	4a1b      	ldr	r2, [pc, #108]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a5be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a5c6:	4a19      	ldr	r2, [pc, #100]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d016      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5d8:	f7fc f9ca 	bl	8006970 <HAL_GetTick>
 800a5dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5de:	e00b      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5e0:	f7fc f9c6 	bl	8006970 <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d902      	bls.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	74fb      	strb	r3, [r7, #19]
            break;
 800a5f6:	e006      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5fe:	f003 0302 	and.w	r3, r3, #2
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0ec      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800a606:	7cfb      	ldrb	r3, [r7, #19]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10b      	bne.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a60c:	4b07      	ldr	r3, [pc, #28]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a612:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61a:	4904      	ldr	r1, [pc, #16]	@ (800a62c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800a61c:	4313      	orrs	r3, r2
 800a61e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a622:	e009      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a624:	7cfb      	ldrb	r3, [r7, #19]
 800a626:	74bb      	strb	r3, [r7, #18]
 800a628:	e006      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a62a:	bf00      	nop
 800a62c:	40021000 	.word	0x40021000
 800a630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a634:	7cfb      	ldrb	r3, [r7, #19]
 800a636:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a638:	7c7b      	ldrb	r3, [r7, #17]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d105      	bne.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a63e:	4b6e      	ldr	r3, [pc, #440]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a642:	4a6d      	ldr	r2, [pc, #436]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a648:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a656:	4b68      	ldr	r3, [pc, #416]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a65c:	f023 0203 	bic.w	r2, r3, #3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	4964      	ldr	r1, [pc, #400]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a666:	4313      	orrs	r3, r2
 800a668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0302 	and.w	r3, r3, #2
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00a      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a678:	4b5f      	ldr	r3, [pc, #380]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a67e:	f023 020c 	bic.w	r2, r3, #12
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	495c      	ldr	r1, [pc, #368]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a688:	4313      	orrs	r3, r2
 800a68a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0304 	and.w	r3, r3, #4
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a69a:	4b57      	ldr	r3, [pc, #348]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	4953      	ldr	r1, [pc, #332]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0320 	and.w	r3, r3, #32
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6bc:	4b4e      	ldr	r3, [pc, #312]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	494b      	ldr	r1, [pc, #300]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00a      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6de:	4b46      	ldr	r3, [pc, #280]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	4942      	ldr	r1, [pc, #264]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00a      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a700:	4b3d      	ldr	r3, [pc, #244]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a706:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70e:	493a      	ldr	r1, [pc, #232]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a710:	4313      	orrs	r3, r2
 800a712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00a      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a722:	4b35      	ldr	r3, [pc, #212]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a728:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	4931      	ldr	r1, [pc, #196]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a732:	4313      	orrs	r3, r2
 800a734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00a      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a744:	4b2c      	ldr	r3, [pc, #176]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a74a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	4929      	ldr	r1, [pc, #164]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a754:	4313      	orrs	r3, r2
 800a756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a766:	4b24      	ldr	r3, [pc, #144]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a76c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	4920      	ldr	r1, [pc, #128]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a776:	4313      	orrs	r3, r2
 800a778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a784:	2b00      	cmp	r3, #0
 800a786:	d015      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a788:	4b1b      	ldr	r3, [pc, #108]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a78e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a796:	4918      	ldr	r1, [pc, #96]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7a6:	d105      	bne.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7a8:	4b13      	ldr	r3, [pc, #76]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	4a12      	ldr	r2, [pc, #72]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a7ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d015      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a7c0:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ce:	490a      	ldr	r1, [pc, #40]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7de:	d105      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7e0:	4b05      	ldr	r3, [pc, #20]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	4a04      	ldr	r2, [pc, #16]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800a7e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a7ec:	7cbb      	ldrb	r3, [r7, #18]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	40021000 	.word	0x40021000

0800a7fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e049      	b.n	800a8a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d106      	bne.n	800a828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7fb ff02 	bl	800662c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	3304      	adds	r3, #4
 800a838:	4619      	mov	r1, r3
 800a83a:	4610      	mov	r0, r2
 800a83c:	f000 fa82 	bl	800ad44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
	...

0800a8ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d001      	beq.n	800a8c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e03b      	b.n	800a93c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68da      	ldr	r2, [r3, #12]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f042 0201 	orr.w	r2, r2, #1
 800a8da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a19      	ldr	r2, [pc, #100]	@ (800a948 <HAL_TIM_Base_Start_IT+0x9c>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d009      	beq.n	800a8fa <HAL_TIM_Base_Start_IT+0x4e>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ee:	d004      	beq.n	800a8fa <HAL_TIM_Base_Start_IT+0x4e>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a15      	ldr	r2, [pc, #84]	@ (800a94c <HAL_TIM_Base_Start_IT+0xa0>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d115      	bne.n	800a926 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	689a      	ldr	r2, [r3, #8]
 800a900:	4b13      	ldr	r3, [pc, #76]	@ (800a950 <HAL_TIM_Base_Start_IT+0xa4>)
 800a902:	4013      	ands	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2b06      	cmp	r3, #6
 800a90a:	d015      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x8c>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a912:	d011      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f042 0201 	orr.w	r2, r2, #1
 800a922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a924:	e008      	b.n	800a938 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f042 0201 	orr.w	r2, r2, #1
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	e000      	b.n	800a93a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a938:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	40012c00 	.word	0x40012c00
 800a94c:	40014000 	.word	0x40014000
 800a950:	00010007 	.word	0x00010007

0800a954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f003 0302 	and.w	r3, r3, #2
 800a972:	2b00      	cmp	r3, #0
 800a974:	d020      	beq.n	800a9b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d01b      	beq.n	800a9b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f06f 0202 	mvn.w	r2, #2
 800a988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	f003 0303 	and.w	r3, r3, #3
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d003      	beq.n	800a9a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f9b2 	bl	800ad08 <HAL_TIM_IC_CaptureCallback>
 800a9a4:	e005      	b.n	800a9b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f9a4 	bl	800acf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f9b5 	bl	800ad1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f003 0304 	and.w	r3, r3, #4
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d020      	beq.n	800aa04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d01b      	beq.n	800aa04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f06f 0204 	mvn.w	r2, #4
 800a9d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f98c 	bl	800ad08 <HAL_TIM_IC_CaptureCallback>
 800a9f0:	e005      	b.n	800a9fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f97e 	bl	800acf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f98f 	bl	800ad1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	f003 0308 	and.w	r3, r3, #8
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d020      	beq.n	800aa50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f003 0308 	and.w	r3, r3, #8
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d01b      	beq.n	800aa50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f06f 0208 	mvn.w	r2, #8
 800aa20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2204      	movs	r2, #4
 800aa26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f966 	bl	800ad08 <HAL_TIM_IC_CaptureCallback>
 800aa3c:	e005      	b.n	800aa4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f958 	bl	800acf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f969 	bl	800ad1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f003 0310 	and.w	r3, r3, #16
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d020      	beq.n	800aa9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f003 0310 	and.w	r3, r3, #16
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d01b      	beq.n	800aa9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f06f 0210 	mvn.w	r2, #16
 800aa6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2208      	movs	r2, #8
 800aa72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	69db      	ldr	r3, [r3, #28]
 800aa7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f940 	bl	800ad08 <HAL_TIM_IC_CaptureCallback>
 800aa88:	e005      	b.n	800aa96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f932 	bl	800acf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f943 	bl	800ad1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00c      	beq.n	800aac0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d007      	beq.n	800aac0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f06f 0201 	mvn.w	r2, #1
 800aab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7fb fc0e 	bl	80062dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00c      	beq.n	800aaee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d007      	beq.n	800aaee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 faa5 	bl	800b038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00c      	beq.n	800ab12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d007      	beq.n	800ab12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ab0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fa9d 	bl	800b04c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00c      	beq.n	800ab36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d007      	beq.n	800ab36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f8fd 	bl	800ad30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f003 0320 	and.w	r3, r3, #32
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00c      	beq.n	800ab5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f003 0320 	and.w	r3, r3, #32
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d007      	beq.n	800ab5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f06f 0220 	mvn.w	r2, #32
 800ab52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fa65 	bl	800b024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab5a:	bf00      	nop
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d101      	bne.n	800ab7e <HAL_TIM_ConfigClockSource+0x1c>
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	e0b6      	b.n	800acec <HAL_TIM_ConfigClockSource+0x18a>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab9c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aba0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aba8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abba:	d03e      	beq.n	800ac3a <HAL_TIM_ConfigClockSource+0xd8>
 800abbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abc0:	f200 8087 	bhi.w	800acd2 <HAL_TIM_ConfigClockSource+0x170>
 800abc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abc8:	f000 8086 	beq.w	800acd8 <HAL_TIM_ConfigClockSource+0x176>
 800abcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abd0:	d87f      	bhi.n	800acd2 <HAL_TIM_ConfigClockSource+0x170>
 800abd2:	2b70      	cmp	r3, #112	@ 0x70
 800abd4:	d01a      	beq.n	800ac0c <HAL_TIM_ConfigClockSource+0xaa>
 800abd6:	2b70      	cmp	r3, #112	@ 0x70
 800abd8:	d87b      	bhi.n	800acd2 <HAL_TIM_ConfigClockSource+0x170>
 800abda:	2b60      	cmp	r3, #96	@ 0x60
 800abdc:	d050      	beq.n	800ac80 <HAL_TIM_ConfigClockSource+0x11e>
 800abde:	2b60      	cmp	r3, #96	@ 0x60
 800abe0:	d877      	bhi.n	800acd2 <HAL_TIM_ConfigClockSource+0x170>
 800abe2:	2b50      	cmp	r3, #80	@ 0x50
 800abe4:	d03c      	beq.n	800ac60 <HAL_TIM_ConfigClockSource+0xfe>
 800abe6:	2b50      	cmp	r3, #80	@ 0x50
 800abe8:	d873      	bhi.n	800acd2 <HAL_TIM_ConfigClockSource+0x170>
 800abea:	2b40      	cmp	r3, #64	@ 0x40
 800abec:	d058      	beq.n	800aca0 <HAL_TIM_ConfigClockSource+0x13e>
 800abee:	2b40      	cmp	r3, #64	@ 0x40
 800abf0:	d86f      	bhi.n	800acd2 <HAL_TIM_ConfigClockSource+0x170>
 800abf2:	2b30      	cmp	r3, #48	@ 0x30
 800abf4:	d064      	beq.n	800acc0 <HAL_TIM_ConfigClockSource+0x15e>
 800abf6:	2b30      	cmp	r3, #48	@ 0x30
 800abf8:	d86b      	bhi.n	800acd2 <HAL_TIM_ConfigClockSource+0x170>
 800abfa:	2b20      	cmp	r3, #32
 800abfc:	d060      	beq.n	800acc0 <HAL_TIM_ConfigClockSource+0x15e>
 800abfe:	2b20      	cmp	r3, #32
 800ac00:	d867      	bhi.n	800acd2 <HAL_TIM_ConfigClockSource+0x170>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d05c      	beq.n	800acc0 <HAL_TIM_ConfigClockSource+0x15e>
 800ac06:	2b10      	cmp	r3, #16
 800ac08:	d05a      	beq.n	800acc0 <HAL_TIM_ConfigClockSource+0x15e>
 800ac0a:	e062      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac1c:	f000 f97c 	bl	800af18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ac2e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	609a      	str	r2, [r3, #8]
      break;
 800ac38:	e04f      	b.n	800acda <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac4a:	f000 f965 	bl	800af18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ac5c:	609a      	str	r2, [r3, #8]
      break;
 800ac5e:	e03c      	b.n	800acda <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	f000 f8d9 	bl	800ae24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2150      	movs	r1, #80	@ 0x50
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 f932 	bl	800aee2 <TIM_ITRx_SetConfig>
      break;
 800ac7e:	e02c      	b.n	800acda <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	f000 f8f8 	bl	800ae82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2160      	movs	r1, #96	@ 0x60
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 f922 	bl	800aee2 <TIM_ITRx_SetConfig>
      break;
 800ac9e:	e01c      	b.n	800acda <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acac:	461a      	mov	r2, r3
 800acae:	f000 f8b9 	bl	800ae24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2140      	movs	r1, #64	@ 0x40
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 f912 	bl	800aee2 <TIM_ITRx_SetConfig>
      break;
 800acbe:	e00c      	b.n	800acda <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4619      	mov	r1, r3
 800acca:	4610      	mov	r0, r2
 800accc:	f000 f909 	bl	800aee2 <TIM_ITRx_SetConfig>
      break;
 800acd0:	e003      	b.n	800acda <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	73fb      	strb	r3, [r7, #15]
      break;
 800acd6:	e000      	b.n	800acda <HAL_TIM_ConfigClockSource+0x178>
      break;
 800acd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800acea:	7bfb      	ldrb	r3, [r7, #15]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a30      	ldr	r2, [pc, #192]	@ (800ae18 <TIM_Base_SetConfig+0xd4>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d003      	beq.n	800ad64 <TIM_Base_SetConfig+0x20>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad62:	d108      	bne.n	800ad76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a27      	ldr	r2, [pc, #156]	@ (800ae18 <TIM_Base_SetConfig+0xd4>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d00b      	beq.n	800ad96 <TIM_Base_SetConfig+0x52>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad84:	d007      	beq.n	800ad96 <TIM_Base_SetConfig+0x52>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a24      	ldr	r2, [pc, #144]	@ (800ae1c <TIM_Base_SetConfig+0xd8>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d003      	beq.n	800ad96 <TIM_Base_SetConfig+0x52>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a23      	ldr	r2, [pc, #140]	@ (800ae20 <TIM_Base_SetConfig+0xdc>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d108      	bne.n	800ada8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	695b      	ldr	r3, [r3, #20]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a12      	ldr	r2, [pc, #72]	@ (800ae18 <TIM_Base_SetConfig+0xd4>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d007      	beq.n	800ade4 <TIM_Base_SetConfig+0xa0>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a11      	ldr	r2, [pc, #68]	@ (800ae1c <TIM_Base_SetConfig+0xd8>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d003      	beq.n	800ade4 <TIM_Base_SetConfig+0xa0>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a10      	ldr	r2, [pc, #64]	@ (800ae20 <TIM_Base_SetConfig+0xdc>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d103      	bne.n	800adec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	691a      	ldr	r2, [r3, #16]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	f003 0301 	and.w	r3, r3, #1
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d105      	bne.n	800ae0a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	f023 0201 	bic.w	r2, r3, #1
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	611a      	str	r2, [r3, #16]
  }
}
 800ae0a:	bf00      	nop
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	40012c00 	.word	0x40012c00
 800ae1c:	40014000 	.word	0x40014000
 800ae20:	40014400 	.word	0x40014400

0800ae24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b087      	sub	sp, #28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
 800ae34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	f023 0201 	bic.w	r2, r3, #1
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	011b      	lsls	r3, r3, #4
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f023 030a 	bic.w	r3, r3, #10
 800ae60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	621a      	str	r2, [r3, #32]
}
 800ae76:	bf00      	nop
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b087      	sub	sp, #28
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	60f8      	str	r0, [r7, #12]
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	f023 0210 	bic.w	r2, r3, #16
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aeac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	031b      	lsls	r3, r3, #12
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aebe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	011b      	lsls	r3, r3, #4
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	621a      	str	r2, [r3, #32]
}
 800aed6:	bf00      	nop
 800aed8:	371c      	adds	r7, #28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr

0800aee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aee2:	b480      	push	{r7}
 800aee4:	b085      	sub	sp, #20
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4313      	orrs	r3, r2
 800af00:	f043 0307 	orr.w	r3, r3, #7
 800af04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	609a      	str	r2, [r3, #8]
}
 800af0c:	bf00      	nop
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	021a      	lsls	r2, r3, #8
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	431a      	orrs	r2, r3
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	4313      	orrs	r3, r2
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	4313      	orrs	r3, r2
 800af44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	609a      	str	r2, [r3, #8]
}
 800af4c:	bf00      	nop
 800af4e:	371c      	adds	r7, #28
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d101      	bne.n	800af70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af6c:	2302      	movs	r3, #2
 800af6e:	e04f      	b.n	800b010 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2202      	movs	r2, #2
 800af7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a21      	ldr	r2, [pc, #132]	@ (800b01c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d108      	bne.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800afa0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a14      	ldr	r2, [pc, #80]	@ (800b01c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d009      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afd8:	d004      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a10      	ldr	r2, [pc, #64]	@ (800b020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d10c      	bne.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	40012c00 	.word	0x40012c00
 800b020:	40014000 	.word	0x40014000

0800b024 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b02c:	bf00      	nop
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e040      	b.n	800b0f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b076:	2b00      	cmp	r3, #0
 800b078:	d106      	bne.n	800b088 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7fb fb26 	bl	80066d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2224      	movs	r2, #36	@ 0x24
 800b08c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f022 0201 	bic.w	r2, r2, #1
 800b09c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d002      	beq.n	800b0ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fecc 	bl	800be44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fc6f 	bl	800b990 <UART_SetConfig>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d101      	bne.n	800b0bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e01b      	b.n	800b0f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685a      	ldr	r2, [r3, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b0ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	689a      	ldr	r2, [r3, #8]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b0da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f042 0201 	orr.w	r2, r2, #1
 800b0ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 ff4b 	bl	800bf88 <UART_CheckIdleState>
 800b0f2:	4603      	mov	r3, r0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b08a      	sub	sp, #40	@ 0x28
 800b100:	af02      	add	r7, sp, #8
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	603b      	str	r3, [r7, #0]
 800b108:	4613      	mov	r3, r2
 800b10a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b110:	2b20      	cmp	r3, #32
 800b112:	d177      	bne.n	800b204 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d002      	beq.n	800b120 <HAL_UART_Transmit+0x24>
 800b11a:	88fb      	ldrh	r3, [r7, #6]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	e070      	b.n	800b206 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2221      	movs	r2, #33	@ 0x21
 800b130:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b132:	f7fb fc1d 	bl	8006970 <HAL_GetTick>
 800b136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	88fa      	ldrh	r2, [r7, #6]
 800b13c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	88fa      	ldrh	r2, [r7, #6]
 800b144:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b150:	d108      	bne.n	800b164 <HAL_UART_Transmit+0x68>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d104      	bne.n	800b164 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b15a:	2300      	movs	r3, #0
 800b15c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	61bb      	str	r3, [r7, #24]
 800b162:	e003      	b.n	800b16c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b168:	2300      	movs	r3, #0
 800b16a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b16c:	e02f      	b.n	800b1ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2200      	movs	r2, #0
 800b176:	2180      	movs	r1, #128	@ 0x80
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f000 ffad 	bl	800c0d8 <UART_WaitOnFlagUntilTimeout>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d004      	beq.n	800b18e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2220      	movs	r2, #32
 800b188:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e03b      	b.n	800b206 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10b      	bne.n	800b1ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	881a      	ldrh	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1a0:	b292      	uxth	r2, r2
 800b1a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	3302      	adds	r3, #2
 800b1a8:	61bb      	str	r3, [r7, #24]
 800b1aa:	e007      	b.n	800b1bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	781a      	ldrb	r2, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1c9      	bne.n	800b16e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2140      	movs	r1, #64	@ 0x40
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f000 ff77 	bl	800c0d8 <UART_WaitOnFlagUntilTimeout>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d004      	beq.n	800b1fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2220      	movs	r2, #32
 800b1f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	e005      	b.n	800b206 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2220      	movs	r2, #32
 800b1fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	e000      	b.n	800b206 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b204:	2302      	movs	r3, #2
  }
}
 800b206:	4618      	mov	r0, r3
 800b208:	3720      	adds	r7, #32
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b090      	sub	sp, #64	@ 0x40
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b222:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b22e:	2b80      	cmp	r3, #128	@ 0x80
 800b230:	d139      	bne.n	800b2a6 <HAL_UART_DMAStop+0x98>
 800b232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b234:	2b21      	cmp	r3, #33	@ 0x21
 800b236:	d136      	bne.n	800b2a6 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3308      	adds	r3, #8
 800b23e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	e853 3f00 	ldrex	r3, [r3]
 800b246:	61fb      	str	r3, [r7, #28]
   return(result);
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b24e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3308      	adds	r3, #8
 800b256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b25a:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b25e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b260:	e841 2300 	strex	r3, r2, [r1]
 800b264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1e5      	bne.n	800b238 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b270:	2b00      	cmp	r3, #0
 800b272:	d015      	beq.n	800b2a0 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fd f833 	bl	80082e4 <HAL_DMA_Abort>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00d      	beq.n	800b2a0 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fd f959 	bl	8008540 <HAL_DMA_GetError>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b20      	cmp	r3, #32
 800b292:	d105      	bne.n	800b2a0 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2210      	movs	r2, #16
 800b298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e044      	b.n	800b32a <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f001 f827 	bl	800c2f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2b0:	2b40      	cmp	r3, #64	@ 0x40
 800b2b2:	d139      	bne.n	800b328 <HAL_UART_DMAStop+0x11a>
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b6:	2b22      	cmp	r3, #34	@ 0x22
 800b2b8:	d136      	bne.n	800b328 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3308      	adds	r3, #8
 800b2c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	e853 3f00 	ldrex	r3, [r3]
 800b2c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3308      	adds	r3, #8
 800b2d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2da:	61ba      	str	r2, [r7, #24]
 800b2dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2de:	6979      	ldr	r1, [r7, #20]
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	e841 2300 	strex	r3, r2, [r1]
 800b2e6:	613b      	str	r3, [r7, #16]
   return(result);
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1e5      	bne.n	800b2ba <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d015      	beq.n	800b322 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fc fff2 	bl	80082e4 <HAL_DMA_Abort>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00d      	beq.n	800b322 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fd f918 	bl	8008540 <HAL_DMA_GetError>
 800b310:	4603      	mov	r3, r0
 800b312:	2b20      	cmp	r3, #32
 800b314:	d105      	bne.n	800b322 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2210      	movs	r2, #16
 800b31a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b31e:	2303      	movs	r3, #3
 800b320:	e003      	b.n	800b32a <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 f80c 	bl	800c340 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3740      	adds	r7, #64	@ 0x40
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b0ba      	sub	sp, #232	@ 0xe8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b35a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b35e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b362:	4013      	ands	r3, r2
 800b364:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b368:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d115      	bne.n	800b39c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b374:	f003 0320 	and.w	r3, r3, #32
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00f      	beq.n	800b39c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b380:	f003 0320 	and.w	r3, r3, #32
 800b384:	2b00      	cmp	r3, #0
 800b386:	d009      	beq.n	800b39c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 82ca 	beq.w	800b926 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	4798      	blx	r3
      }
      return;
 800b39a:	e2c4      	b.n	800b926 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b39c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f000 8117 	beq.w	800b5d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b3a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b3b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b3b6:	4b85      	ldr	r3, [pc, #532]	@ (800b5cc <HAL_UART_IRQHandler+0x298>)
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 810a 	beq.w	800b5d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3c4:	f003 0301 	and.w	r3, r3, #1
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d011      	beq.n	800b3f0 <HAL_UART_IRQHandler+0xbc>
 800b3cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00b      	beq.n	800b3f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3e6:	f043 0201 	orr.w	r2, r3, #1
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d011      	beq.n	800b420 <HAL_UART_IRQHandler+0xec>
 800b3fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2202      	movs	r2, #2
 800b40e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b416:	f043 0204 	orr.w	r2, r3, #4
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d011      	beq.n	800b450 <HAL_UART_IRQHandler+0x11c>
 800b42c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00b      	beq.n	800b450 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2204      	movs	r2, #4
 800b43e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b446:	f043 0202 	orr.w	r2, r3, #2
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b454:	f003 0308 	and.w	r3, r3, #8
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d017      	beq.n	800b48c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b460:	f003 0320 	and.w	r3, r3, #32
 800b464:	2b00      	cmp	r3, #0
 800b466:	d105      	bne.n	800b474 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b46c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00b      	beq.n	800b48c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2208      	movs	r2, #8
 800b47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b482:	f043 0208 	orr.w	r2, r3, #8
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b494:	2b00      	cmp	r3, #0
 800b496:	d012      	beq.n	800b4be <HAL_UART_IRQHandler+0x18a>
 800b498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b49c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00c      	beq.n	800b4be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4b4:	f043 0220 	orr.w	r2, r3, #32
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 8230 	beq.w	800b92a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4ce:	f003 0320 	and.w	r3, r3, #32
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00d      	beq.n	800b4f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b4d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4da:	f003 0320 	and.w	r3, r3, #32
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d007      	beq.n	800b4f2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d003      	beq.n	800b4f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b506:	2b40      	cmp	r3, #64	@ 0x40
 800b508:	d005      	beq.n	800b516 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b50a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b50e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b512:	2b00      	cmp	r3, #0
 800b514:	d04f      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 ff12 	bl	800c340 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b526:	2b40      	cmp	r3, #64	@ 0x40
 800b528:	d141      	bne.n	800b5ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3308      	adds	r3, #8
 800b530:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b534:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b538:	e853 3f00 	ldrex	r3, [r3]
 800b53c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b540:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b548:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3308      	adds	r3, #8
 800b552:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b556:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b55a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b562:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b566:	e841 2300 	strex	r3, r2, [r1]
 800b56a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b56e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1d9      	bne.n	800b52a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d013      	beq.n	800b5a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b582:	4a13      	ldr	r2, [pc, #76]	@ (800b5d0 <HAL_UART_IRQHandler+0x29c>)
 800b584:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fc fee8 	bl	8008360 <HAL_DMA_Abort_IT>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d017      	beq.n	800b5c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5a4:	e00f      	b.n	800b5c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f9e8 	bl	800b97c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5ac:	e00b      	b.n	800b5c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f9e4 	bl	800b97c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5b4:	e007      	b.n	800b5c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f9e0 	bl	800b97c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b5c4:	e1b1      	b.n	800b92a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5c6:	bf00      	nop
    return;
 800b5c8:	e1af      	b.n	800b92a <HAL_UART_IRQHandler+0x5f6>
 800b5ca:	bf00      	nop
 800b5cc:	04000120 	.word	0x04000120
 800b5d0:	0800c5f1 	.word	0x0800c5f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	f040 816a 	bne.w	800b8b2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5e2:	f003 0310 	and.w	r3, r3, #16
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f000 8163 	beq.w	800b8b2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5f0:	f003 0310 	and.w	r3, r3, #16
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 815c 	beq.w	800b8b2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2210      	movs	r2, #16
 800b600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b60c:	2b40      	cmp	r3, #64	@ 0x40
 800b60e:	f040 80d4 	bne.w	800b7ba <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b61e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 80ad 	beq.w	800b782 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b62e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b632:	429a      	cmp	r2, r3
 800b634:	f080 80a5 	bcs.w	800b782 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b63e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 0320 	and.w	r3, r3, #32
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f040 8086 	bne.w	800b760 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b660:	e853 3f00 	ldrex	r3, [r3]
 800b664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b66c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	461a      	mov	r2, r3
 800b67a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b67e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b682:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b686:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b68a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b68e:	e841 2300 	strex	r3, r2, [r1]
 800b692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1da      	bne.n	800b654 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3308      	adds	r3, #8
 800b6a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6a8:	e853 3f00 	ldrex	r3, [r3]
 800b6ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b6ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6b0:	f023 0301 	bic.w	r3, r3, #1
 800b6b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	3308      	adds	r3, #8
 800b6be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b6c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b6c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b6ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b6ce:	e841 2300 	strex	r3, r2, [r1]
 800b6d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b6d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1e1      	bne.n	800b69e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	3308      	adds	r3, #8
 800b6e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6e4:	e853 3f00 	ldrex	r3, [r3]
 800b6e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b6ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b6fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b700:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b702:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b704:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b706:	e841 2300 	strex	r3, r2, [r1]
 800b70a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b70c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1e3      	bne.n	800b6da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2220      	movs	r2, #32
 800b716:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b728:	e853 3f00 	ldrex	r3, [r3]
 800b72c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b72e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b730:	f023 0310 	bic.w	r3, r3, #16
 800b734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	461a      	mov	r2, r3
 800b73e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b742:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b744:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b746:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b74a:	e841 2300 	strex	r3, r2, [r1]
 800b74e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1e4      	bne.n	800b720 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fc fdc2 	bl	80082e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2202      	movs	r2, #2
 800b764:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b772:	b29b      	uxth	r3, r3
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	b29b      	uxth	r3, r3
 800b778:	4619      	mov	r1, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7fa fd1a 	bl	80061b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b780:	e0d5      	b.n	800b92e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b788:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b78c:	429a      	cmp	r2, r3
 800b78e:	f040 80ce 	bne.w	800b92e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f003 0320 	and.w	r3, r3, #32
 800b79e:	2b20      	cmp	r3, #32
 800b7a0:	f040 80c5 	bne.w	800b92e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7fa fcfe 	bl	80061b4 <HAL_UARTEx_RxEventCallback>
      return;
 800b7b8:	e0b9      	b.n	800b92e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 80ab 	beq.w	800b932 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800b7dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 80a6 	beq.w	800b932 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ee:	e853 3f00 	ldrex	r3, [r3]
 800b7f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b808:	647b      	str	r3, [r7, #68]	@ 0x44
 800b80a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b80e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e4      	bne.n	800b7e6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3308      	adds	r3, #8
 800b822:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b826:	e853 3f00 	ldrex	r3, [r3]
 800b82a:	623b      	str	r3, [r7, #32]
   return(result);
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	f023 0301 	bic.w	r3, r3, #1
 800b832:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3308      	adds	r3, #8
 800b83c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b840:	633a      	str	r2, [r7, #48]	@ 0x30
 800b842:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b848:	e841 2300 	strex	r3, r2, [r1]
 800b84c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1e3      	bne.n	800b81c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2220      	movs	r2, #32
 800b858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	60fb      	str	r3, [r7, #12]
   return(result);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f023 0310 	bic.w	r3, r3, #16
 800b87c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	461a      	mov	r2, r3
 800b886:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b88a:	61fb      	str	r3, [r7, #28]
 800b88c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	69b9      	ldr	r1, [r7, #24]
 800b890:	69fa      	ldr	r2, [r7, #28]
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	617b      	str	r3, [r7, #20]
   return(result);
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e4      	bne.n	800b868 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7fa fc82 	bl	80061b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8b0:	e03f      	b.n	800b932 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00e      	beq.n	800b8dc <HAL_UART_IRQHandler+0x5a8>
 800b8be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d008      	beq.n	800b8dc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b8d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fecb 	bl	800c670 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8da:	e02d      	b.n	800b938 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00e      	beq.n	800b906 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d008      	beq.n	800b906 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d01c      	beq.n	800b936 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	4798      	blx	r3
    }
    return;
 800b904:	e017      	b.n	800b936 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b90a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d012      	beq.n	800b938 <HAL_UART_IRQHandler+0x604>
 800b912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00c      	beq.n	800b938 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fe7c 	bl	800c61c <UART_EndTransmit_IT>
    return;
 800b924:	e008      	b.n	800b938 <HAL_UART_IRQHandler+0x604>
      return;
 800b926:	bf00      	nop
 800b928:	e006      	b.n	800b938 <HAL_UART_IRQHandler+0x604>
    return;
 800b92a:	bf00      	nop
 800b92c:	e004      	b.n	800b938 <HAL_UART_IRQHandler+0x604>
      return;
 800b92e:	bf00      	nop
 800b930:	e002      	b.n	800b938 <HAL_UART_IRQHandler+0x604>
      return;
 800b932:	bf00      	nop
 800b934:	e000      	b.n	800b938 <HAL_UART_IRQHandler+0x604>
    return;
 800b936:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b938:	37e8      	adds	r7, #232	@ 0xe8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop

0800b940 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b948:	bf00      	nop
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b994:	b08a      	sub	sp, #40	@ 0x28
 800b996:	af00      	add	r7, sp, #0
 800b998:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	689a      	ldr	r2, [r3, #8]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	431a      	orrs	r2, r3
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	431a      	orrs	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	69db      	ldr	r3, [r3, #28]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	4b9e      	ldr	r3, [pc, #632]	@ (800bc38 <UART_SetConfig+0x2a8>)
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	6812      	ldr	r2, [r2, #0]
 800b9c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	68da      	ldr	r2, [r3, #12]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a93      	ldr	r2, [pc, #588]	@ (800bc3c <UART_SetConfig+0x2ac>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d004      	beq.n	800b9fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a8a      	ldr	r2, [pc, #552]	@ (800bc40 <UART_SetConfig+0x2b0>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d126      	bne.n	800ba68 <UART_SetConfig+0xd8>
 800ba1a:	4b8a      	ldr	r3, [pc, #552]	@ (800bc44 <UART_SetConfig+0x2b4>)
 800ba1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba20:	f003 0303 	and.w	r3, r3, #3
 800ba24:	2b03      	cmp	r3, #3
 800ba26:	d81b      	bhi.n	800ba60 <UART_SetConfig+0xd0>
 800ba28:	a201      	add	r2, pc, #4	@ (adr r2, 800ba30 <UART_SetConfig+0xa0>)
 800ba2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2e:	bf00      	nop
 800ba30:	0800ba41 	.word	0x0800ba41
 800ba34:	0800ba51 	.word	0x0800ba51
 800ba38:	0800ba49 	.word	0x0800ba49
 800ba3c:	0800ba59 	.word	0x0800ba59
 800ba40:	2301      	movs	r3, #1
 800ba42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ba46:	e0ab      	b.n	800bba0 <UART_SetConfig+0x210>
 800ba48:	2302      	movs	r3, #2
 800ba4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ba4e:	e0a7      	b.n	800bba0 <UART_SetConfig+0x210>
 800ba50:	2304      	movs	r3, #4
 800ba52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ba56:	e0a3      	b.n	800bba0 <UART_SetConfig+0x210>
 800ba58:	2308      	movs	r3, #8
 800ba5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ba5e:	e09f      	b.n	800bba0 <UART_SetConfig+0x210>
 800ba60:	2310      	movs	r3, #16
 800ba62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ba66:	e09b      	b.n	800bba0 <UART_SetConfig+0x210>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a76      	ldr	r2, [pc, #472]	@ (800bc48 <UART_SetConfig+0x2b8>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d138      	bne.n	800bae4 <UART_SetConfig+0x154>
 800ba72:	4b74      	ldr	r3, [pc, #464]	@ (800bc44 <UART_SetConfig+0x2b4>)
 800ba74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba78:	f003 030c 	and.w	r3, r3, #12
 800ba7c:	2b0c      	cmp	r3, #12
 800ba7e:	d82d      	bhi.n	800badc <UART_SetConfig+0x14c>
 800ba80:	a201      	add	r2, pc, #4	@ (adr r2, 800ba88 <UART_SetConfig+0xf8>)
 800ba82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba86:	bf00      	nop
 800ba88:	0800babd 	.word	0x0800babd
 800ba8c:	0800badd 	.word	0x0800badd
 800ba90:	0800badd 	.word	0x0800badd
 800ba94:	0800badd 	.word	0x0800badd
 800ba98:	0800bacd 	.word	0x0800bacd
 800ba9c:	0800badd 	.word	0x0800badd
 800baa0:	0800badd 	.word	0x0800badd
 800baa4:	0800badd 	.word	0x0800badd
 800baa8:	0800bac5 	.word	0x0800bac5
 800baac:	0800badd 	.word	0x0800badd
 800bab0:	0800badd 	.word	0x0800badd
 800bab4:	0800badd 	.word	0x0800badd
 800bab8:	0800bad5 	.word	0x0800bad5
 800babc:	2300      	movs	r3, #0
 800babe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bac2:	e06d      	b.n	800bba0 <UART_SetConfig+0x210>
 800bac4:	2302      	movs	r3, #2
 800bac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800baca:	e069      	b.n	800bba0 <UART_SetConfig+0x210>
 800bacc:	2304      	movs	r3, #4
 800bace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bad2:	e065      	b.n	800bba0 <UART_SetConfig+0x210>
 800bad4:	2308      	movs	r3, #8
 800bad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bada:	e061      	b.n	800bba0 <UART_SetConfig+0x210>
 800badc:	2310      	movs	r3, #16
 800bade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bae2:	e05d      	b.n	800bba0 <UART_SetConfig+0x210>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a58      	ldr	r2, [pc, #352]	@ (800bc4c <UART_SetConfig+0x2bc>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d125      	bne.n	800bb3a <UART_SetConfig+0x1aa>
 800baee:	4b55      	ldr	r3, [pc, #340]	@ (800bc44 <UART_SetConfig+0x2b4>)
 800baf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800baf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800baf8:	2b30      	cmp	r3, #48	@ 0x30
 800bafa:	d016      	beq.n	800bb2a <UART_SetConfig+0x19a>
 800bafc:	2b30      	cmp	r3, #48	@ 0x30
 800bafe:	d818      	bhi.n	800bb32 <UART_SetConfig+0x1a2>
 800bb00:	2b20      	cmp	r3, #32
 800bb02:	d00a      	beq.n	800bb1a <UART_SetConfig+0x18a>
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	d814      	bhi.n	800bb32 <UART_SetConfig+0x1a2>
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <UART_SetConfig+0x182>
 800bb0c:	2b10      	cmp	r3, #16
 800bb0e:	d008      	beq.n	800bb22 <UART_SetConfig+0x192>
 800bb10:	e00f      	b.n	800bb32 <UART_SetConfig+0x1a2>
 800bb12:	2300      	movs	r3, #0
 800bb14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb18:	e042      	b.n	800bba0 <UART_SetConfig+0x210>
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb20:	e03e      	b.n	800bba0 <UART_SetConfig+0x210>
 800bb22:	2304      	movs	r3, #4
 800bb24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb28:	e03a      	b.n	800bba0 <UART_SetConfig+0x210>
 800bb2a:	2308      	movs	r3, #8
 800bb2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb30:	e036      	b.n	800bba0 <UART_SetConfig+0x210>
 800bb32:	2310      	movs	r3, #16
 800bb34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb38:	e032      	b.n	800bba0 <UART_SetConfig+0x210>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a3f      	ldr	r2, [pc, #252]	@ (800bc3c <UART_SetConfig+0x2ac>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d12a      	bne.n	800bb9a <UART_SetConfig+0x20a>
 800bb44:	4b3f      	ldr	r3, [pc, #252]	@ (800bc44 <UART_SetConfig+0x2b4>)
 800bb46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb4a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bb4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb52:	d01a      	beq.n	800bb8a <UART_SetConfig+0x1fa>
 800bb54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb58:	d81b      	bhi.n	800bb92 <UART_SetConfig+0x202>
 800bb5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb5e:	d00c      	beq.n	800bb7a <UART_SetConfig+0x1ea>
 800bb60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb64:	d815      	bhi.n	800bb92 <UART_SetConfig+0x202>
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d003      	beq.n	800bb72 <UART_SetConfig+0x1e2>
 800bb6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb6e:	d008      	beq.n	800bb82 <UART_SetConfig+0x1f2>
 800bb70:	e00f      	b.n	800bb92 <UART_SetConfig+0x202>
 800bb72:	2300      	movs	r3, #0
 800bb74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb78:	e012      	b.n	800bba0 <UART_SetConfig+0x210>
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb80:	e00e      	b.n	800bba0 <UART_SetConfig+0x210>
 800bb82:	2304      	movs	r3, #4
 800bb84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb88:	e00a      	b.n	800bba0 <UART_SetConfig+0x210>
 800bb8a:	2308      	movs	r3, #8
 800bb8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb90:	e006      	b.n	800bba0 <UART_SetConfig+0x210>
 800bb92:	2310      	movs	r3, #16
 800bb94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb98:	e002      	b.n	800bba0 <UART_SetConfig+0x210>
 800bb9a:	2310      	movs	r3, #16
 800bb9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a25      	ldr	r2, [pc, #148]	@ (800bc3c <UART_SetConfig+0x2ac>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	f040 808a 	bne.w	800bcc0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bbac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bbb0:	2b08      	cmp	r3, #8
 800bbb2:	d824      	bhi.n	800bbfe <UART_SetConfig+0x26e>
 800bbb4:	a201      	add	r2, pc, #4	@ (adr r2, 800bbbc <UART_SetConfig+0x22c>)
 800bbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbba:	bf00      	nop
 800bbbc:	0800bbe1 	.word	0x0800bbe1
 800bbc0:	0800bbff 	.word	0x0800bbff
 800bbc4:	0800bbe9 	.word	0x0800bbe9
 800bbc8:	0800bbff 	.word	0x0800bbff
 800bbcc:	0800bbef 	.word	0x0800bbef
 800bbd0:	0800bbff 	.word	0x0800bbff
 800bbd4:	0800bbff 	.word	0x0800bbff
 800bbd8:	0800bbff 	.word	0x0800bbff
 800bbdc:	0800bbf7 	.word	0x0800bbf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbe0:	f7fe fbfa 	bl	800a3d8 <HAL_RCC_GetPCLK1Freq>
 800bbe4:	61f8      	str	r0, [r7, #28]
        break;
 800bbe6:	e010      	b.n	800bc0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbe8:	4b19      	ldr	r3, [pc, #100]	@ (800bc50 <UART_SetConfig+0x2c0>)
 800bbea:	61fb      	str	r3, [r7, #28]
        break;
 800bbec:	e00d      	b.n	800bc0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbee:	f7fe fb5b 	bl	800a2a8 <HAL_RCC_GetSysClockFreq>
 800bbf2:	61f8      	str	r0, [r7, #28]
        break;
 800bbf4:	e009      	b.n	800bc0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbfa:	61fb      	str	r3, [r7, #28]
        break;
 800bbfc:	e005      	b.n	800bc0a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800bc08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 8109 	beq.w	800be24 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	4613      	mov	r3, r2
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	4413      	add	r3, r2
 800bc1c:	69fa      	ldr	r2, [r7, #28]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d305      	bcc.n	800bc2e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bc28:	69fa      	ldr	r2, [r7, #28]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d912      	bls.n	800bc54 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800bc34:	e0f6      	b.n	800be24 <UART_SetConfig+0x494>
 800bc36:	bf00      	nop
 800bc38:	efff69f3 	.word	0xefff69f3
 800bc3c:	40008000 	.word	0x40008000
 800bc40:	40013800 	.word	0x40013800
 800bc44:	40021000 	.word	0x40021000
 800bc48:	40004400 	.word	0x40004400
 800bc4c:	40004800 	.word	0x40004800
 800bc50:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	2200      	movs	r2, #0
 800bc58:	461c      	mov	r4, r3
 800bc5a:	4615      	mov	r5, r2
 800bc5c:	f04f 0200 	mov.w	r2, #0
 800bc60:	f04f 0300 	mov.w	r3, #0
 800bc64:	022b      	lsls	r3, r5, #8
 800bc66:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800bc6a:	0222      	lsls	r2, r4, #8
 800bc6c:	68f9      	ldr	r1, [r7, #12]
 800bc6e:	6849      	ldr	r1, [r1, #4]
 800bc70:	0849      	lsrs	r1, r1, #1
 800bc72:	2000      	movs	r0, #0
 800bc74:	4688      	mov	r8, r1
 800bc76:	4681      	mov	r9, r0
 800bc78:	eb12 0a08 	adds.w	sl, r2, r8
 800bc7c:	eb43 0b09 	adc.w	fp, r3, r9
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	603b      	str	r3, [r7, #0]
 800bc88:	607a      	str	r2, [r7, #4]
 800bc8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc8e:	4650      	mov	r0, sl
 800bc90:	4659      	mov	r1, fp
 800bc92:	f7f4 febb 	bl	8000a0c <__aeabi_uldivmod>
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bca4:	d308      	bcc.n	800bcb8 <UART_SetConfig+0x328>
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcac:	d204      	bcs.n	800bcb8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	69ba      	ldr	r2, [r7, #24]
 800bcb4:	60da      	str	r2, [r3, #12]
 800bcb6:	e0b5      	b.n	800be24 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800bcbe:	e0b1      	b.n	800be24 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	69db      	ldr	r3, [r3, #28]
 800bcc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcc8:	d15d      	bne.n	800bd86 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800bcca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bcce:	2b08      	cmp	r3, #8
 800bcd0:	d827      	bhi.n	800bd22 <UART_SetConfig+0x392>
 800bcd2:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd8 <UART_SetConfig+0x348>)
 800bcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd8:	0800bcfd 	.word	0x0800bcfd
 800bcdc:	0800bd05 	.word	0x0800bd05
 800bce0:	0800bd0d 	.word	0x0800bd0d
 800bce4:	0800bd23 	.word	0x0800bd23
 800bce8:	0800bd13 	.word	0x0800bd13
 800bcec:	0800bd23 	.word	0x0800bd23
 800bcf0:	0800bd23 	.word	0x0800bd23
 800bcf4:	0800bd23 	.word	0x0800bd23
 800bcf8:	0800bd1b 	.word	0x0800bd1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcfc:	f7fe fb6c 	bl	800a3d8 <HAL_RCC_GetPCLK1Freq>
 800bd00:	61f8      	str	r0, [r7, #28]
        break;
 800bd02:	e014      	b.n	800bd2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd04:	f7fe fb7e 	bl	800a404 <HAL_RCC_GetPCLK2Freq>
 800bd08:	61f8      	str	r0, [r7, #28]
        break;
 800bd0a:	e010      	b.n	800bd2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd0c:	4b4c      	ldr	r3, [pc, #304]	@ (800be40 <UART_SetConfig+0x4b0>)
 800bd0e:	61fb      	str	r3, [r7, #28]
        break;
 800bd10:	e00d      	b.n	800bd2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd12:	f7fe fac9 	bl	800a2a8 <HAL_RCC_GetSysClockFreq>
 800bd16:	61f8      	str	r0, [r7, #28]
        break;
 800bd18:	e009      	b.n	800bd2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd1e:	61fb      	str	r3, [r7, #28]
        break;
 800bd20:	e005      	b.n	800bd2e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800bd22:	2300      	movs	r3, #0
 800bd24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bd26:	2301      	movs	r3, #1
 800bd28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800bd2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d077      	beq.n	800be24 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	005a      	lsls	r2, r3, #1
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	085b      	lsrs	r3, r3, #1
 800bd3e:	441a      	add	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	2b0f      	cmp	r3, #15
 800bd4e:	d916      	bls.n	800bd7e <UART_SetConfig+0x3ee>
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd56:	d212      	bcs.n	800bd7e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	f023 030f 	bic.w	r3, r3, #15
 800bd60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	085b      	lsrs	r3, r3, #1
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	f003 0307 	and.w	r3, r3, #7
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	8afb      	ldrh	r3, [r7, #22]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	8afa      	ldrh	r2, [r7, #22]
 800bd7a:	60da      	str	r2, [r3, #12]
 800bd7c:	e052      	b.n	800be24 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800bd84:	e04e      	b.n	800be24 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bd8a:	2b08      	cmp	r3, #8
 800bd8c:	d827      	bhi.n	800bdde <UART_SetConfig+0x44e>
 800bd8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd94 <UART_SetConfig+0x404>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800bdb9 	.word	0x0800bdb9
 800bd98:	0800bdc1 	.word	0x0800bdc1
 800bd9c:	0800bdc9 	.word	0x0800bdc9
 800bda0:	0800bddf 	.word	0x0800bddf
 800bda4:	0800bdcf 	.word	0x0800bdcf
 800bda8:	0800bddf 	.word	0x0800bddf
 800bdac:	0800bddf 	.word	0x0800bddf
 800bdb0:	0800bddf 	.word	0x0800bddf
 800bdb4:	0800bdd7 	.word	0x0800bdd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdb8:	f7fe fb0e 	bl	800a3d8 <HAL_RCC_GetPCLK1Freq>
 800bdbc:	61f8      	str	r0, [r7, #28]
        break;
 800bdbe:	e014      	b.n	800bdea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdc0:	f7fe fb20 	bl	800a404 <HAL_RCC_GetPCLK2Freq>
 800bdc4:	61f8      	str	r0, [r7, #28]
        break;
 800bdc6:	e010      	b.n	800bdea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bdc8:	4b1d      	ldr	r3, [pc, #116]	@ (800be40 <UART_SetConfig+0x4b0>)
 800bdca:	61fb      	str	r3, [r7, #28]
        break;
 800bdcc:	e00d      	b.n	800bdea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdce:	f7fe fa6b 	bl	800a2a8 <HAL_RCC_GetSysClockFreq>
 800bdd2:	61f8      	str	r0, [r7, #28]
        break;
 800bdd4:	e009      	b.n	800bdea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdda:	61fb      	str	r3, [r7, #28]
        break;
 800bddc:	e005      	b.n	800bdea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800bdde:	2300      	movs	r3, #0
 800bde0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800bde8:	bf00      	nop
    }

    if (pclk != 0U)
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d019      	beq.n	800be24 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	085a      	lsrs	r2, r3, #1
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	441a      	add	r2, r3
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800be02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	2b0f      	cmp	r3, #15
 800be08:	d909      	bls.n	800be1e <UART_SetConfig+0x48e>
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be10:	d205      	bcs.n	800be1e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	b29a      	uxth	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	60da      	str	r2, [r3, #12]
 800be1c:	e002      	b.n	800be24 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800be30:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800be34:	4618      	mov	r0, r3
 800be36:	3728      	adds	r7, #40	@ 0x28
 800be38:	46bd      	mov	sp, r7
 800be3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be3e:	bf00      	nop
 800be40:	00f42400 	.word	0x00f42400

0800be44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be50:	f003 0308 	and.w	r3, r3, #8
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00a      	beq.n	800be6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	430a      	orrs	r2, r1
 800be6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be72:	f003 0301 	and.w	r3, r3, #1
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00a      	beq.n	800be90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	430a      	orrs	r2, r1
 800be8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be94:	f003 0302 	and.w	r3, r3, #2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00a      	beq.n	800beb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	430a      	orrs	r2, r1
 800beb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beb6:	f003 0304 	and.w	r3, r3, #4
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00a      	beq.n	800bed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	430a      	orrs	r2, r1
 800bed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed8:	f003 0310 	and.w	r3, r3, #16
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00a      	beq.n	800bef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	430a      	orrs	r2, r1
 800bef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800befa:	f003 0320 	and.w	r3, r3, #32
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00a      	beq.n	800bf18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d01a      	beq.n	800bf5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	430a      	orrs	r2, r1
 800bf38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf42:	d10a      	bne.n	800bf5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	430a      	orrs	r2, r1
 800bf58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00a      	beq.n	800bf7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	430a      	orrs	r2, r1
 800bf7a:	605a      	str	r2, [r3, #4]
  }
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b098      	sub	sp, #96	@ 0x60
 800bf8c:	af02      	add	r7, sp, #8
 800bf8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf98:	f7fa fcea 	bl	8006970 <HAL_GetTick>
 800bf9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f003 0308 	and.w	r3, r3, #8
 800bfa8:	2b08      	cmp	r3, #8
 800bfaa:	d12e      	bne.n	800c00a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f88c 	bl	800c0d8 <UART_WaitOnFlagUntilTimeout>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d021      	beq.n	800c00a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfce:	e853 3f00 	ldrex	r3, [r3]
 800bfd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfda:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfe4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfe6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfec:	e841 2300 	strex	r3, r2, [r1]
 800bff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e6      	bne.n	800bfc6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2220      	movs	r2, #32
 800bffc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e062      	b.n	800c0d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 0304 	and.w	r3, r3, #4
 800c014:	2b04      	cmp	r3, #4
 800c016:	d149      	bne.n	800c0ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c020:	2200      	movs	r2, #0
 800c022:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f856 	bl	800c0d8 <UART_WaitOnFlagUntilTimeout>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d03c      	beq.n	800c0ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03a:	e853 3f00 	ldrex	r3, [r3]
 800c03e:	623b      	str	r3, [r7, #32]
   return(result);
 800c040:	6a3b      	ldr	r3, [r7, #32]
 800c042:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	461a      	mov	r2, r3
 800c04e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c050:	633b      	str	r3, [r7, #48]	@ 0x30
 800c052:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c054:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c058:	e841 2300 	strex	r3, r2, [r1]
 800c05c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1e6      	bne.n	800c032 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3308      	adds	r3, #8
 800c06a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	e853 3f00 	ldrex	r3, [r3]
 800c072:	60fb      	str	r3, [r7, #12]
   return(result);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f023 0301 	bic.w	r3, r3, #1
 800c07a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	3308      	adds	r3, #8
 800c082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c084:	61fa      	str	r2, [r7, #28]
 800c086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c088:	69b9      	ldr	r1, [r7, #24]
 800c08a:	69fa      	ldr	r2, [r7, #28]
 800c08c:	e841 2300 	strex	r3, r2, [r1]
 800c090:	617b      	str	r3, [r7, #20]
   return(result);
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1e5      	bne.n	800c064 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2220      	movs	r2, #32
 800c09c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e011      	b.n	800c0d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2220      	movs	r2, #32
 800c0b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2220      	movs	r2, #32
 800c0b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3758      	adds	r7, #88	@ 0x58
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	603b      	str	r3, [r7, #0]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0e8:	e04f      	b.n	800c18a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f0:	d04b      	beq.n	800c18a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0f2:	f7fa fc3d 	bl	8006970 <HAL_GetTick>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d302      	bcc.n	800c108 <UART_WaitOnFlagUntilTimeout+0x30>
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c108:	2303      	movs	r3, #3
 800c10a:	e04e      	b.n	800c1aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f003 0304 	and.w	r3, r3, #4
 800c116:	2b00      	cmp	r3, #0
 800c118:	d037      	beq.n	800c18a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	2b80      	cmp	r3, #128	@ 0x80
 800c11e:	d034      	beq.n	800c18a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	2b40      	cmp	r3, #64	@ 0x40
 800c124:	d031      	beq.n	800c18a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	69db      	ldr	r3, [r3, #28]
 800c12c:	f003 0308 	and.w	r3, r3, #8
 800c130:	2b08      	cmp	r3, #8
 800c132:	d110      	bne.n	800c156 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2208      	movs	r2, #8
 800c13a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f000 f8ff 	bl	800c340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2208      	movs	r2, #8
 800c146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	e029      	b.n	800c1aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	69db      	ldr	r3, [r3, #28]
 800c15c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c164:	d111      	bne.n	800c18a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c16e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f000 f8e5 	bl	800c340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2220      	movs	r2, #32
 800c17a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c186:	2303      	movs	r3, #3
 800c188:	e00f      	b.n	800c1aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	69da      	ldr	r2, [r3, #28]
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	4013      	ands	r3, r2
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	429a      	cmp	r2, r3
 800c198:	bf0c      	ite	eq
 800c19a:	2301      	moveq	r3, #1
 800c19c:	2300      	movne	r3, #0
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	79fb      	ldrb	r3, [r7, #7]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d0a0      	beq.n	800c0ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
	...

0800c1b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b096      	sub	sp, #88	@ 0x58
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	88fa      	ldrh	r2, [r7, #6]
 800c1cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2222      	movs	r2, #34	@ 0x22
 800c1dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d028      	beq.n	800c23a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1ec:	4a3e      	ldr	r2, [pc, #248]	@ (800c2e8 <UART_Start_Receive_DMA+0x134>)
 800c1ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1f4:	4a3d      	ldr	r2, [pc, #244]	@ (800c2ec <UART_Start_Receive_DMA+0x138>)
 800c1f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1fc:	4a3c      	ldr	r2, [pc, #240]	@ (800c2f0 <UART_Start_Receive_DMA+0x13c>)
 800c1fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c204:	2200      	movs	r2, #0
 800c206:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	3324      	adds	r3, #36	@ 0x24
 800c212:	4619      	mov	r1, r3
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c218:	461a      	mov	r2, r3
 800c21a:	88fb      	ldrh	r3, [r7, #6]
 800c21c:	f7fc f802 	bl	8008224 <HAL_DMA_Start_IT>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d009      	beq.n	800c23a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2210      	movs	r2, #16
 800c22a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2220      	movs	r2, #32
 800c232:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e051      	b.n	800c2de <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d018      	beq.n	800c274 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c24a:	e853 3f00 	ldrex	r3, [r3]
 800c24e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c256:	657b      	str	r3, [r7, #84]	@ 0x54
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	461a      	mov	r2, r3
 800c25e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c260:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c262:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c264:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c266:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c268:	e841 2300 	strex	r3, r2, [r1]
 800c26c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c26e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1e6      	bne.n	800c242 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3308      	adds	r3, #8
 800c27a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c27e:	e853 3f00 	ldrex	r3, [r3]
 800c282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c286:	f043 0301 	orr.w	r3, r3, #1
 800c28a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	3308      	adds	r3, #8
 800c292:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c294:	637a      	str	r2, [r7, #52]	@ 0x34
 800c296:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c298:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c29a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c29c:	e841 2300 	strex	r3, r2, [r1]
 800c2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e5      	bne.n	800c274 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3308      	adds	r3, #8
 800c2ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	e853 3f00 	ldrex	r3, [r3]
 800c2b6:	613b      	str	r3, [r7, #16]
   return(result);
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2c8:	623a      	str	r2, [r7, #32]
 800c2ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2cc:	69f9      	ldr	r1, [r7, #28]
 800c2ce:	6a3a      	ldr	r2, [r7, #32]
 800c2d0:	e841 2300 	strex	r3, r2, [r1]
 800c2d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1e5      	bne.n	800c2a8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3758      	adds	r7, #88	@ 0x58
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	0800c409 	.word	0x0800c409
 800c2ec:	0800c535 	.word	0x0800c535
 800c2f0:	0800c573 	.word	0x0800c573

0800c2f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b089      	sub	sp, #36	@ 0x24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	e853 3f00 	ldrex	r3, [r3]
 800c308:	60bb      	str	r3, [r7, #8]
   return(result);
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c310:	61fb      	str	r3, [r7, #28]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	461a      	mov	r2, r3
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	61bb      	str	r3, [r7, #24]
 800c31c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31e:	6979      	ldr	r1, [r7, #20]
 800c320:	69ba      	ldr	r2, [r7, #24]
 800c322:	e841 2300 	strex	r3, r2, [r1]
 800c326:	613b      	str	r3, [r7, #16]
   return(result);
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1e6      	bne.n	800c2fc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2220      	movs	r2, #32
 800c332:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800c334:	bf00      	nop
 800c336:	3724      	adds	r7, #36	@ 0x24
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c340:	b480      	push	{r7}
 800c342:	b095      	sub	sp, #84	@ 0x54
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c350:	e853 3f00 	ldrex	r3, [r3]
 800c354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c35c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c366:	643b      	str	r3, [r7, #64]	@ 0x40
 800c368:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c36c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c36e:	e841 2300 	strex	r3, r2, [r1]
 800c372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1e6      	bne.n	800c348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3308      	adds	r3, #8
 800c380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c382:	6a3b      	ldr	r3, [r7, #32]
 800c384:	e853 3f00 	ldrex	r3, [r3]
 800c388:	61fb      	str	r3, [r7, #28]
   return(result);
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	f023 0301 	bic.w	r3, r3, #1
 800c390:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3308      	adds	r3, #8
 800c398:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c39a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c39c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c3a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3a2:	e841 2300 	strex	r3, r2, [r1]
 800c3a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1e5      	bne.n	800c37a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d118      	bne.n	800c3e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	e853 3f00 	ldrex	r3, [r3]
 800c3c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f023 0310 	bic.w	r3, r3, #16
 800c3ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3d4:	61bb      	str	r3, [r7, #24]
 800c3d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d8:	6979      	ldr	r1, [r7, #20]
 800c3da:	69ba      	ldr	r2, [r7, #24]
 800c3dc:	e841 2300 	strex	r3, r2, [r1]
 800c3e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1e6      	bne.n	800c3b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2220      	movs	r2, #32
 800c3ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c3fc:	bf00      	nop
 800c3fe:	3754      	adds	r7, #84	@ 0x54
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b09c      	sub	sp, #112	@ 0x70
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c414:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f003 0320 	and.w	r3, r3, #32
 800c420:	2b00      	cmp	r3, #0
 800c422:	d171      	bne.n	800c508 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c426:	2200      	movs	r2, #0
 800c428:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c42c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c434:	e853 3f00 	ldrex	r3, [r3]
 800c438:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c43a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c43c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c440:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	461a      	mov	r2, r3
 800c448:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c44a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c44c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c450:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c452:	e841 2300 	strex	r3, r2, [r1]
 800c456:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1e6      	bne.n	800c42c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c45e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	3308      	adds	r3, #8
 800c464:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c468:	e853 3f00 	ldrex	r3, [r3]
 800c46c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c46e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c470:	f023 0301 	bic.w	r3, r3, #1
 800c474:	667b      	str	r3, [r7, #100]	@ 0x64
 800c476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	3308      	adds	r3, #8
 800c47c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c47e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c480:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c482:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c484:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c486:	e841 2300 	strex	r3, r2, [r1]
 800c48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1e5      	bne.n	800c45e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3308      	adds	r3, #8
 800c498:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49c:	e853 3f00 	ldrex	r3, [r3]
 800c4a0:	623b      	str	r3, [r7, #32]
   return(result);
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c4aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c4b2:	633a      	str	r2, [r7, #48]	@ 0x30
 800c4b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4ba:	e841 2300 	strex	r3, r2, [r1]
 800c4be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1e5      	bne.n	800c492 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c4c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4c8:	2220      	movs	r2, #32
 800c4ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d118      	bne.n	800c508 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	e853 3f00 	ldrex	r3, [r3]
 800c4e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f023 0310 	bic.w	r3, r3, #16
 800c4ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c4ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4f4:	61fb      	str	r3, [r7, #28]
 800c4f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f8:	69b9      	ldr	r1, [r7, #24]
 800c4fa:	69fa      	ldr	r2, [r7, #28]
 800c4fc:	e841 2300 	strex	r3, r2, [r1]
 800c500:	617b      	str	r3, [r7, #20]
   return(result);
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1e6      	bne.n	800c4d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c50a:	2200      	movs	r2, #0
 800c50c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c50e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c512:	2b01      	cmp	r3, #1
 800c514:	d107      	bne.n	800c526 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c518:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c51c:	4619      	mov	r1, r3
 800c51e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c520:	f7f9 fe48 	bl	80061b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c524:	e002      	b.n	800c52c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c526:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c528:	f7ff fa14 	bl	800b954 <HAL_UART_RxCpltCallback>
}
 800c52c:	bf00      	nop
 800c52e:	3770      	adds	r7, #112	@ 0x70
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c540:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2201      	movs	r2, #1
 800c546:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d109      	bne.n	800c564 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c556:	085b      	lsrs	r3, r3, #1
 800c558:	b29b      	uxth	r3, r3
 800c55a:	4619      	mov	r1, r3
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f7f9 fe29 	bl	80061b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c562:	e002      	b.n	800c56a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f7ff f9ff 	bl	800b968 <HAL_UART_RxHalfCpltCallback>
}
 800c56a:	bf00      	nop
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b086      	sub	sp, #24
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c584:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c58c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c598:	2b80      	cmp	r3, #128	@ 0x80
 800c59a:	d109      	bne.n	800c5b0 <UART_DMAError+0x3e>
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	2b21      	cmp	r3, #33	@ 0x21
 800c5a0:	d106      	bne.n	800c5b0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800c5aa:	6978      	ldr	r0, [r7, #20]
 800c5ac:	f7ff fea2 	bl	800c2f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ba:	2b40      	cmp	r3, #64	@ 0x40
 800c5bc:	d109      	bne.n	800c5d2 <UART_DMAError+0x60>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b22      	cmp	r3, #34	@ 0x22
 800c5c2:	d106      	bne.n	800c5d2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800c5cc:	6978      	ldr	r0, [r7, #20]
 800c5ce:	f7ff feb7 	bl	800c340 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5d8:	f043 0210 	orr.w	r2, r3, #16
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5e2:	6978      	ldr	r0, [r7, #20]
 800c5e4:	f7ff f9ca 	bl	800b97c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5e8:	bf00      	nop
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2200      	movs	r2, #0
 800c602:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2200      	movs	r2, #0
 800c60a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f7ff f9b4 	bl	800b97c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c614:	bf00      	nop
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	e853 3f00 	ldrex	r3, [r3]
 800c630:	60bb      	str	r3, [r7, #8]
   return(result);
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c638:	61fb      	str	r3, [r7, #28]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	61bb      	str	r3, [r7, #24]
 800c644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c646:	6979      	ldr	r1, [r7, #20]
 800c648:	69ba      	ldr	r2, [r7, #24]
 800c64a:	e841 2300 	strex	r3, r2, [r1]
 800c64e:	613b      	str	r3, [r7, #16]
   return(result);
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1e6      	bne.n	800c624 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2220      	movs	r2, #32
 800c65a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f7ff f96c 	bl	800b940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c668:	bf00      	nop
 800c66a:	3720      	adds	r7, #32
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c678:	bf00      	nop
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b08c      	sub	sp, #48	@ 0x30
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	4613      	mov	r3, r2
 800c690:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c698:	2b20      	cmp	r3, #32
 800c69a:	d142      	bne.n	800c722 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d002      	beq.n	800c6a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c6a2:	88fb      	ldrh	r3, [r7, #6]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e03b      	b.n	800c724 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c6b8:	88fb      	ldrh	r3, [r7, #6]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	68b9      	ldr	r1, [r7, #8]
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7ff fd78 	bl	800c1b4 <UART_Start_Receive_DMA>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c6ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d124      	bne.n	800c71c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d11d      	bne.n	800c716 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2210      	movs	r2, #16
 800c6e0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	e853 3f00 	ldrex	r3, [r3]
 800c6ee:	617b      	str	r3, [r7, #20]
   return(result);
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f043 0310 	orr.w	r3, r3, #16
 800c6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c700:	627b      	str	r3, [r7, #36]	@ 0x24
 800c702:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c704:	6a39      	ldr	r1, [r7, #32]
 800c706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c708:	e841 2300 	strex	r3, r2, [r1]
 800c70c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1e6      	bne.n	800c6e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c714:	e002      	b.n	800c71c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c71c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c720:	e000      	b.n	800c724 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c722:	2302      	movs	r3, #2
  }
}
 800c724:	4618      	mov	r0, r3
 800c726:	3730      	adds	r7, #48	@ 0x30
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <memset>:
 800c72c:	4402      	add	r2, r0
 800c72e:	4603      	mov	r3, r0
 800c730:	4293      	cmp	r3, r2
 800c732:	d100      	bne.n	800c736 <memset+0xa>
 800c734:	4770      	bx	lr
 800c736:	f803 1b01 	strb.w	r1, [r3], #1
 800c73a:	e7f9      	b.n	800c730 <memset+0x4>

0800c73c <__libc_init_array>:
 800c73c:	b570      	push	{r4, r5, r6, lr}
 800c73e:	4d0d      	ldr	r5, [pc, #52]	@ (800c774 <__libc_init_array+0x38>)
 800c740:	4c0d      	ldr	r4, [pc, #52]	@ (800c778 <__libc_init_array+0x3c>)
 800c742:	1b64      	subs	r4, r4, r5
 800c744:	10a4      	asrs	r4, r4, #2
 800c746:	2600      	movs	r6, #0
 800c748:	42a6      	cmp	r6, r4
 800c74a:	d109      	bne.n	800c760 <__libc_init_array+0x24>
 800c74c:	4d0b      	ldr	r5, [pc, #44]	@ (800c77c <__libc_init_array+0x40>)
 800c74e:	4c0c      	ldr	r4, [pc, #48]	@ (800c780 <__libc_init_array+0x44>)
 800c750:	f000 f826 	bl	800c7a0 <_init>
 800c754:	1b64      	subs	r4, r4, r5
 800c756:	10a4      	asrs	r4, r4, #2
 800c758:	2600      	movs	r6, #0
 800c75a:	42a6      	cmp	r6, r4
 800c75c:	d105      	bne.n	800c76a <__libc_init_array+0x2e>
 800c75e:	bd70      	pop	{r4, r5, r6, pc}
 800c760:	f855 3b04 	ldr.w	r3, [r5], #4
 800c764:	4798      	blx	r3
 800c766:	3601      	adds	r6, #1
 800c768:	e7ee      	b.n	800c748 <__libc_init_array+0xc>
 800c76a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c76e:	4798      	blx	r3
 800c770:	3601      	adds	r6, #1
 800c772:	e7f2      	b.n	800c75a <__libc_init_array+0x1e>
 800c774:	0800c808 	.word	0x0800c808
 800c778:	0800c808 	.word	0x0800c808
 800c77c:	0800c808 	.word	0x0800c808
 800c780:	0800c80c 	.word	0x0800c80c

0800c784 <memcpy>:
 800c784:	440a      	add	r2, r1
 800c786:	4291      	cmp	r1, r2
 800c788:	f100 33ff 	add.w	r3, r0, #4294967295
 800c78c:	d100      	bne.n	800c790 <memcpy+0xc>
 800c78e:	4770      	bx	lr
 800c790:	b510      	push	{r4, lr}
 800c792:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c79a:	4291      	cmp	r1, r2
 800c79c:	d1f9      	bne.n	800c792 <memcpy+0xe>
 800c79e:	bd10      	pop	{r4, pc}

0800c7a0 <_init>:
 800c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a2:	bf00      	nop
 800c7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a6:	bc08      	pop	{r3}
 800c7a8:	469e      	mov	lr, r3
 800c7aa:	4770      	bx	lr

0800c7ac <_fini>:
 800c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ae:	bf00      	nop
 800c7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7b2:	bc08      	pop	{r3}
 800c7b4:	469e      	mov	lr, r3
 800c7b6:	4770      	bx	lr
